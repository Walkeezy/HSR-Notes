async function getNotes(e="duedate",t="active"){let n;try{return n=await $.ajax({method:"GET",url:"/notes?order="+e+"&status="+t})}catch(e){console.error(e)}}async function addNote(e){try{$.ajax({method:"POST",url:"/note",data:e})}catch(e){console.error(e)}}async function updateNote(e,t){try{$.ajax({method:"PUT",url:"/notes/"+e,data:t})}catch(e){console.error(e)}}async function archiveNote(e){try{$.ajax({method:"POST",url:"/notes/"+e+"/archive"})}catch(e){console.error(e)}}async function unarchiveNote(e){try{$.ajax({method:"POST",url:"/notes/"+e+"/unarchive"})}catch(e){console.error(e)}}async function deleteNote(e){try{$.ajax({method:"DELETE",url:"/notes/"+e})}catch(e){console.error(e)}}async function getNote(e){let t;try{return t=await $.ajax({method:"GET",url:"/notes/"+e})}catch(e){console.error(e)}}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],a=e.document,r=Object.getPrototypeOf,s=n.slice,i=n.concat,o=n.push,d=n.indexOf,u={},l=u.toString,_=u.hasOwnProperty,c=_.toString,m=c.call(Object),h={},p=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},f=function(e){return null!=e&&e===e.window},y={type:!0,src:!0,noModule:!0};function M(e,t,n){var r,s=(t=t||a).createElement("script");if(s.text=e,n)for(r in y)n[r]&&(s[r]=n[r]);t.head.appendChild(s).parentNode.removeChild(s)}function L(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?u[l.call(e)]||"object":typeof e}var g=function(e,t){return new g.fn.init(e,t)},Y=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function k(e){var t=!!e&&"length"in e&&e.length,n=L(e);return!p(e)&&!f(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}g.fn=g.prototype={jquery:"3.3.1",constructor:g,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=g.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return g.each(this,e)},map:function(e){return this.pushStack(g.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:n.sort,splice:n.splice},g.extend=g.fn.extend=function(){var e,t,n,a,r,s,i=arguments[0]||{},o=1,d=arguments.length,u=!1;for("boolean"==typeof i&&(u=i,i=arguments[o]||{},o++),"object"==typeof i||p(i)||(i={}),o===d&&(i=this,o--);o<d;o++)if(null!=(e=arguments[o]))for(t in e)n=i[t],i!==(a=e[t])&&(u&&a&&(g.isPlainObject(a)||(r=Array.isArray(a)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&g.isPlainObject(n)?n:{},i[t]=g.extend(u,s,a)):void 0!==a&&(i[t]=a));return i},g.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==l.call(e))&&(!(t=r(e))||"function"==typeof(n=_.call(t,"constructor")&&t.constructor)&&c.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){M(e)},each:function(e,t){var n,a=0;if(k(e))for(n=e.length;a<n&&!1!==t.call(e[a],a,e[a]);a++);else for(a in e)if(!1===t.call(e[a],a,e[a]))break;return e},trim:function(e){return null==e?"":(e+"").replace(Y,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(k(Object(e))?g.merge(n,"string"==typeof e?[e]:e):o.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},merge:function(e,t){for(var n=+t.length,a=0,r=e.length;a<n;a++)e[r++]=t[a];return e.length=r,e},grep:function(e,t,n){for(var a=[],r=0,s=e.length,i=!n;r<s;r++)!t(e[r],r)!==i&&a.push(e[r]);return a},map:function(e,t,n){var a,r,s=0,o=[];if(k(e))for(a=e.length;s<a;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return i.apply([],o)},guid:1,support:h}),"function"==typeof Symbol&&(g.fn[Symbol.iterator]=n[Symbol.iterator]),g.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){u["[object "+t+"]"]=t.toLowerCase()});var v=function(e){var t,n,a,r,s,i,o,d,u,l,_,c,m,h,p,f,y,M,L,g="sizzle"+1*new Date,Y=e.document,k=0,v=0,D=ie(),w=ie(),T=ie(),b=function(e,t){return e===t&&(_=!0),0},S={}.hasOwnProperty,x=[],H=x.pop,j=x.push,P=x.push,E=x.slice,O=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},A="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",W="[\\x20\\t\\r\\n\\f]",C="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",N="\\["+W+"*("+C+")(?:"+W+"*([*^$|!~]?=)"+W+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+C+"))|)"+W+"*\\]",F=":("+C+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+N+")*)|.*)\\)|)",I=new RegExp(W+"+","g"),z=new RegExp("^"+W+"+|((?:^|[^\\\\])(?:\\\\.)*)"+W+"+$","g"),R=new RegExp("^"+W+"*,"+W+"*"),J=new RegExp("^"+W+"*([>+~]|"+W+")"+W+"*"),$=new RegExp("="+W+"*([^\\]'\"]*?)"+W+"*\\]","g"),B=new RegExp(F),q=new RegExp("^"+C+"$"),U={ID:new RegExp("^#("+C+")"),CLASS:new RegExp("^\\.("+C+")"),TAG:new RegExp("^("+C+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+W+"*(even|odd|(([+-]|)(\\d*)n|)"+W+"*(?:([+-]|)"+W+"*(\\d+)|))"+W+"*\\)|)","i"),bool:new RegExp("^(?:"+A+")$","i"),needsContext:new RegExp("^"+W+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+W+"*((?:-\\d)?\\d*)"+W+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,X=/[+~]/,Q=new RegExp("\\\\([\\da-f]{1,6}"+W+"?|("+W+")|.)","ig"),ee=function(e,t,n){var a="0x"+t-65536;return a!=a||n?t:a<0?String.fromCharCode(a+65536):String.fromCharCode(a>>10|55296,1023&a|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){c()},re=Me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{P.apply(x=E.call(Y.childNodes),Y.childNodes),x[Y.childNodes.length].nodeType}catch(e){P={apply:x.length?function(e,t){j.apply(e,E.call(t))}:function(e,t){for(var n=e.length,a=0;e[n++]=t[a++];);e.length=n-1}}}function se(e,t,a,r){var s,o,u,l,_,h,y,M=t&&t.ownerDocument,k=t?t.nodeType:9;if(a=a||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return a;if(!r&&((t?t.ownerDocument||t:Y)!==m&&c(t),t=t||m,p)){if(11!==k&&(_=Z.exec(e)))if(s=_[1]){if(9===k){if(!(u=t.getElementById(s)))return a;if(u.id===s)return a.push(u),a}else if(M&&(u=M.getElementById(s))&&L(t,u)&&u.id===s)return a.push(u),a}else{if(_[2])return P.apply(a,t.getElementsByTagName(e)),a;if((s=_[3])&&n.getElementsByClassName&&t.getElementsByClassName)return P.apply(a,t.getElementsByClassName(s)),a}if(n.qsa&&!T[e+" "]&&(!f||!f.test(e))){if(1!==k)M=t,y=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=g),o=(h=i(e)).length;o--;)h[o]="#"+l+" "+ye(h[o]);y=h.join(","),M=X.test(e)&&pe(t.parentNode)||t}if(y)try{return P.apply(a,M.querySelectorAll(y)),a}catch(e){}finally{l===g&&t.removeAttribute("id")}}}return d(e.replace(z,"$1"),t,a,r)}function ie(){var e=[];return function t(n,r){return e.push(n+" ")>a.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function oe(e){return e[g]=!0,e}function de(e){var t=m.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),r=n.length;r--;)a.attrHandle[n[r]]=t}function le(e,t){var n=t&&e,a=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(a)return a;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function _e(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ce(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return oe(function(t){return t=+t,oe(function(n,a){for(var r,s=e([],n.length,t),i=s.length;i--;)n[r=s[i]]&&(n[r]=!(a[r]=n[r]))})})}function pe(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},s=se.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},c=se.setDocument=function(e){var t,r,i=e?e.ownerDocument||e:Y;return i!==m&&9===i.nodeType&&i.documentElement?(h=(m=i).documentElement,p=!s(m),Y!==m&&(r=m.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ae,!1):r.attachEvent&&r.attachEvent("onunload",ae)),n.attributes=de(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=de(function(e){return e.appendChild(m.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(m.getElementsByClassName),n.getById=de(function(e){return h.appendChild(e).id=g,!m.getElementsByName||!m.getElementsByName(g).length}),n.getById?(a.filter.ID=function(e){var t=e.replace(Q,ee);return function(e){return e.getAttribute("id")===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n=t.getElementById(e);return n?[n]:[]}}):(a.filter.ID=function(e){var t=e.replace(Q,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&p){var n,a,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),a=0;s=r[a++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),a.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,a=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&a.push(n);return a}return s},a.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&p)return t.getElementsByClassName(e)},y=[],f=[],(n.qsa=K.test(m.querySelectorAll))&&(de(function(e){h.appendChild(e).innerHTML="<a id='"+g+"'></a><select id='"+g+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&f.push("[*^$]="+W+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||f.push("\\["+W+"*(?:value|"+A+")"),e.querySelectorAll("[id~="+g+"-]").length||f.push("~="),e.querySelectorAll(":checked").length||f.push(":checked"),e.querySelectorAll("a#"+g+"+*").length||f.push(".#.+[+~]")}),de(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=m.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&f.push("name"+W+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&f.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),f.push(",.*:")})),(n.matchesSelector=K.test(M=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&de(function(e){n.disconnectedMatch=M.call(e,"*"),M.call(e,"[s!='']:x"),y.push("!=",F)}),f=f.length&&new RegExp(f.join("|")),y=y.length&&new RegExp(y.join("|")),t=K.test(h.compareDocumentPosition),L=t||K.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,a=t&&t.parentNode;return e===a||!(!a||1!==a.nodeType||!(n.contains?n.contains(a):e.compareDocumentPosition&&16&e.compareDocumentPosition(a)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},b=t?function(e,t){if(e===t)return _=!0,0;var a=!e.compareDocumentPosition-!t.compareDocumentPosition;return a||(1&(a=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===a?e===m||e.ownerDocument===Y&&L(Y,e)?-1:t===m||t.ownerDocument===Y&&L(Y,t)?1:l?O(l,e)-O(l,t):0:4&a?-1:1)}:function(e,t){if(e===t)return _=!0,0;var n,a=0,r=e.parentNode,s=t.parentNode,i=[e],o=[t];if(!r||!s)return e===m?-1:t===m?1:r?-1:s?1:l?O(l,e)-O(l,t):0;if(r===s)return le(e,t);for(n=e;n=n.parentNode;)i.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;i[a]===o[a];)a++;return a?le(i[a],o[a]):i[a]===Y?-1:o[a]===Y?1:0},m):m},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==m&&c(e),t=t.replace($,"='$1']"),n.matchesSelector&&p&&!T[t+" "]&&(!y||!y.test(t))&&(!f||!f.test(t)))try{var a=M.call(e,t);if(a||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return a}catch(e){}return se(t,m,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==m&&c(e),L(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==m&&c(e);var r=a.attrHandle[t.toLowerCase()],s=r&&S.call(a.attrHandle,t.toLowerCase())?r(e,t,!p):void 0;return void 0!==s?s:n.attributes||!p?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},se.escape=function(e){return(e+"").replace(te,ne)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,a=[],r=0,s=0;if(_=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(b),_){for(;t=e[s++];)t===e[s]&&(r=a.push(s));for(;r--;)e.splice(a[r],1)}return l=null,e},r=se.getText=function(e){var t,n="",a=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[a++];)n+=r(t);return n},(a=se.selectors={cacheLength:50,createPseudo:oe,match:U,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Q,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Q,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return U.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&B.test(n)&&(t=i(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Q,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=D[e+" "];return t||(t=new RegExp("(^|"+W+")"+e+"("+W+"|$)"))&&D(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(a){var r=se.attr(a,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(I," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,a,r){var s="nth"!==e.slice(0,3),i="last"!==e.slice(-4),o="of-type"===t;return 1===a&&0===r?function(e){return!!e.parentNode}:function(t,n,d){var u,l,_,c,m,h,p=s!==i?"nextSibling":"previousSibling",f=t.parentNode,y=o&&t.nodeName.toLowerCase(),M=!d&&!o,L=!1;if(f){if(s){for(;p;){for(c=t;c=c[p];)if(o?c.nodeName.toLowerCase()===y:1===c.nodeType)return!1;h=p="only"===e&&!h&&"nextSibling"}return!0}if(h=[i?f.firstChild:f.lastChild],i&&M){for(L=(m=(u=(l=(_=(c=f)[g]||(c[g]={}))[c.uniqueID]||(_[c.uniqueID]={}))[e]||[])[0]===k&&u[1])&&u[2],c=m&&f.childNodes[m];c=++m&&c&&c[p]||(L=m=0)||h.pop();)if(1===c.nodeType&&++L&&c===t){l[e]=[k,m,L];break}}else if(M&&(L=m=(u=(l=(_=(c=t)[g]||(c[g]={}))[c.uniqueID]||(_[c.uniqueID]={}))[e]||[])[0]===k&&u[1]),!1===L)for(;(c=++m&&c&&c[p]||(L=m=0)||h.pop())&&((o?c.nodeName.toLowerCase()!==y:1!==c.nodeType)||!++L||(M&&((l=(_=c[g]||(c[g]={}))[c.uniqueID]||(_[c.uniqueID]={}))[e]=[k,L]),c!==t)););return(L-=r)===a||L%a==0&&L/a>=0}}},PSEUDO:function(e,t){var n,r=a.pseudos[e]||a.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[g]?r(t):r.length>1?(n=[e,e,"",t],a.setFilters.hasOwnProperty(e.toLowerCase())?oe(function(e,n){for(var a,s=r(e,t),i=s.length;i--;)e[a=O(e,s[i])]=!(n[a]=s[i])}):function(e){return r(e,0,n)}):r}},pseudos:{not:oe(function(e){var t=[],n=[],a=o(e.replace(z,"$1"));return a[g]?oe(function(e,t,n,r){for(var s,i=a(e,null,r,[]),o=e.length;o--;)(s=i[o])&&(e[o]=!(t[o]=s))}):function(e,r,s){return t[0]=e,a(t,null,s,n),t[0]=null,!n.pop()}}),has:oe(function(e){return function(t){return se(e,t).length>0}}),contains:oe(function(e){return e=e.replace(Q,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:oe(function(e){return q.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(Q,ee).toLowerCase(),function(t){var n;do{if(n=p?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===m.activeElement&&(!m.hasFocus||m.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!a.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var a=n<0?n+t:n;--a>=0;)e.push(a);return e}),gt:he(function(e,t,n){for(var a=n<0?n+t:n;++a<t;)e.push(a);return e})}}).pseudos.nth=a.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})a.pseudos[t]=_e(t);for(t in{submit:!0,reset:!0})a.pseudos[t]=ce(t);function fe(){}function ye(e){for(var t=0,n=e.length,a="";t<n;t++)a+=e[t].value;return a}function Me(e,t,n){var a=t.dir,r=t.next,s=r||a,i=n&&"parentNode"===s,o=v++;return t.first?function(t,n,r){for(;t=t[a];)if(1===t.nodeType||i)return e(t,n,r);return!1}:function(t,n,d){var u,l,_,c=[k,o];if(d){for(;t=t[a];)if((1===t.nodeType||i)&&e(t,n,d))return!0}else for(;t=t[a];)if(1===t.nodeType||i)if(l=(_=t[g]||(t[g]={}))[t.uniqueID]||(_[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[a]||t;else{if((u=l[s])&&u[0]===k&&u[1]===o)return c[2]=u[2];if(l[s]=c,c[2]=e(t,n,d))return!0}return!1}}function Le(e){return e.length>1?function(t,n,a){for(var r=e.length;r--;)if(!e[r](t,n,a))return!1;return!0}:e[0]}function ge(e,t,n,a,r){for(var s,i=[],o=0,d=e.length,u=null!=t;o<d;o++)(s=e[o])&&(n&&!n(s,a,r)||(i.push(s),u&&t.push(o)));return i}function Ye(e,t,n,a,r,s){return a&&!a[g]&&(a=Ye(a)),r&&!r[g]&&(r=Ye(r,s)),oe(function(s,i,o,d){var u,l,_,c=[],m=[],h=i.length,p=s||function(e,t,n){for(var a=0,r=t.length;a<r;a++)se(e,t[a],n);return n}(t||"*",o.nodeType?[o]:o,[]),f=!e||!s&&t?p:ge(p,c,e,o,d),y=n?r||(s?e:h||a)?[]:i:f;if(n&&n(f,y,o,d),a)for(u=ge(y,m),a(u,[],o,d),l=u.length;l--;)(_=u[l])&&(y[m[l]]=!(f[m[l]]=_));if(s){if(r||e){if(r){for(u=[],l=y.length;l--;)(_=y[l])&&u.push(f[l]=_);r(null,y=[],u,d)}for(l=y.length;l--;)(_=y[l])&&(u=r?O(s,_):c[l])>-1&&(s[u]=!(i[u]=_))}}else y=ge(y===i?y.splice(h,y.length):y),r?r(null,i,y,d):P.apply(i,y)})}function ke(e){for(var t,n,r,s=e.length,i=a.relative[e[0].type],o=i||a.relative[" "],d=i?1:0,l=Me(function(e){return e===t},o,!0),_=Me(function(e){return O(t,e)>-1},o,!0),c=[function(e,n,a){var r=!i&&(a||n!==u)||((t=n).nodeType?l(e,n,a):_(e,n,a));return t=null,r}];d<s;d++)if(n=a.relative[e[d].type])c=[Me(Le(c),n)];else{if((n=a.filter[e[d].type].apply(null,e[d].matches))[g]){for(r=++d;r<s&&!a.relative[e[r].type];r++);return Ye(d>1&&Le(c),d>1&&ye(e.slice(0,d-1).concat({value:" "===e[d-2].type?"*":""})).replace(z,"$1"),n,d<r&&ke(e.slice(d,r)),r<s&&ke(e=e.slice(r)),r<s&&ye(e))}c.push(n)}return Le(c)}return fe.prototype=a.filters=a.pseudos,a.setFilters=new fe,i=se.tokenize=function(e,t){var n,r,s,i,o,d,u,l=w[e+" "];if(l)return t?0:l.slice(0);for(o=e,d=[],u=a.preFilter;o;){for(i in n&&!(r=R.exec(o))||(r&&(o=o.slice(r[0].length)||o),d.push(s=[])),n=!1,(r=J.exec(o))&&(n=r.shift(),s.push({value:n,type:r[0].replace(z," ")}),o=o.slice(n.length)),a.filter)!(r=U[i].exec(o))||u[i]&&!(r=u[i](r))||(n=r.shift(),s.push({value:n,type:i,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?se.error(e):w(e,d).slice(0)},o=se.compile=function(e,t){var n,r=[],s=[],o=T[e+" "];if(!o){for(t||(t=i(e)),n=t.length;n--;)(o=ke(t[n]))[g]?r.push(o):s.push(o);(o=T(e,function(e,t){var n=t.length>0,r=e.length>0,s=function(s,i,o,d,l){var _,h,f,y=0,M="0",L=s&&[],g=[],Y=u,v=s||r&&a.find.TAG("*",l),D=k+=null==Y?1:Math.random()||.1,w=v.length;for(l&&(u=i===m||i||l);M!==w&&null!=(_=v[M]);M++){if(r&&_){for(h=0,i||_.ownerDocument===m||(c(_),o=!p);f=e[h++];)if(f(_,i||m,o)){d.push(_);break}l&&(k=D)}n&&((_=!f&&_)&&y--,s&&L.push(_))}if(y+=M,n&&M!==y){for(h=0;f=t[h++];)f(L,g,i,o);if(s){if(y>0)for(;M--;)L[M]||g[M]||(g[M]=H.call(d));g=ge(g)}P.apply(d,g),l&&!s&&g.length>0&&y+t.length>1&&se.uniqueSort(d)}return l&&(k=D,u=Y),L};return n?oe(s):s}(s,r))).selector=e}return o},d=se.select=function(e,t,n,r){var s,d,u,l,_,c="function"==typeof e&&e,m=!r&&i(e=c.selector||e);if(n=n||[],1===m.length){if((d=m[0]=m[0].slice(0)).length>2&&"ID"===(u=d[0]).type&&9===t.nodeType&&p&&a.relative[d[1].type]){if(!(t=(a.find.ID(u.matches[0].replace(Q,ee),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(d.shift().value.length)}for(s=U.needsContext.test(e)?0:d.length;s--&&(u=d[s],!a.relative[l=u.type]);)if((_=a.find[l])&&(r=_(u.matches[0].replace(Q,ee),X.test(d[0].type)&&pe(t.parentNode)||t))){if(d.splice(s,1),!(e=r.length&&ye(d)))return P.apply(n,r),n;break}}return(c||o(e,m))(r,t,!p,n,!t||X.test(e)&&pe(t.parentNode)||t),n},n.sortStable=g.split("").sort(b).join("")===g,n.detectDuplicates=!!_,c(),n.sortDetached=de(function(e){return 1&e.compareDocumentPosition(m.createElement("fieldset"))}),de(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ue("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&de(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ue("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),de(function(e){return null==e.getAttribute("disabled")})||ue(A,function(e,t,n){var a;if(!n)return!0===e[t]?t.toLowerCase():(a=e.getAttributeNode(t))&&a.specified?a.value:null}),se}(e);g.find=v,g.expr=v.selectors,g.expr[":"]=g.expr.pseudos,g.uniqueSort=g.unique=v.uniqueSort,g.text=v.getText,g.isXMLDoc=v.isXML,g.contains=v.contains,g.escapeSelector=v.escape;var D=function(e,t,n){for(var a=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&g(e).is(n))break;a.push(e)}return a},w=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},T=g.expr.match.needsContext;function b(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var S=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function x(e,t,n){return p(t)?g.grep(e,function(e,a){return!!t.call(e,a,e)!==n}):t.nodeType?g.grep(e,function(e){return e===t!==n}):"string"!=typeof t?g.grep(e,function(e){return d.call(t,e)>-1!==n}):g.filter(t,e,n)}g.filter=function(e,t,n){var a=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===a.nodeType?g.find.matchesSelector(a,e)?[a]:[]:g.find.matches(e,g.grep(t,function(e){return 1===e.nodeType}))},g.fn.extend({find:function(e){var t,n,a=this.length,r=this;if("string"!=typeof e)return this.pushStack(g(e).filter(function(){for(t=0;t<a;t++)if(g.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<a;t++)g.find(e,r[t],n);return a>1?g.uniqueSort(n):n},filter:function(e){return this.pushStack(x(this,e||[],!1))},not:function(e){return this.pushStack(x(this,e||[],!0))},is:function(e){return!!x(this,"string"==typeof e&&T.test(e)?g(e):e||[],!1).length}});var H,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(g.fn.init=function(e,t,n){var r,s;if(!e)return this;if(n=n||H,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:j.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof g?t[0]:t,g.merge(this,g.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),S.test(r[1])&&g.isPlainObject(t))for(r in t)p(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(s=a.getElementById(r[2]))&&(this[0]=s,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):p(e)?void 0!==n.ready?n.ready(e):e(g):g.makeArray(e,this)}).prototype=g.fn,H=g(a);var P=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}g.fn.extend({has:function(e){var t=g(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(g.contains(this,t[e]))return!0})},closest:function(e,t){var n,a=0,r=this.length,s=[],i="string"!=typeof e&&g(e);if(!T.test(e))for(;a<r;a++)for(n=this[a];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(i?i.index(n)>-1:1===n.nodeType&&g.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?g.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?d.call(g(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(g.uniqueSort(g.merge(this.get(),g(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),g.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return D(e,"parentNode")},parentsUntil:function(e,t,n){return D(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return D(e,"nextSibling")},prevAll:function(e){return D(e,"previousSibling")},nextUntil:function(e,t,n){return D(e,"nextSibling",n)},prevUntil:function(e,t,n){return D(e,"previousSibling",n)},siblings:function(e){return w((e.parentNode||{}).firstChild,e)},children:function(e){return w(e.firstChild)},contents:function(e){return b(e,"iframe")?e.contentDocument:(b(e,"template")&&(e=e.content||e),g.merge([],e.childNodes))}},function(e,t){g.fn[e]=function(n,a){var r=g.map(this,t,n);return"Until"!==e.slice(-5)&&(a=n),a&&"string"==typeof a&&(r=g.filter(a,r)),this.length>1&&(E[e]||g.uniqueSort(r),P.test(e)&&r.reverse()),this.pushStack(r)}});var A=/[^\x20\t\r\n\f]+/g;function W(e){return e}function C(e){throw e}function N(e,t,n,a){var r;try{e&&p(r=e.promise)?r.call(e).done(t).fail(n):e&&p(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(a))}catch(e){n.apply(void 0,[e])}}g.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return g.each(e.match(A)||[],function(e,n){t[n]=!0}),t}(e):g.extend({},e);var t,n,a,r,s=[],i=[],o=-1,d=function(){for(r=r||e.once,a=t=!0;i.length;o=-1)for(n=i.shift();++o<s.length;)!1===s[o].apply(n[0],n[1])&&e.stopOnFalse&&(o=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},u={add:function(){return s&&(n&&!t&&(o=s.length-1,i.push(n)),function t(n){g.each(n,function(n,a){p(a)?e.unique&&u.has(a)||s.push(a):a&&a.length&&"string"!==L(a)&&t(a)})}(arguments),n&&!t&&d()),this},remove:function(){return g.each(arguments,function(e,t){for(var n;(n=g.inArray(t,s,n))>-1;)s.splice(n,1),n<=o&&o--}),this},has:function(e){return e?g.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=i=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=i=[],n||t||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],i.push(n),t||d()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!a}};return u},g.extend({Deferred:function(t){var n=[["notify","progress",g.Callbacks("memory"),g.Callbacks("memory"),2],["resolve","done",g.Callbacks("once memory"),g.Callbacks("once memory"),0,"resolved"],["reject","fail",g.Callbacks("once memory"),g.Callbacks("once memory"),1,"rejected"]],a="pending",r={state:function(){return a},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return g.Deferred(function(t){g.each(n,function(n,a){var r=p(e[a[4]])&&e[a[4]];s[a[1]](function(){var e=r&&r.apply(this,arguments);e&&p(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[a[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(t,a,r){var s=0;function i(t,n,a,r){return function(){var o=this,d=arguments,u=function(){var e,u;if(!(t<s)){if((e=a.apply(o,d))===n.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"==typeof e||"function"==typeof e)&&e.then,p(u)?r?u.call(e,i(s,n,W,r),i(s,n,C,r)):(s++,u.call(e,i(s,n,W,r),i(s,n,C,r),i(s,n,W,n.notifyWith))):(a!==W&&(o=void 0,d=[e]),(r||n.resolveWith)(o,d))}},l=r?u:function(){try{u()}catch(e){g.Deferred.exceptionHook&&g.Deferred.exceptionHook(e,l.stackTrace),t+1>=s&&(a!==C&&(o=void 0,d=[e]),n.rejectWith(o,d))}};t?l():(g.Deferred.getStackHook&&(l.stackTrace=g.Deferred.getStackHook()),e.setTimeout(l))}}return g.Deferred(function(e){n[0][3].add(i(0,e,p(r)?r:W,e.notifyWith)),n[1][3].add(i(0,e,p(t)?t:W)),n[2][3].add(i(0,e,p(a)?a:C))}).promise()},promise:function(e){return null!=e?g.extend(e,r):r}},s={};return g.each(n,function(e,t){var i=t[2],o=t[5];r[t[1]]=i.add,o&&i.add(function(){a=o},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),i.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=i.fireWith}),r.promise(s),t&&t.call(s,s),s},when:function(e){var t=arguments.length,n=t,a=Array(n),r=s.call(arguments),i=g.Deferred(),o=function(e){return function(n){a[e]=this,r[e]=arguments.length>1?s.call(arguments):n,--t||i.resolveWith(a,r)}};if(t<=1&&(N(e,i.done(o(n)).resolve,i.reject,!t),"pending"===i.state()||p(r[n]&&r[n].then)))return i.then();for(;n--;)N(r[n],o(n),i.reject);return i.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;g.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&F.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},g.readyException=function(t){e.setTimeout(function(){throw t})};var I=g.Deferred();function z(){a.removeEventListener("DOMContentLoaded",z),e.removeEventListener("load",z),g.ready()}g.fn.ready=function(e){return I.then(e).catch(function(e){g.readyException(e)}),this},g.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--g.readyWait:g.isReady)||(g.isReady=!0,!0!==e&&--g.readyWait>0||I.resolveWith(a,[g]))}}),g.ready.then=I.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?e.setTimeout(g.ready):(a.addEventListener("DOMContentLoaded",z),e.addEventListener("load",z));var R=function(e,t,n,a,r,s,i){var o=0,d=e.length,u=null==n;if("object"===L(n))for(o in r=!0,n)R(e,t,o,n[o],!0,s,i);else if(void 0!==a&&(r=!0,p(a)||(i=!0),u&&(i?(t.call(e,a),t=null):(u=t,t=function(e,t,n){return u.call(g(e),n)})),t))for(;o<d;o++)t(e[o],n,i?a:a.call(e[o],o,t(e[o],n)));return r?e:u?t.call(e):d?t(e[0],n):s},J=/^-ms-/,$=/-([a-z])/g;function B(e,t){return t.toUpperCase()}function q(e){return e.replace(J,"ms-").replace($,B)}var U=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function V(){this.expando=g.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},U(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var a,r=this.cache(e);if("string"==typeof t)r[q(t)]=n;else for(a in t)r[q(a)]=t[a];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][q(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,a=e[this.expando];if(void 0!==a){if(void 0!==t){n=(t=Array.isArray(t)?t.map(q):(t=q(t))in a?[t]:t.match(A)||[]).length;for(;n--;)delete a[t[n]]}(void 0===t||g.isEmptyObject(a))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!g.isEmptyObject(t)}};var G=new V,K=new V,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,X=/[A-Z]/g;function Q(e,t,n){var a;if(void 0===n&&1===e.nodeType)if(a="data-"+t.replace(X,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(a))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}g.extend({hasData:function(e){return K.hasData(e)||G.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),g.fn.extend({data:function(e,t){var n,a,r,s=this[0],i=s&&s.attributes;if(void 0===e){if(this.length&&(r=K.get(s),1===s.nodeType&&!G.get(s,"hasDataAttrs"))){for(n=i.length;n--;)i[n]&&0===(a=i[n].name).indexOf("data-")&&(a=q(a.slice(5)),Q(s,a,r[a]));G.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){K.set(this,e)}):R(this,function(t){var n;if(s&&void 0===t)return void 0!==(n=K.get(s,e))?n:void 0!==(n=Q(s,e))?n:void 0;this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),g.extend({queue:function(e,t,n){var a;if(e)return t=(t||"fx")+"queue",a=G.get(e,t),n&&(!a||Array.isArray(n)?a=G.access(e,t,g.makeArray(n)):a.push(n)),a||[]},dequeue:function(e,t){t=t||"fx";var n=g.queue(e,t),a=n.length,r=n.shift(),s=g._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),a--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,function(){g.dequeue(e,t)},s)),!a&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:g.Callbacks("once memory").add(function(){G.remove(e,[t+"queue",n])})})}}),g.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?g.queue(this[0],e):void 0===t?this:this.each(function(){var n=g.queue(this,e,t);g._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&g.dequeue(this,e)})},dequeue:function(e){return this.each(function(){g.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,a=1,r=g.Deferred(),s=this,i=this.length,o=function(){--a||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";i--;)(n=G.get(s[i],e+"queueHooks"))&&n.empty&&(a++,n.empty.add(o));return o(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&g.contains(e.ownerDocument,e)&&"none"===g.css(e,"display")},re=function(e,t,n,a){var r,s,i={};for(s in t)i[s]=e.style[s],e.style[s]=t[s];for(s in r=n.apply(e,a||[]),t)e.style[s]=i[s];return r};function se(e,t,n,a){var r,s,i=20,o=a?function(){return a.cur()}:function(){return g.css(e,t,"")},d=o(),u=n&&n[3]||(g.cssNumber[t]?"":"px"),l=(g.cssNumber[t]||"px"!==u&&+d)&&te.exec(g.css(e,t));if(l&&l[3]!==u){for(d/=2,u=u||l[3],l=+d||1;i--;)g.style(e,t,l+u),(1-s)*(1-(s=o()/d||.5))<=0&&(i=0),l/=s;l*=2,g.style(e,t,l+u),n=n||[]}return n&&(l=+l||+d||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],a&&(a.unit=u,a.start=l,a.end=r)),r}var ie={};function oe(e){var t,n=e.ownerDocument,a=e.nodeName,r=ie[a];return r||(t=n.body.appendChild(n.createElement(a)),r=g.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ie[a]=r,r)}function de(e,t){for(var n,a,r=[],s=0,i=e.length;s<i;s++)(a=e[s]).style&&(n=a.style.display,t?("none"===n&&(r[s]=G.get(a,"display")||null,r[s]||(a.style.display="")),""===a.style.display&&ae(a)&&(r[s]=oe(a))):"none"!==n&&(r[s]="none",G.set(a,"display",n)));for(s=0;s<i;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}g.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?g(this).show():g(this).hide()})}});var ue=/^(?:checkbox|radio)$/i,le=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,_e=/^$|^module$|\/(?:java|ecma)script/i,ce={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&b(e,t)?g.merge([e],n):n}function he(e,t){for(var n=0,a=e.length;n<a;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}ce.optgroup=ce.option,ce.tbody=ce.tfoot=ce.colgroup=ce.caption=ce.thead,ce.th=ce.td;var pe,fe,ye=/<|&#?\w+;/;function Me(e,t,n,a,r){for(var s,i,o,d,u,l,_=t.createDocumentFragment(),c=[],m=0,h=e.length;m<h;m++)if((s=e[m])||0===s)if("object"===L(s))g.merge(c,s.nodeType?[s]:s);else if(ye.test(s)){for(i=i||_.appendChild(t.createElement("div")),o=(le.exec(s)||["",""])[1].toLowerCase(),d=ce[o]||ce._default,i.innerHTML=d[1]+g.htmlPrefilter(s)+d[2],l=d[0];l--;)i=i.lastChild;g.merge(c,i.childNodes),(i=_.firstChild).textContent=""}else c.push(t.createTextNode(s));for(_.textContent="",m=0;s=c[m++];)if(a&&g.inArray(s,a)>-1)r&&r.push(s);else if(u=g.contains(s.ownerDocument,s),i=me(_.appendChild(s),"script"),u&&he(i),n)for(l=0;s=i[l++];)_e.test(s.type||"")&&n.push(s);return _}pe=a.createDocumentFragment().appendChild(a.createElement("div")),(fe=a.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),pe.appendChild(fe),h.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue;var Le=a.documentElement,ge=/^key/,Ye=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ke=/^([^.]*)(?:\.(.+)|)/;function ve(){return!0}function De(){return!1}function we(){try{return a.activeElement}catch(e){}}function Te(e,t,n,a,r,s){var i,o;if("object"==typeof t){for(o in"string"!=typeof n&&(a=a||n,n=void 0),t)Te(e,o,n,a,t[o],s);return e}if(null==a&&null==r?(r=n,a=n=void 0):null==r&&("string"==typeof n?(r=a,a=void 0):(r=a,a=n,n=void 0)),!1===r)r=De;else if(!r)return e;return 1===s&&(i=r,(r=function(e){return g().off(e),i.apply(this,arguments)}).guid=i.guid||(i.guid=g.guid++)),e.each(function(){g.event.add(this,t,r,a,n)})}g.event={global:{},add:function(e,t,n,a,r){var s,i,o,d,u,l,_,c,m,h,p,f=G.get(e);if(f)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&g.find.matchesSelector(Le,r),n.guid||(n.guid=g.guid++),(d=f.events)||(d=f.events={}),(i=f.handle)||(i=f.handle=function(t){return void 0!==g&&g.event.triggered!==t.type?g.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(A)||[""]).length;u--;)m=p=(o=ke.exec(t[u])||[])[1],h=(o[2]||"").split(".").sort(),m&&(_=g.event.special[m]||{},m=(r?_.delegateType:_.bindType)||m,_=g.event.special[m]||{},l=g.extend({type:m,origType:p,data:a,handler:n,guid:n.guid,selector:r,needsContext:r&&g.expr.match.needsContext.test(r),namespace:h.join(".")},s),(c=d[m])||((c=d[m]=[]).delegateCount=0,_.setup&&!1!==_.setup.call(e,a,h,i)||e.addEventListener&&e.addEventListener(m,i)),_.add&&(_.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),r?c.splice(c.delegateCount++,0,l):c.push(l),g.event.global[m]=!0)},remove:function(e,t,n,a,r){var s,i,o,d,u,l,_,c,m,h,p,f=G.hasData(e)&&G.get(e);if(f&&(d=f.events)){for(u=(t=(t||"").match(A)||[""]).length;u--;)if(m=p=(o=ke.exec(t[u])||[])[1],h=(o[2]||"").split(".").sort(),m){for(_=g.event.special[m]||{},c=d[m=(a?_.delegateType:_.bindType)||m]||[],o=o[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=s=c.length;s--;)l=c[s],!r&&p!==l.origType||n&&n.guid!==l.guid||o&&!o.test(l.namespace)||a&&a!==l.selector&&("**"!==a||!l.selector)||(c.splice(s,1),l.selector&&c.delegateCount--,_.remove&&_.remove.call(e,l));i&&!c.length&&(_.teardown&&!1!==_.teardown.call(e,h,f.handle)||g.removeEvent(e,m,f.handle),delete d[m])}else for(m in d)g.event.remove(e,m+t[u],n,a,!0);g.isEmptyObject(d)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,a,r,s,i,o=g.event.fix(e),d=new Array(arguments.length),u=(G.get(this,"events")||{})[o.type]||[],l=g.event.special[o.type]||{};for(d[0]=o,t=1;t<arguments.length;t++)d[t]=arguments[t];if(o.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,o)){for(i=g.event.handlers.call(this,o,u),t=0;(r=i[t++])&&!o.isPropagationStopped();)for(o.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!o.isImmediatePropagationStopped();)o.rnamespace&&!o.rnamespace.test(s.namespace)||(o.handleObj=s,o.data=s.data,void 0!==(a=((g.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,d))&&!1===(o.result=a)&&(o.preventDefault(),o.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,o),o.result}},handlers:function(e,t){var n,a,r,s,i,o=[],d=t.delegateCount,u=e.target;if(d&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],i={},n=0;n<d;n++)void 0===i[r=(a=t[n]).selector+" "]&&(i[r]=a.needsContext?g(r,this).index(u)>-1:g.find(r,this,null,[u]).length),i[r]&&s.push(a);s.length&&o.push({elem:u,handlers:s})}return u=this,d<t.length&&o.push({elem:u,handlers:t.slice(d)}),o},addProp:function(e,t){Object.defineProperty(g.Event.prototype,e,{enumerable:!0,configurable:!0,get:p(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[g.expando]?e:new g.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==we()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===we()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&b(this,"input"))return this.click(),!1},_default:function(e){return b(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},g.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},g.Event=function(e,t){if(!(this instanceof g.Event))return new g.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ve:De,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&g.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[g.expando]=!0},g.Event.prototype={constructor:g.Event,isDefaultPrevented:De,isPropagationStopped:De,isImmediatePropagationStopped:De,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ve,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ve,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ve,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},g.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ge.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ye.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},g.event.addProp),g.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){g.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,a=e.relatedTarget,r=e.handleObj;return a&&(a===this||g.contains(this,a))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),g.fn.extend({on:function(e,t,n,a){return Te(this,e,t,n,a)},one:function(e,t,n,a){return Te(this,e,t,n,a,1)},off:function(e,t,n){var a,r;if(e&&e.preventDefault&&e.handleObj)return a=e.handleObj,g(e.delegateTarget).off(a.namespace?a.origType+"."+a.namespace:a.origType,a.selector,a.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=De),this.each(function(){g.event.remove(this,e,n,t)})}});var be=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Se=/<script|<style|<link/i,xe=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return b(e,"table")&&b(11!==t.nodeType?t:t.firstChild,"tr")&&g(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Ee(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Oe(e,t){var n,a,r,s,i,o,d,u;if(1===t.nodeType){if(G.hasData(e)&&(s=G.access(e),i=G.set(t,s),u=s.events))for(r in delete i.handle,i.events={},u)for(n=0,a=u[r].length;n<a;n++)g.event.add(t,r,u[r][n]);K.hasData(e)&&(o=K.access(e),d=g.extend({},o),K.set(t,d))}}function Ae(e,t,n,a){t=i.apply([],t);var r,s,o,d,u,l,_=0,c=e.length,m=c-1,f=t[0],y=p(f);if(y||c>1&&"string"==typeof f&&!h.checkClone&&xe.test(f))return e.each(function(r){var s=e.eq(r);y&&(t[0]=f.call(this,r,s.html())),Ae(s,t,n,a)});if(c&&(s=(r=Me(t,e[0].ownerDocument,!1,e,a)).firstChild,1===r.childNodes.length&&(r=s),s||a)){for(d=(o=g.map(me(r,"script"),Pe)).length;_<c;_++)u=r,_!==m&&(u=g.clone(u,!0,!0),d&&g.merge(o,me(u,"script"))),n.call(e[_],u,_);if(d)for(l=o[o.length-1].ownerDocument,g.map(o,Ee),_=0;_<d;_++)u=o[_],_e.test(u.type||"")&&!G.access(u,"globalEval")&&g.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?g._evalUrl&&g._evalUrl(u.src):M(u.textContent.replace(He,""),l,u))}return e}function We(e,t,n){for(var a,r=t?g.filter(t,e):e,s=0;null!=(a=r[s]);s++)n||1!==a.nodeType||g.cleanData(me(a)),a.parentNode&&(n&&g.contains(a.ownerDocument,a)&&he(me(a,"script")),a.parentNode.removeChild(a));return e}g.extend({htmlPrefilter:function(e){return e.replace(be,"<$1></$2>")},clone:function(e,t,n){var a,r,s,i,o,d,u,l=e.cloneNode(!0),_=g.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||g.isXMLDoc(e)))for(i=me(l),a=0,r=(s=me(e)).length;a<r;a++)o=s[a],d=i[a],void 0,"input"===(u=d.nodeName.toLowerCase())&&ue.test(o.type)?d.checked=o.checked:"input"!==u&&"textarea"!==u||(d.defaultValue=o.defaultValue);if(t)if(n)for(s=s||me(e),i=i||me(l),a=0,r=s.length;a<r;a++)Oe(s[a],i[a]);else Oe(e,l);return(i=me(l,"script")).length>0&&he(i,!_&&me(e,"script")),l},cleanData:function(e){for(var t,n,a,r=g.event.special,s=0;void 0!==(n=e[s]);s++)if(U(n)){if(t=n[G.expando]){if(t.events)for(a in t.events)r[a]?g.event.remove(n,a):g.removeEvent(n,a,t.handle);n[G.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),g.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return R(this,function(e){return void 0===e?g.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ae(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)})},prepend:function(){return Ae(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ae(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ae(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(g.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return g.clone(this,e,t)})},html:function(e){return R(this,function(e){var t=this[0]||{},n=0,a=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Se.test(e)&&!ce[(le.exec(e)||["",""])[1].toLowerCase()]){e=g.htmlPrefilter(e);try{for(;n<a;n++)1===(t=this[n]||{}).nodeType&&(g.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Ae(this,arguments,function(t){var n=this.parentNode;g.inArray(this,e)<0&&(g.cleanData(me(this)),n&&n.replaceChild(t,this))},e)}}),g.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){g.fn[e]=function(e){for(var n,a=[],r=g(e),s=r.length-1,i=0;i<=s;i++)n=i===s?this:this.clone(!0),g(r[i])[t](n),o.apply(a,n.get());return this.pushStack(a)}});var Ce=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),Ne=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Fe=new RegExp(ne.join("|"),"i");function Ie(e,t,n){var a,r,s,i,o=e.style;return(n=n||Ne(e))&&(""!==(i=n.getPropertyValue(t)||n[t])||g.contains(e.ownerDocument,e)||(i=g.style(e,t)),!h.pixelBoxStyles()&&Ce.test(i)&&Fe.test(t)&&(a=o.width,r=o.minWidth,s=o.maxWidth,o.minWidth=o.maxWidth=o.width=i,i=n.width,o.width=a,o.minWidth=r,o.maxWidth=s)),void 0!==i?i+"":i}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Le.appendChild(u).appendChild(l);var t=e.getComputedStyle(l);r="1%"!==t.top,d=12===n(t.marginLeft),l.style.right="60%",o=36===n(t.right),s=36===n(t.width),l.style.position="absolute",i=36===l.offsetWidth||"absolute",Le.removeChild(u),l=null}}function n(e){return Math.round(parseFloat(e))}var r,s,i,o,d,u=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===l.style.backgroundClip,g.extend(h,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),o},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),d},scrollboxSize:function(){return t(),i}}))}();var Re=/^(none|table(?!-c[ea]).+)/,Je=/^--/,$e={position:"absolute",visibility:"hidden",display:"block"},Be={letterSpacing:"0",fontWeight:"400"},qe=["Webkit","Moz","ms"],Ue=a.createElement("div").style;function Ve(e){var t=g.cssProps[e];return t||(t=g.cssProps[e]=function(e){if(e in Ue)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=qe.length;n--;)if((e=qe[n]+t)in Ue)return e}(e)||e),t}function Ge(e,t,n){var a=te.exec(t);return a?Math.max(0,a[2]-(n||0))+(a[3]||"px"):t}function Ke(e,t,n,a,r,s){var i="width"===t?1:0,o=0,d=0;if(n===(a?"border":"content"))return 0;for(;i<4;i+=2)"margin"===n&&(d+=g.css(e,n+ne[i],!0,r)),a?("content"===n&&(d-=g.css(e,"padding"+ne[i],!0,r)),"margin"!==n&&(d-=g.css(e,"border"+ne[i]+"Width",!0,r))):(d+=g.css(e,"padding"+ne[i],!0,r),"padding"!==n?d+=g.css(e,"border"+ne[i]+"Width",!0,r):o+=g.css(e,"border"+ne[i]+"Width",!0,r));return!a&&s>=0&&(d+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-d-o-.5))),d}function Ze(e,t,n){var a=Ne(e),r=Ie(e,t,a),s="border-box"===g.css(e,"boxSizing",!1,a),i=s;if(Ce.test(r)){if(!n)return r;r="auto"}return i=i&&(h.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===g.css(e,"display",!1,a))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],i=!0),(r=parseFloat(r)||0)+Ke(e,t,n||(s?"border":"content"),i,a,r)+"px"}function Xe(e,t,n,a,r){return new Xe.prototype.init(e,t,n,a,r)}g.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ie(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,a){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,i,o=q(t),d=Je.test(t),u=e.style;if(d||(t=Ve(o)),i=g.cssHooks[t]||g.cssHooks[o],void 0===n)return i&&"get"in i&&void 0!==(r=i.get(e,!1,a))?r:u[t];"string"===(s=typeof n)&&(r=te.exec(n))&&r[1]&&(n=se(e,t,r),s="number"),null!=n&&n==n&&("number"===s&&(n+=r&&r[3]||(g.cssNumber[o]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),i&&"set"in i&&void 0===(n=i.set(e,n,a))||(d?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,a){var r,s,i,o=q(t);return Je.test(t)||(t=Ve(o)),(i=g.cssHooks[t]||g.cssHooks[o])&&"get"in i&&(r=i.get(e,!0,n)),void 0===r&&(r=Ie(e,t,a)),"normal"===r&&t in Be&&(r=Be[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),g.each(["height","width"],function(e,t){g.cssHooks[t]={get:function(e,n,a){if(n)return!Re.test(g.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,t,a):re(e,$e,function(){return Ze(e,t,a)})},set:function(e,n,a){var r,s=Ne(e),i="border-box"===g.css(e,"boxSizing",!1,s),o=a&&Ke(e,t,a,i,s);return i&&h.scrollboxSize()===s.position&&(o-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-Ke(e,t,"border",!1,s)-.5)),o&&(r=te.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=g.css(e,t)),Ge(0,n,o)}}}),g.cssHooks.marginLeft=ze(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ie(e,"marginLeft"))||e.getBoundingClientRect().left-re(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),g.each({margin:"",padding:"",border:"Width"},function(e,t){g.cssHooks[e+t]={expand:function(n){for(var a=0,r={},s="string"==typeof n?n.split(" "):[n];a<4;a++)r[e+ne[a]+t]=s[a]||s[a-2]||s[0];return r}},"margin"!==e&&(g.cssHooks[e+t].set=Ge)}),g.fn.extend({css:function(e,t){return R(this,function(e,t,n){var a,r,s={},i=0;if(Array.isArray(t)){for(a=Ne(e),r=t.length;i<r;i++)s[t[i]]=g.css(e,t[i],!1,a);return s}return void 0!==n?g.style(e,t,n):g.css(e,t)},e,t,arguments.length>1)}}),g.Tween=Xe,Xe.prototype={constructor:Xe,init:function(e,t,n,a,r,s){this.elem=e,this.prop=n,this.easing=r||g.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=a,this.unit=s||(g.cssNumber[n]?"":"px")},cur:function(){var e=Xe.propHooks[this.prop];return e&&e.get?e.get(this):Xe.propHooks._default.get(this)},run:function(e){var t,n=Xe.propHooks[this.prop];return this.options.duration?this.pos=t=g.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Xe.propHooks._default.set(this),this}},Xe.prototype.init.prototype=Xe.prototype,Xe.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=g.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){g.fx.step[e.prop]?g.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[g.cssProps[e.prop]]&&!g.cssHooks[e.prop]?e.elem[e.prop]=e.now:g.style(e.elem,e.prop,e.now+e.unit)}}},Xe.propHooks.scrollTop=Xe.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},g.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},g.fx=Xe.prototype.init,g.fx.step={};var Qe,et,tt=/^(?:toggle|show|hide)$/,nt=/queueHooks$/;function at(){et&&(!1===a.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,g.fx.interval),g.fx.tick())}function rt(){return e.setTimeout(function(){Qe=void 0}),Qe=Date.now()}function st(e,t){var n,a=0,r={height:e};for(t=t?1:0;a<4;a+=2-t)r["margin"+(n=ne[a])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function it(e,t,n){for(var a,r=(ot.tweeners[t]||[]).concat(ot.tweeners["*"]),s=0,i=r.length;s<i;s++)if(a=r[s].call(n,t,e))return a}function ot(e,t,n){var a,r,s=0,i=ot.prefilters.length,o=g.Deferred().always(function(){delete d.elem}),d=function(){if(r)return!1;for(var t=Qe||rt(),n=Math.max(0,u.startTime+u.duration-t),a=1-(n/u.duration||0),s=0,i=u.tweens.length;s<i;s++)u.tweens[s].run(a);return o.notifyWith(e,[u,a,n]),a<1&&i?n:(i||o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u]),!1)},u=o.promise({elem:e,props:g.extend({},t),opts:g.extend(!0,{specialEasing:{},easing:g.easing._default},n),originalProperties:t,originalOptions:n,startTime:Qe||rt(),duration:n.duration,tweens:[],createTween:function(t,n){var a=g.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(a),a},stop:function(t){var n=0,a=t?u.tweens.length:0;if(r)return this;for(r=!0;n<a;n++)u.tweens[n].run(1);return t?(o.notifyWith(e,[u,1,0]),o.resolveWith(e,[u,t])):o.rejectWith(e,[u,t]),this}}),l=u.props;for(!function(e,t){var n,a,r,s,i;for(n in e)if(r=t[a=q(n)],s=e[n],Array.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==a&&(e[a]=s,delete e[n]),(i=g.cssHooks[a])&&"expand"in i)for(n in s=i.expand(s),delete e[a],s)n in e||(e[n]=s[n],t[n]=r);else t[a]=r}(l,u.opts.specialEasing);s<i;s++)if(a=ot.prefilters[s].call(u,e,l,u.opts))return p(a.stop)&&(g._queueHooks(u.elem,u.opts.queue).stop=a.stop.bind(a)),a;return g.map(l,it,u),p(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),g.fx.timer(g.extend(d,{elem:e,anim:u,queue:u.opts.queue})),u}g.Animation=g.extend(ot,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){p(e)?(t=e,e=["*"]):e=e.match(A);for(var n,a=0,r=e.length;a<r;a++)n=e[a],ot.tweeners[n]=ot.tweeners[n]||[],ot.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var a,r,s,i,o,d,u,l,_="width"in t||"height"in t,c=this,m={},h=e.style,p=e.nodeType&&ae(e),f=G.get(e,"fxshow");for(a in n.queue||(null==(i=g._queueHooks(e,"fx")).unqueued&&(i.unqueued=0,o=i.empty.fire,i.empty.fire=function(){i.unqueued||o()}),i.unqueued++,c.always(function(){c.always(function(){i.unqueued--,g.queue(e,"fx").length||i.empty.fire()})})),t)if(r=t[a],tt.test(r)){if(delete t[a],s=s||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!f||void 0===f[a])continue;p=!0}m[a]=f&&f[a]||g.style(e,a)}if((d=!g.isEmptyObject(t))||!g.isEmptyObject(m))for(a in _&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=f&&f.display)&&(u=G.get(e,"display")),"none"===(l=g.css(e,"display"))&&(u?l=u:(de([e],!0),u=e.style.display||u,l=g.css(e,"display"),de([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===g.css(e,"float")&&(d||(c.done(function(){h.display=u}),null==u&&(l=h.display,u="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",c.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),d=!1,m)d||(f?"hidden"in f&&(p=f.hidden):f=G.access(e,"fxshow",{display:u}),s&&(f.hidden=!p),p&&de([e],!0),c.done(function(){for(a in p||de([e]),G.remove(e,"fxshow"),m)g.style(e,a,m[a])})),d=it(p?f[a]:0,a,c),a in f||(f[a]=d.start,p&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?ot.prefilters.unshift(e):ot.prefilters.push(e)}}),g.speed=function(e,t,n){var a=e&&"object"==typeof e?g.extend({},e):{complete:n||!n&&t||p(e)&&e,duration:e,easing:n&&t||t&&!p(t)&&t};return g.fx.off?a.duration=0:"number"!=typeof a.duration&&(a.duration in g.fx.speeds?a.duration=g.fx.speeds[a.duration]:a.duration=g.fx.speeds._default),null!=a.queue&&!0!==a.queue||(a.queue="fx"),a.old=a.complete,a.complete=function(){p(a.old)&&a.old.call(this),a.queue&&g.dequeue(this,a.queue)},a},g.fn.extend({fadeTo:function(e,t,n,a){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,a)},animate:function(e,t,n,a){var r=g.isEmptyObject(e),s=g.speed(t,n,a),i=function(){var t=ot(this,g.extend({},e),s);(r||G.get(this,"finish"))&&t.stop(!0)};return i.finish=i,r||!1===s.queue?this.each(i):this.queue(s.queue,i)},stop:function(e,t,n){var a=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",s=g.timers,i=G.get(this);if(r)i[r]&&i[r].stop&&a(i[r]);else for(r in i)i[r]&&i[r].stop&&nt.test(r)&&a(i[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));!t&&n||g.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=G.get(this),a=n[e+"queue"],r=n[e+"queueHooks"],s=g.timers,i=a?a.length:0;for(n.finish=!0,g.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<i;t++)a[t]&&a[t].finish&&a[t].finish.call(this);delete n.finish})}}),g.each(["toggle","show","hide"],function(e,t){var n=g.fn[t];g.fn[t]=function(e,a,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(st(t,!0),e,a,r)}}),g.each({slideDown:st("show"),slideUp:st("hide"),slideToggle:st("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){g.fn[e]=function(e,n,a){return this.animate(t,e,n,a)}}),g.timers=[],g.fx.tick=function(){var e,t=0,n=g.timers;for(Qe=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||g.fx.stop(),Qe=void 0},g.fx.timer=function(e){g.timers.push(e),g.fx.start()},g.fx.interval=13,g.fx.start=function(){et||(et=!0,at())},g.fx.stop=function(){et=null},g.fx.speeds={slow:600,fast:200,_default:400},g.fn.delay=function(t,n){return t=g.fx&&g.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,a){var r=e.setTimeout(n,t);a.stop=function(){e.clearTimeout(r)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ut=g.expr.attrHandle;g.fn.extend({attr:function(e,t){return R(this,g.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){g.removeAttr(this,e)})}}),g.extend({attr:function(e,t,n){var a,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?g.prop(e,t,n):(1===s&&g.isXMLDoc(e)||(r=g.attrHooks[t.toLowerCase()]||(g.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void g.removeAttr(e,t):r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(a=r.get(e,t))?a:null==(a=g.find.attr(e,t))?void 0:a)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&b(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,a=0,r=t&&t.match(A);if(r&&1===e.nodeType)for(;n=r[a++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?g.removeAttr(e,n):e.setAttribute(n,n),n}},g.each(g.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ut[t]||g.find.attr;ut[t]=function(e,t,a){var r,s,i=t.toLowerCase();return a||(s=ut[i],ut[i]=r,r=null!=n(e,t,a)?i:null,ut[i]=s),r}});var lt=/^(?:input|select|textarea|button)$/i,_t=/^(?:a|area)$/i;function ct(e){return(e.match(A)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function ht(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(A)||[]}g.fn.extend({prop:function(e,t){return R(this,g.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[g.propFix[e]||e]})}}),g.extend({prop:function(e,t,n){var a,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&g.isXMLDoc(e)||(t=g.propFix[t]||t,r=g.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(a=r.set(e,n,t))?a:e[t]=n:r&&"get"in r&&null!==(a=r.get(e,t))?a:e[t]},propHooks:{tabIndex:{get:function(e){var t=g.find.attr(e,"tabindex");return t?parseInt(t,10):lt.test(e.nodeName)||_t.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(g.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),g.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){g.propFix[this.toLowerCase()]=this}),g.fn.extend({addClass:function(e){var t,n,a,r,s,i,o,d=0;if(p(e))return this.each(function(t){g(this).addClass(e.call(this,t,mt(this)))});if((t=ht(e)).length)for(;n=this[d++];)if(r=mt(n),a=1===n.nodeType&&" "+ct(r)+" "){for(i=0;s=t[i++];)a.indexOf(" "+s+" ")<0&&(a+=s+" ");r!==(o=ct(a))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,a,r,s,i,o,d=0;if(p(e))return this.each(function(t){g(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=ht(e)).length)for(;n=this[d++];)if(r=mt(n),a=1===n.nodeType&&" "+ct(r)+" "){for(i=0;s=t[i++];)for(;a.indexOf(" "+s+" ")>-1;)a=a.replace(" "+s+" "," ");r!==(o=ct(a))&&n.setAttribute("class",o)}return this},toggleClass:function(e,t){var n=typeof e,a="string"===n||Array.isArray(e);return"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):p(e)?this.each(function(n){g(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,r,s,i;if(a)for(r=0,s=g(this),i=ht(e);t=i[r++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":G.get(this,"__className__")||""))})},hasClass:function(e){var t,n,a=0;for(t=" "+e+" ";n=this[a++];)if(1===n.nodeType&&(" "+ct(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var pt=/\r/g;g.fn.extend({val:function(e){var t,n,a,r=this[0];return arguments.length?(a=p(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=a?e.call(this,n,g(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=g.map(r,function(e){return null==e?"":e+""})),(t=g.valHooks[this.type]||g.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=g.valHooks[r.type]||g.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(pt,""):null==n?"":n:void 0}}),g.extend({valHooks:{option:{get:function(e){var t=g.find.attr(e,"value");return null!=t?t:ct(g.text(e))}},select:{get:function(e){var t,n,a,r=e.options,s=e.selectedIndex,i="select-one"===e.type,o=i?null:[],d=i?s+1:r.length;for(a=s<0?d:i?s:0;a<d;a++)if(((n=r[a]).selected||a===s)&&!n.disabled&&(!n.parentNode.disabled||!b(n.parentNode,"optgroup"))){if(t=g(n).val(),i)return t;o.push(t)}return o},set:function(e,t){for(var n,a,r=e.options,s=g.makeArray(t),i=r.length;i--;)((a=r[i]).selected=g.inArray(g.valHooks.option.get(a),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),g.each(["radio","checkbox"],function(){g.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=g.inArray(g(e).val(),t)>-1}},h.checkOn||(g.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var ft=/^(?:focusinfocus|focusoutblur)$/,yt=function(e){e.stopPropagation()};g.extend(g.event,{trigger:function(t,n,r,s){var i,o,d,u,l,c,m,h,y=[r||a],M=_.call(t,"type")?t.type:t,L=_.call(t,"namespace")?t.namespace.split("."):[];if(o=h=d=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!ft.test(M+g.event.triggered)&&(M.indexOf(".")>-1&&(L=M.split("."),M=L.shift(),L.sort()),l=M.indexOf(":")<0&&"on"+M,(t=t[g.expando]?t:new g.Event(M,"object"==typeof t&&t)).isTrigger=s?2:3,t.namespace=L.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+L.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:g.makeArray(n,[t]),m=g.event.special[M]||{},s||!m.trigger||!1!==m.trigger.apply(r,n))){if(!s&&!m.noBubble&&!f(r)){for(u=m.delegateType||M,ft.test(u+M)||(o=o.parentNode);o;o=o.parentNode)y.push(o),d=o;d===(r.ownerDocument||a)&&y.push(d.defaultView||d.parentWindow||e)}for(i=0;(o=y[i++])&&!t.isPropagationStopped();)h=o,t.type=i>1?u:m.bindType||M,(c=(G.get(o,"events")||{})[t.type]&&G.get(o,"handle"))&&c.apply(o,n),(c=l&&o[l])&&c.apply&&U(o)&&(t.result=c.apply(o,n),!1===t.result&&t.preventDefault());return t.type=M,s||t.isDefaultPrevented()||m._default&&!1!==m._default.apply(y.pop(),n)||!U(r)||l&&p(r[M])&&!f(r)&&((d=r[l])&&(r[l]=null),g.event.triggered=M,t.isPropagationStopped()&&h.addEventListener(M,yt),r[M](),t.isPropagationStopped()&&h.removeEventListener(M,yt),g.event.triggered=void 0,d&&(r[l]=d)),t.result}},simulate:function(e,t,n){var a=g.extend(new g.Event,n,{type:e,isSimulated:!0});g.event.trigger(a,null,t)}}),g.fn.extend({trigger:function(e,t){return this.each(function(){g.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return g.event.trigger(e,t,n,!0)}}),h.focusin||g.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){g.event.simulate(t,e.target,g.event.fix(e))};g.event.special[t]={setup:function(){var a=this.ownerDocument||this,r=G.access(a,t);r||a.addEventListener(e,n,!0),G.access(a,t,(r||0)+1)},teardown:function(){var a=this.ownerDocument||this,r=G.access(a,t)-1;r?G.access(a,t,r):(a.removeEventListener(e,n,!0),G.remove(a,t))}}});var Mt=e.location,Lt=Date.now(),gt=/\?/;g.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||g.error("Invalid XML: "+t),n};var Yt=/\[\]$/,kt=/\r?\n/g,vt=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function wt(e,t,n,a){var r;if(Array.isArray(t))g.each(t,function(t,r){n||Yt.test(e)?a(e,r):wt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,a)});else if(n||"object"!==L(t))a(e,t);else for(r in t)wt(e+"["+r+"]",t[r],n,a)}g.param=function(e,t){var n,a=[],r=function(e,t){var n=p(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!g.isPlainObject(e))g.each(e,function(){r(this.name,this.value)});else for(n in e)wt(n,e[n],t,r);return a.join("&")},g.fn.extend({serialize:function(){return g.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=g.prop(this,"elements");return e?g.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!g(this).is(":disabled")&&Dt.test(this.nodeName)&&!vt.test(e)&&(this.checked||!ue.test(e))}).map(function(e,t){var n=g(this).val();return null==n?null:Array.isArray(n)?g.map(n,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:n.replace(kt,"\r\n")}}).get()}});var Tt=/%20/g,bt=/#.*$/,St=/([?&])_=[^&]*/,xt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ht=/^(?:GET|HEAD)$/,jt=/^\/\//,Pt={},Et={},Ot="*/".concat("*"),At=a.createElement("a");function Wt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var a,r=0,s=t.toLowerCase().match(A)||[];if(p(n))for(;a=s[r++];)"+"===a[0]?(a=a.slice(1)||"*",(e[a]=e[a]||[]).unshift(n)):(e[a]=e[a]||[]).push(n)}}function Ct(e,t,n,a){var r={},s=e===Et;function i(o){var d;return r[o]=!0,g.each(e[o]||[],function(e,o){var u=o(t,n,a);return"string"!=typeof u||s||r[u]?s?!(d=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),d}return i(t.dataTypes[0])||!r["*"]&&i("*")}function Nt(e,t){var n,a,r=g.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:a||(a={}))[n]=t[n]);return a&&g.extend(!0,e,a),e}At.href=Mt.href,g.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":g.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Nt(Nt(e,g.ajaxSettings),t):Nt(g.ajaxSettings,e)},ajaxPrefilter:Wt(Pt),ajaxTransport:Wt(Et),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,s,i,o,d,u,l,_,c,m,h=g.ajaxSetup({},n),p=h.context||h,f=h.context&&(p.nodeType||p.jquery)?g(p):g.event,y=g.Deferred(),M=g.Callbacks("once memory"),L=h.statusCode||{},Y={},k={},v="canceled",D={readyState:0,getResponseHeader:function(e){var t;if(l){if(!o)for(o={};t=xt.exec(i);)o[t[1].toLowerCase()]=t[2];t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(e,t){return null==l&&(e=k[e.toLowerCase()]=k[e.toLowerCase()]||e,Y[e]=t),this},overrideMimeType:function(e){return null==l&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)D.always(e[D.status]);else for(t in e)L[t]=[L[t],e[t]];return this},abort:function(e){var t=e||v;return r&&r.abort(t),w(0,t),this}};if(y.promise(D),h.url=((t||h.url||Mt.href)+"").replace(jt,Mt.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(A)||[""],null==h.crossDomain){u=a.createElement("a");try{u.href=h.url,u.href=u.href,h.crossDomain=At.protocol+"//"+At.host!=u.protocol+"//"+u.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=g.param(h.data,h.traditional)),Ct(Pt,h,n,D),l)return D;for(c in(_=g.event&&h.global)&&0==g.active++&&g.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Ht.test(h.type),s=h.url.replace(bt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Tt,"+")):(m=h.url.slice(s.length),h.data&&(h.processData||"string"==typeof h.data)&&(s+=(gt.test(s)?"&":"?")+h.data,delete h.data),!1===h.cache&&(s=s.replace(St,"$1"),m=(gt.test(s)?"&":"?")+"_="+Lt+++m),h.url=s+m),h.ifModified&&(g.lastModified[s]&&D.setRequestHeader("If-Modified-Since",g.lastModified[s]),g.etag[s]&&D.setRequestHeader("If-None-Match",g.etag[s])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&D.setRequestHeader("Content-Type",h.contentType),D.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ot+"; q=0.01":""):h.accepts["*"]),h.headers)D.setRequestHeader(c,h.headers[c]);if(h.beforeSend&&(!1===h.beforeSend.call(p,D,h)||l))return D.abort();if(v="abort",M.add(h.complete),D.done(h.success),D.fail(h.error),r=Ct(Et,h,n,D)){if(D.readyState=1,_&&f.trigger("ajaxSend",[D,h]),l)return D;h.async&&h.timeout>0&&(d=e.setTimeout(function(){D.abort("timeout")},h.timeout));try{l=!1,r.send(Y,w)}catch(e){if(l)throw e;w(-1,e)}}else w(-1,"No Transport");function w(t,n,a,o){var u,c,m,Y,k,v=n;l||(l=!0,d&&e.clearTimeout(d),r=void 0,i=o||"",D.readyState=t>0?4:0,u=t>=200&&t<300||304===t,a&&(Y=function(e,t,n){for(var a,r,s,i,o=e.contents,d=e.dataTypes;"*"===d[0];)d.shift(),void 0===a&&(a=e.mimeType||t.getResponseHeader("Content-Type"));if(a)for(r in o)if(o[r]&&o[r].test(a)){d.unshift(r);break}if(d[0]in n)s=d[0];else{for(r in n){if(!d[0]||e.converters[r+" "+d[0]]){s=r;break}i||(i=r)}s=s||i}if(s)return s!==d[0]&&d.unshift(s),n[s]}(h,D,a)),Y=function(e,t,n,a){var r,s,i,o,d,u={},l=e.dataTypes.slice();if(l[1])for(i in e.converters)u[i.toLowerCase()]=e.converters[i];for(s=l.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!d&&a&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),d=s,s=l.shift())if("*"===s)s=d;else if("*"!==d&&d!==s){if(!(i=u[d+" "+s]||u["* "+s]))for(r in u)if((o=r.split(" "))[1]===s&&(i=u[d+" "+o[0]]||u["* "+o[0]])){!0===i?i=u[r]:!0!==u[r]&&(s=o[0],l.unshift(o[1]));break}if(!0!==i)if(i&&e.throws)t=i(t);else try{t=i(t)}catch(e){return{state:"parsererror",error:i?e:"No conversion from "+d+" to "+s}}}return{state:"success",data:t}}(h,Y,D,u),u?(h.ifModified&&((k=D.getResponseHeader("Last-Modified"))&&(g.lastModified[s]=k),(k=D.getResponseHeader("etag"))&&(g.etag[s]=k)),204===t||"HEAD"===h.type?v="nocontent":304===t?v="notmodified":(v=Y.state,c=Y.data,u=!(m=Y.error))):(m=v,!t&&v||(v="error",t<0&&(t=0))),D.status=t,D.statusText=(n||v)+"",u?y.resolveWith(p,[c,v,D]):y.rejectWith(p,[D,v,m]),D.statusCode(L),L=void 0,_&&f.trigger(u?"ajaxSuccess":"ajaxError",[D,h,u?c:m]),M.fireWith(p,[D,v]),_&&(f.trigger("ajaxComplete",[D,h]),--g.active||g.event.trigger("ajaxStop")))}return D},getJSON:function(e,t,n){return g.get(e,t,n,"json")},getScript:function(e,t){return g.get(e,void 0,t,"script")}}),g.each(["get","post"],function(e,t){g[t]=function(e,n,a,r){return p(n)&&(r=r||a,a=n,n=void 0),g.ajax(g.extend({url:e,type:t,dataType:r,data:n,success:a},g.isPlainObject(e)&&e))}}),g._evalUrl=function(e){return g.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},g.fn.extend({wrapAll:function(e){var t;return this[0]&&(p(e)&&(e=e.call(this[0])),t=g(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return p(e)?this.each(function(t){g(this).wrapInner(e.call(this,t))}):this.each(function(){var t=g(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=p(e);return this.each(function(n){g(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){g(this).replaceWith(this.childNodes)}),this}}),g.expr.pseudos.hidden=function(e){return!g.expr.pseudos.visible(e)},g.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},g.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ft={0:200,1223:204},It=g.ajaxSettings.xhr();h.cors=!!It&&"withCredentials"in It,h.ajax=It=!!It,g.ajaxTransport(function(t){var n,a;if(h.cors||It&&!t.crossDomain)return{send:function(r,s){var i,o=t.xhr();if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(i in t.xhrFields)o[i]=t.xhrFields[i];for(i in t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)o.setRequestHeader(i,r[i]);n=function(e){return function(){n&&(n=a=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?s(0,"error"):s(o.status,o.statusText):s(Ft[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),a=o.onerror=o.ontimeout=n("error"),void 0!==o.onabort?o.onabort=a:o.onreadystatechange=function(){4===o.readyState&&e.setTimeout(function(){n&&a()})},n=n("abort");try{o.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),g.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),g.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return g.globalEval(e),e}}}),g.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),g.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,s){t=g("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&s("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var zt,Rt=[],Jt=/(=)\?(?=&|$)|\?\?/;g.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Rt.pop()||g.expando+"_"+Lt++;return this[e]=!0,e}}),g.ajaxPrefilter("json jsonp",function(t,n,a){var r,s,i,o=!1!==t.jsonp&&(Jt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jt.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=p(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Jt,"$1"+r):!1!==t.jsonp&&(t.url+=(gt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return i||g.error(r+" was not called"),i[0]},t.dataTypes[0]="json",s=e[r],e[r]=function(){i=arguments},a.always(function(){void 0===s?g(e).removeProp(r):e[r]=s,t[r]&&(t.jsonpCallback=n.jsonpCallback,Rt.push(r)),i&&p(s)&&s(i[0]),i=s=void 0}),"script"}),h.createHTMLDocument=((zt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),g.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(h.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=!n&&[],(s=S.exec(e))?[t.createElement(s[1])]:(s=Me([e],t,i),i&&i.length&&g(i).remove(),g.merge([],s.childNodes)));var r,s,i},g.fn.load=function(e,t,n){var a,r,s,i=this,o=e.indexOf(" ");return o>-1&&(a=ct(e.slice(o)),e=e.slice(0,o)),p(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),i.length>0&&g.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments,i.html(a?g("<div>").append(g.parseHTML(e)).find(a):e)}).always(n&&function(e,t){i.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},g.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){g.fn[t]=function(e){return this.on(t,e)}}),g.expr.pseudos.animated=function(e){return g.grep(g.timers,function(t){return e===t.elem}).length},g.offset={setOffset:function(e,t,n){var a,r,s,i,o,d,u=g.css(e,"position"),l=g(e),_={};"static"===u&&(e.style.position="relative"),o=l.offset(),s=g.css(e,"top"),d=g.css(e,"left"),("absolute"===u||"fixed"===u)&&(s+d).indexOf("auto")>-1?(i=(a=l.position()).top,r=a.left):(i=parseFloat(s)||0,r=parseFloat(d)||0),p(t)&&(t=t.call(e,n,g.extend({},o))),null!=t.top&&(_.top=t.top-o.top+i),null!=t.left&&(_.left=t.left-o.left+r),"using"in t?t.using.call(e,_):l.css(_)}},g.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){g.offset.setOffset(this,e,t)});var t,n,a=this[0];return a?a.getClientRects().length?(t=a.getBoundingClientRect(),n=a.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,a=this[0],r={top:0,left:0};if("fixed"===g.css(a,"position"))t=a.getBoundingClientRect();else{for(t=this.offset(),n=a.ownerDocument,e=a.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===g.css(e,"position");)e=e.parentNode;e&&e!==a&&1===e.nodeType&&((r=g(e).offset()).top+=g.css(e,"borderTopWidth",!0),r.left+=g.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-g.css(a,"marginTop",!0),left:t.left-r.left-g.css(a,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===g.css(e,"position");)e=e.offsetParent;return e||Le})}}),g.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;g.fn[e]=function(a){return R(this,function(e,a,r){var s;if(f(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[a];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):e[a]=r},e,a,arguments.length)}}),g.each(["top","left"],function(e,t){g.cssHooks[t]=ze(h.pixelPosition,function(e,n){if(n)return n=Ie(e,t),Ce.test(n)?g(e).position()[t]+"px":n})}),g.each({Height:"height",Width:"width"},function(e,t){g.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,a){g.fn[a]=function(r,s){var i=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===s?"margin":"border");return R(this,function(t,n,r){var s;return f(t)?0===a.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?g.css(t,n,o):g.style(t,n,r,o)},t,i?r:void 0,i)}})}),g.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){g.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),g.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),g.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,a){return this.on(t,e,n,a)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),g.proxy=function(e,t){var n,a,r;if("string"==typeof t&&(n=e[t],t=e,e=n),p(e))return a=s.call(arguments,2),(r=function(){return e.apply(t||this,a.concat(s.call(arguments)))}).guid=e.guid=e.guid||g.guid++,r},g.holdReady=function(e){e?g.readyWait++:g.ready(!0)},g.isArray=Array.isArray,g.parseJSON=JSON.parse,g.nodeName=b,g.isFunction=p,g.isWindow=f,g.camelCase=q,g.type=L,g.now=Date.now,g.isNumeric=function(e){var t=g.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return g});var $t=e.jQuery,Bt=e.$;return g.noConflict=function(t){return e.$===g&&(e.$=Bt),t&&e.jQuery===g&&(e.jQuery=$t),g},t||(e.jQuery=e.$=g),g}),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Handlebars=t():e.Handlebars=t()}(this,function(){return function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={exports:{},id:a,loaded:!1};return e[a].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0;var r=a(n(2)),s=a(n(35)),i=n(36),o=n(41),d=a(n(42)),u=a(n(39)),l=a(n(34)),_=r.default.create;function c(){var e=_();return e.compile=function(t,n){return o.compile(t,n,e)},e.precompile=function(t,n){return o.precompile(t,n,e)},e.AST=s.default,e.Compiler=o.Compiler,e.JavaScriptCompiler=d.default,e.Parser=i.parser,e.parse=i.parse,e}var m=c();m.create=c,l.default(m),m.Visitor=u.default,m.default=m,t.default=m,e.exports=t.default},function(e,t){"use strict";t.default=function(e){return e&&e.__esModule?e:{default:e}},t.__esModule=!0},function(e,t,n){"use strict";var a=n(3).default,r=n(1).default;t.__esModule=!0;var s=a(n(4)),i=r(n(21)),o=r(n(6)),d=a(n(5)),u=a(n(22)),l=r(n(34));function _(){var e=new s.HandlebarsEnvironment;return d.extend(e,s),e.SafeString=i.default,e.Exception=o.default,e.Utils=d,e.escapeExpression=d.escapeExpression,e.VM=u,e.template=function(t){return u.template(t,e)},e}var c=_();c.create=_,l.default(c),c.default=c,t.default=c,e.exports=t.default},function(e,t){"use strict";t.default=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},t.__esModule=!0},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0,t.HandlebarsEnvironment=u;var r=n(5),s=a(n(6)),i=n(10),o=n(18),d=a(n(20));t.VERSION="4.0.11";t.COMPILER_REVISION=7;t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};function u(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},i.registerDefaultHelpers(this),o.registerDefaultDecorators(this)}u.prototype={constructor:u,logger:d.default,log:d.default.log,registerHelper:function(e,t){if("[object Object]"===r.toString.call(e)){if(t)throw new s.default("Arg not supported with multiple helpers");r.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===r.toString.call(e))r.extend(this.partials,e);else{if(void 0===t)throw new s.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===r.toString.call(e)){if(t)throw new s.default("Arg not supported with multiple decorators");r.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]}};var l=d.default.log;t.log=l,t.createFrame=r.createFrame,t.logger=d.default},function(e,t){"use strict";t.__esModule=!0,t.extend=i,t.indexOf=function(e,t){for(var n=0,a=e.length;n<a;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}if(!r.test(e))return e;return e.replace(a,s)},t.isEmpty=function(e){return!e&&0!==e||!(!u(e)||0!==e.length)},t.createFrame=function(e){var t=i({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},a=/[&<>"'`=]/g,r=/[&<>"'`=]/;function s(e){return n[e]}function i(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var o=Object.prototype.toString;t.toString=o;var d=function(e){return"function"==typeof e};d(/x/)&&(t.isFunction=d=function(e){return"function"==typeof e&&"[object Function]"===o.call(e)}),t.isFunction=d;var u=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===o.call(e)};t.isArray=u},function(e,t,n){"use strict";var a=n(7).default;t.__esModule=!0;var r=["description","fileName","lineNumber","message","name","number","stack"];function s(e,t){var n=t&&t.loc,i=void 0,o=void 0;n&&(e+=" - "+(i=n.start.line)+":"+(o=n.start.column));for(var d=Error.prototype.constructor.call(this,e),u=0;u<r.length;u++)this[r[u]]=d[r[u]];Error.captureStackTrace&&Error.captureStackTrace(this,s);try{n&&(this.lineNumber=i,a?Object.defineProperty(this,"column",{value:o,enumerable:!0}):this.column=o)}catch(e){}}s.prototype=new Error,t.default=s,e.exports=t.default},function(e,t,n){e.exports={default:n(8),__esModule:!0}},function(e,t,n){var a=n(9);e.exports=function(e,t,n){return a.setDesc(e,t,n)}},function(e,t){var n=Object;e.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0,t.registerDefaultHelpers=function(e){r.default(e),s.default(e),i.default(e),o.default(e),d.default(e),u.default(e),l.default(e)};var r=a(n(11)),s=a(n(12)),i=a(n(13)),o=a(n(14)),d=a(n(15)),u=a(n(16)),l=a(n(17))},function(e,t,n){"use strict";t.__esModule=!0;var a=n(5);t.default=function(e){e.registerHelper("blockHelperMissing",function(t,n){var r=n.inverse,s=n.fn;if(!0===t)return s(this);if(!1===t||null==t)return r(this);if(a.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){var i=a.createFrame(n.data);i.contextPath=a.appendContextPath(n.data.contextPath,n.name),n={data:i}}return s(t,n)})},e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0;var r=n(5),s=a(n(6));t.default=function(e){e.registerHelper("each",function(e,t){if(!t)throw new s.default("Must pass iterator to #each");var n=t.fn,a=t.inverse,i=0,o="",d=void 0,u=void 0;function l(t,a,s){d&&(d.key=t,d.index=a,d.first=0===a,d.last=!!s,u&&(d.contextPath=u+t)),o+=n(e[t],{data:d,blockParams:r.blockParams([e[t],t],[u+t,null])})}if(t.data&&t.ids&&(u=r.appendContextPath(t.data.contextPath,t.ids[0])+"."),r.isFunction(e)&&(e=e.call(this)),t.data&&(d=r.createFrame(t.data)),e&&"object"==typeof e)if(r.isArray(e))for(var _=e.length;i<_;i++)i in e&&l(i,i,i===e.length-1);else{var c=void 0;for(var m in e)e.hasOwnProperty(m)&&(void 0!==c&&l(c,i-1),c=m,i++);void 0!==c&&l(c,i-1,!0)}return 0===i&&(o=a(this)),o})},e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0;var r=a(n(6));t.default=function(e){e.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new r.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var a=n(5);t.default=function(e){e.registerHelper("if",function(e,t){return a.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||a.isEmpty(e)?t.inverse(this):t.fn(this)}),e.registerHelper("unless",function(t,n){return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})})},e.exports=t.default},function(e,t){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",function(){for(var t=[void 0],n=arguments[arguments.length-1],a=0;a<arguments.length-1;a++)t.push(arguments[a]);var r=1;null!=n.hash.level?r=n.hash.level:n.data&&null!=n.data.level&&(r=n.data.level),t[0]=r,e.log.apply(e,t)})},e.exports=t.default},function(e,t){"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",function(e,t){return e&&e[t]})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var a=n(5);t.default=function(e){e.registerHelper("with",function(e,t){a.isFunction(e)&&(e=e.call(this));var n=t.fn;if(a.isEmpty(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=a.createFrame(t.data)).contextPath=a.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:a.blockParams([e],[r&&r.contextPath])})})},e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0,t.registerDefaultDecorators=function(e){r.default(e)};var r=a(n(19))},function(e,t,n){"use strict";t.__esModule=!0;var a=n(5);t.default=function(e){e.registerDecorator("inline",function(e,t,n,r){var s=e;return t.partials||(t.partials={},s=function(r,s){var i=n.partials;n.partials=a.extend({},i,t.partials);var o=e(r,s);return n.partials=i,o}),t.partials[r.args[0]]=r.fn,s})},e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var a=n(5),r={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=a.indexOf(r.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=r.lookupLevel(e),"undefined"!=typeof console&&r.lookupLevel(r.level)<=e){var t=r.methodMap[e];console[t]||(t="log");for(var n=arguments.length,a=Array(n>1?n-1:0),s=1;s<n;s++)a[s-1]=arguments[s];console[t].apply(console,a)}}};t.default=r,e.exports=t.default},function(e,t){"use strict";function n(e){this.string=e}t.__esModule=!0,n.prototype.toString=n.prototype.toHTML=function(){return""+this.string},t.default=n,e.exports=t.default},function(e,t,n){"use strict";var a=n(23).default,r=n(3).default,s=n(1).default;t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=d.COMPILER_REVISION;if(t!==n){if(t<n){var a=d.REVISION_CHANGES[n],r=d.REVISION_CHANGES[t];throw new o.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+a+") or downgrade your runtime to an older version ("+r+").")}throw new o.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){if(!t)throw new o.default("No environment passed to template");if(!e||!e.main)throw new o.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n={strict:function(e,t){if(!(t in e))throw new o.default('"'+t+'" not defined in '+e);return e[t]},lookup:function(e,t){for(var n=e.length,a=0;a<n;a++)if(e[a]&&null!=e[a][t])return e[a][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:i.escapeExpression,invokePartial:function(n,a,r){r.hash&&(a=i.extend({},a,r.hash),r.ids&&(r.ids[0]=!0));n=t.VM.resolvePartial.call(this,n,a,r);var s=t.VM.invokePartial.call(this,n,a,r);null==s&&t.compile&&(r.partials[r.name]=t.compile(n,e.compilerOptions,t),s=r.partials[r.name](a,r));if(null!=s){if(r.indent){for(var d=s.split("\n"),u=0,l=d.length;u<l&&(d[u]||u+1!==l);u++)d[u]=r.indent+d[u];s=d.join("\n")}return s}throw new o.default("The partial "+r.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,a,r){var s=this.programs[e],i=this.fn(e);return t||r||a||n?s=u(this,e,i,t,n,a,r):s||(s=this.programs[e]=u(this,e,i)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},merge:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=i.extend({},t,e)),n},nullContext:a({}),noop:t.VM.noop,compilerInfo:e.compiler};function r(t){var a=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=a.data;r._setup(a),!a.partial&&e.useData&&(s=function(e,t){t&&"root"in t||((t=t?d.createFrame(t):{}).root=e);return t}(t,s));var i=void 0,o=e.useBlockParams?[]:void 0;function u(t){return""+e.main(n,t,n.helpers,n.partials,s,o,i)}return e.useDepths&&(i=a.depths?t!=a.depths[0]?[t].concat(a.depths):a.depths:[t]),(u=_(e.main,u,n,a.depths||[],s,o))(t,a)}return r.isTop=!0,r._setup=function(a){a.partial?(n.helpers=a.helpers,n.partials=a.partials,n.decorators=a.decorators):(n.helpers=n.merge(a.helpers,t.helpers),e.usePartial&&(n.partials=n.merge(a.partials,t.partials)),(e.usePartial||e.useDecorators)&&(n.decorators=n.merge(a.decorators,t.decorators)))},r._child=function(t,a,r,s){if(e.useBlockParams&&!r)throw new o.default("must pass block params");if(e.useDepths&&!s)throw new o.default("must pass parent depths");return u(n,t,e[t],a,0,r,s)},r},t.wrapProgram=u,t.resolvePartial=function(e,t,n){e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name];return e},t.invokePartial=function(e,t,n){var a=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var r=void 0;n.fn&&n.fn!==l&&function(){n.data=d.createFrame(n.data);var e=n.fn;r=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=d.createFrame(n.data),n.data["partial-block"]=a,e(t,n)},e.partials&&(n.partials=i.extend({},n.partials,e.partials))}();void 0===e&&r&&(e=r);if(void 0===e)throw new o.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=l;var i=r(n(5)),o=s(n(6)),d=n(4);function u(e,t,n,a,r,s,i){function o(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(o=[t].concat(i)),n(e,t,e.helpers,e.partials,r.data||a,s&&[r.blockParams].concat(s),o)}return(o=_(n,o,e,i,a,s)).program=t,o.depth=i?i.length:0,o.blockParams=r||0,o}function l(){return""}function _(e,t,n,a,r,s){if(e.decorator){var o={};t=e.decorator(t,o,n,a&&a[0],r,s,a),i.extend(t,o)}return t}},function(e,t,n){e.exports={default:n(24),__esModule:!0}},function(e,t,n){n(25),e.exports=n(30).Object.seal},function(e,t,n){var a=n(26);n(27)("seal",function(e){return function(t){return e&&a(t)?e(t):t}})},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var a=n(28),r=n(30),s=n(33);e.exports=function(e,t){var n=(r.Object||{})[e]||Object[e],i={};i[e]=t(n),a(a.S+a.F*s(function(){n(1)}),"Object",i)}},function(e,t,n){var a=n(29),r=n(30),s=n(31),i=function(e,t,n){var o,d,u,l=e&i.F,_=e&i.G,c=e&i.S,m=e&i.P,h=e&i.B,p=e&i.W,f=_?r:r[t]||(r[t]={}),y=_?a:c?a[t]:(a[t]||{}).prototype;for(o in _&&(n=t),n)(d=!l&&y&&o in y)&&o in f||(u=d?y[o]:n[o],f[o]=_&&"function"!=typeof y[o]?n[o]:h&&d?s(u,a):p&&y[o]==u?function(e){var t=function(t){return this instanceof e?new e(t):e(t)};return t.prototype=e.prototype,t}(u):m&&"function"==typeof u?s(Function.call,u):u,m&&((f.prototype||(f.prototype={}))[o]=u))};i.F=1,i.G=2,i.S=4,i.P=8,i.B=16,i.W=32,e.exports=i},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){var n=e.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},function(e,t,n){var a=n(32);e.exports=function(e,t,n){if(a(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,a){return e.call(t,n,a)};case 3:return function(n,a,r){return e.call(t,n,a,r)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){(function(n){"use strict";t.__esModule=!0,t.default=function(e){var t=void 0!==n?n:window,a=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=a),e}},e.exports=t.default}).call(t,function(){return this}())},function(e,t){"use strict";t.__esModule=!0;var n={helpers:{helperExpression:function(e){return"SubExpression"===e.type||("MustacheStatement"===e.type||"BlockStatement"===e.type)&&!!(e.params&&e.params.length||e.hash)},scopedId:function(e){return/^\.|this\b/.test(e.original)},simpleId:function(e){return 1===e.parts.length&&!n.helpers.scopedId(e)&&!e.depth}}};t.default=n,e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default,r=n(3).default;t.__esModule=!0,t.parse=function(e,t){if("Program"===e.type)return e;return s.default.yy=u,u.locInfo=function(e){return new u.SourceLocation(t&&t.srcName,e)},new i.default(t).accept(s.default.parse(e))};var s=a(n(37)),i=a(n(38)),o=r(n(40)),d=n(5);t.parser=s.default;var u={};d.extend(u,o)},function(e,t){"use strict";t.__esModule=!0;var n=function(){var e={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(e,t,n,a,r,s,i){var o=s.length-1;switch(r){case 1:return s[o-1];case 2:this.$=a.prepareProgram(s[o]);break;case 3:case 4:case 5:case 6:case 7:case 8:this.$=s[o];break;case 9:this.$={type:"CommentStatement",value:a.stripComment(s[o]),strip:a.stripFlags(s[o],s[o]),loc:a.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:s[o],value:s[o],loc:a.locInfo(this._$)};break;case 11:this.$=a.prepareRawBlock(s[o-2],s[o-1],s[o],this._$);break;case 12:this.$={path:s[o-3],params:s[o-2],hash:s[o-1]};break;case 13:this.$=a.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!1,this._$);break;case 14:this.$=a.prepareBlock(s[o-3],s[o-2],s[o-1],s[o],!0,this._$);break;case 15:this.$={open:s[o-5],path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:a.stripFlags(s[o-5],s[o])};break;case 16:case 17:this.$={path:s[o-4],params:s[o-3],hash:s[o-2],blockParams:s[o-1],strip:a.stripFlags(s[o-5],s[o])};break;case 18:this.$={strip:a.stripFlags(s[o-1],s[o-1]),program:s[o]};break;case 19:var d=a.prepareBlock(s[o-2],s[o-1],s[o],s[o],!1,this._$),u=a.prepareProgram([d],s[o-1].loc);u.chained=!0,this.$={strip:s[o-2].strip,program:u,chain:!0};break;case 20:this.$=s[o];break;case 21:this.$={path:s[o-1],strip:a.stripFlags(s[o-2],s[o])};break;case 22:case 23:this.$=a.prepareMustache(s[o-3],s[o-2],s[o-1],s[o-4],a.stripFlags(s[o-4],s[o]),this._$);break;case 24:this.$={type:"PartialStatement",name:s[o-3],params:s[o-2],hash:s[o-1],indent:"",strip:a.stripFlags(s[o-4],s[o]),loc:a.locInfo(this._$)};break;case 25:this.$=a.preparePartialBlock(s[o-2],s[o-1],s[o],this._$);break;case 26:this.$={path:s[o-3],params:s[o-2],hash:s[o-1],strip:a.stripFlags(s[o-4],s[o])};break;case 27:case 28:this.$=s[o];break;case 29:this.$={type:"SubExpression",path:s[o-3],params:s[o-2],hash:s[o-1],loc:a.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:s[o],loc:a.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:a.id(s[o-2]),value:s[o],loc:a.locInfo(this._$)};break;case 32:this.$=a.id(s[o-1]);break;case 33:case 34:this.$=s[o];break;case 35:this.$={type:"StringLiteral",value:s[o],original:s[o],loc:a.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(s[o]),original:Number(s[o]),loc:a.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===s[o],original:"true"===s[o],loc:a.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:a.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:a.locInfo(this._$)};break;case 40:case 41:this.$=s[o];break;case 42:this.$=a.preparePath(!0,s[o],this._$);break;case 43:this.$=a.preparePath(!1,s[o],this._$);break;case 44:s[o-2].push({part:a.id(s[o]),original:s[o],separator:s[o-1]}),this.$=s[o-2];break;case 45:this.$=[{part:a.id(s[o]),original:s[o]}];break;case 46:this.$=[];break;case 47:s[o-1].push(s[o]);break;case 48:this.$=[s[o]];break;case 49:s[o-1].push(s[o]);break;case 50:this.$=[];break;case 51:s[o-1].push(s[o]);break;case 58:this.$=[];break;case 59:s[o-1].push(s[o]);break;case 64:this.$=[];break;case 65:s[o-1].push(s[o]);break;case 70:this.$=[];break;case 71:s[o-1].push(s[o]);break;case 78:this.$=[];break;case 79:s[o-1].push(s[o]);break;case 82:this.$=[];break;case 83:s[o-1].push(s[o]);break;case 86:this.$=[];break;case 87:s[o-1].push(s[o]);break;case 90:this.$=[];break;case 91:s[o-1].push(s[o]);break;case 94:this.$=[];break;case 95:s[o-1].push(s[o]);break;case 98:this.$=[s[o]];break;case 99:s[o-1].push(s[o]);break;case 100:this.$=[s[o]];break;case 101:s[o-1].push(s[o])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(e,t){throw new Error(e)},parse:function(e){var t=this,n=[0],a=[null],r=[],s=this.table,i="",o=0,d=0,u=0;this.lexer.setInput(e),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var l=this.lexer.yylloc;r.push(l);var _=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var c,m,h,p,f,y,M,L,g,Y,k={};;){if(h=n[n.length-1],this.defaultActions[h]?p=this.defaultActions[h]:(null==c&&(Y=void 0,"number"!=typeof(Y=t.lexer.lex()||1)&&(Y=t.symbols_[Y]||Y),c=Y),p=s[h]&&s[h][c]),void 0===p||!p.length||!p[0]){var v="";if(!u){for(y in g=[],s[h])this.terminals_[y]&&y>2&&g.push("'"+this.terminals_[y]+"'");v=this.lexer.showPosition?"Parse error on line "+(o+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+g.join(", ")+", got '"+(this.terminals_[c]||c)+"'":"Parse error on line "+(o+1)+": Unexpected "+(1==c?"end of input":"'"+(this.terminals_[c]||c)+"'"),this.parseError(v,{text:this.lexer.match,token:this.terminals_[c]||c,line:this.lexer.yylineno,loc:l,expected:g})}}if(p[0]instanceof Array&&p.length>1)throw new Error("Parse Error: multiple actions possible at state: "+h+", token: "+c);switch(p[0]){case 1:n.push(c),a.push(this.lexer.yytext),r.push(this.lexer.yylloc),n.push(p[1]),c=null,m?(c=m,m=null):(d=this.lexer.yyleng,i=this.lexer.yytext,o=this.lexer.yylineno,l=this.lexer.yylloc,u>0&&u--);break;case 2:if(M=this.productions_[p[1]][1],k.$=a[a.length-M],k._$={first_line:r[r.length-(M||1)].first_line,last_line:r[r.length-1].last_line,first_column:r[r.length-(M||1)].first_column,last_column:r[r.length-1].last_column},_&&(k._$.range=[r[r.length-(M||1)].range[0],r[r.length-1].range[1]]),void 0!==(f=this.performAction.call(k,i,d,o,this.yy,p[1],a,r)))return f;M&&(n=n.slice(0,-1*M*2),a=a.slice(0,-1*M),r=r.slice(0,-1*M)),n.push(this.productions_[p[1]][0]),a.push(k.$),r.push(k._$),L=s[n[n.length-2]][n[n.length-1]],n.push(L);break;case 3:return!0}}return!0}},t=function(){var e={EOF:1,parseError:function(e,t){if(!this.yy.parser)throw new Error(e);this.yy.parser.parseError(e,t)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];return this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e,e.match(/(?:\r\n?|\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var a=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===a.length?this.yylloc.first_column:0)+a[a.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=new Array(e.length+1).join("-");return e+this.upcomingInput()+"\n"+t+"^"},next:function(){if(this.done)return this.EOF;var e,t,n,a,r;this._input||(this.done=!0),this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),i=0;i<s.length&&(!(n=this._input.match(this.rules[s[i]]))||t&&!(n[0].length>t[0].length)||(t=n,a=i,this.options.flex));i++);return t?((r=t[0].match(/(?:\r\n?|\n).*/g))&&(this.yylineno+=r.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:r?r[r.length-1].length-r[r.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,s[a],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),e||void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var e=this.next();return void 0!==e?e:this.lex()},begin:function(e){this.conditionStack.push(e)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(e){this.begin(e)},options:{},performAction:function(e,t,n,a){function r(e,n){return t.yytext=t.yytext.substr(e,t.yyleng-n)}switch(n){case 0:if("\\\\"===t.yytext.slice(-2)?(r(0,1),this.begin("mu")):"\\"===t.yytext.slice(-1)?(r(0,1),this.begin("emu")):this.begin("mu"),t.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(t.yytext=t.yytext.substr(5,t.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(t.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return t.yytext=r(1,2).replace(/\\"/g,'"'),80;case 32:return t.yytext=r(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return t.yytext=t.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},rules:[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};return e}();function n(){this.yy={}}return e.lexer=t,n.prototype=e,e.Parser=n,new n}();t.default=n,e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0;var r=a(n(39));function s(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=e}function i(e,t,n){void 0===t&&(t=e.length);var a=e[t-1],r=e[t-2];return a?"ContentStatement"===a.type?(r||!n?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(a.original):void 0:n}function o(e,t,n){void 0===t&&(t=-1);var a=e[t+1],r=e[t+2];return a?"ContentStatement"===a.type?(r||!n?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(a.original):void 0:n}function d(e,t,n){var a=e[null==t?0:t+1];if(a&&"ContentStatement"===a.type&&(n||!a.rightStripped)){var r=a.value;a.value=a.value.replace(n?/^\s+/:/^[ \t]*\r?\n?/,""),a.rightStripped=a.value!==r}}function u(e,t,n){var a=e[null==t?e.length-1:t-1];if(a&&"ContentStatement"===a.type&&(n||!a.leftStripped)){var r=a.value;return a.value=a.value.replace(n?/\s+$/:/[ \t]+$/,""),a.leftStripped=a.value!==r,a.leftStripped}}s.prototype=new r.default,s.prototype.Program=function(e){var t=!this.options.ignoreStandalone,n=!this.isRootSeen;this.isRootSeen=!0;for(var a=e.body,r=0,s=a.length;r<s;r++){var l=a[r],_=this.accept(l);if(_){var c=i(a,r,n),m=o(a,r,n),h=_.openStandalone&&c,p=_.closeStandalone&&m,f=_.inlineStandalone&&c&&m;_.close&&d(a,r,!0),_.open&&u(a,r,!0),t&&f&&(d(a,r),u(a,r)&&"PartialStatement"===l.type&&(l.indent=/([ \t]+$)/.exec(a[r-1].original)[1])),t&&h&&(d((l.program||l.inverse).body),u(a,r)),t&&p&&(d(a,r),u((l.inverse||l.program).body))}}return e},s.prototype.BlockStatement=s.prototype.DecoratorBlock=s.prototype.PartialBlockStatement=function(e){this.accept(e.program),this.accept(e.inverse);var t=e.program||e.inverse,n=e.program&&e.inverse,a=n,r=n;if(n&&n.chained)for(a=n.body[0].program;r.chained;)r=r.body[r.body.length-1].program;var s={open:e.openStrip.open,close:e.closeStrip.close,openStandalone:o(t.body),closeStandalone:i((a||t).body)};if(e.openStrip.close&&d(t.body,null,!0),n){var l=e.inverseStrip;l.open&&u(t.body,null,!0),l.close&&d(a.body,null,!0),e.closeStrip.open&&u(r.body,null,!0),!this.options.ignoreStandalone&&i(t.body)&&o(a.body)&&(u(t.body),d(a.body))}else e.closeStrip.open&&u(t.body,null,!0);return s},s.prototype.Decorator=s.prototype.MustacheStatement=function(e){return e.strip},s.prototype.PartialStatement=s.prototype.CommentStatement=function(e){var t=e.strip||{};return{inlineStandalone:!0,open:t.open,close:t.close}},t.default=s,e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0;var r=a(n(6));function s(){this.parents=[]}function i(e){this.acceptRequired(e,"path"),this.acceptArray(e.params),this.acceptKey(e,"hash")}function o(e){i.call(this,e),this.acceptKey(e,"program"),this.acceptKey(e,"inverse")}function d(e){this.acceptRequired(e,"name"),this.acceptArray(e.params),this.acceptKey(e,"hash")}s.prototype={constructor:s,mutating:!1,acceptKey:function(e,t){var n=this.accept(e[t]);if(this.mutating){if(n&&!s.prototype[n.type])throw new r.default('Unexpected node type "'+n.type+'" found when accepting '+t+" on "+e.type);e[t]=n}},acceptRequired:function(e,t){if(this.acceptKey(e,t),!e[t])throw new r.default(e.type+" requires "+t)},acceptArray:function(e){for(var t=0,n=e.length;t<n;t++)this.acceptKey(e,t),e[t]||(e.splice(t,1),t--,n--)},accept:function(e){if(e){if(!this[e.type])throw new r.default("Unknown type: "+e.type,e);this.current&&this.parents.unshift(this.current),this.current=e;var t=this[e.type](e);return this.current=this.parents.shift(),!this.mutating||t?t:!1!==t?e:void 0}},Program:function(e){this.acceptArray(e.body)},MustacheStatement:i,Decorator:i,BlockStatement:o,DecoratorBlock:o,PartialStatement:d,PartialBlockStatement:function(e){d.call(this,e),this.acceptKey(e,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:i,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(e){this.acceptArray(e.pairs)},HashPair:function(e){this.acceptRequired(e,"value")}},t.default=s,e.exports=t.default},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0,t.SourceLocation=function(e,t){this.source=e,this.start={line:t.first_line,column:t.first_column},this.end={line:t.last_line,column:t.last_column}},t.id=function(e){return/^\[.*\]$/.test(e)?e.substr(1,e.length-2):e},t.stripFlags=function(e,t){return{open:"~"===e.charAt(2),close:"~"===t.charAt(t.length-3)}},t.stripComment=function(e){return e.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")},t.preparePath=function(e,t,n){n=this.locInfo(n);for(var a=e?"@":"",s=[],i=0,o=0,d=t.length;o<d;o++){var u=t[o].part,l=t[o].original!==u;if(a+=(t[o].separator||"")+u,l||".."!==u&&"."!==u&&"this"!==u)s.push(u);else{if(s.length>0)throw new r.default("Invalid path: "+a,{loc:n});".."===u&&(i++,"../")}}return{type:"PathExpression",data:e,depth:i,parts:s,original:a,loc:n}},t.prepareMustache=function(e,t,n,a,r,s){var i=a.charAt(3)||a.charAt(2),o="{"!==i&&"&"!==i;return{type:/\*/.test(a)?"Decorator":"MustacheStatement",path:e,params:t,hash:n,escaped:o,strip:r,loc:this.locInfo(s)}},t.prepareRawBlock=function(e,t,n,a){s(e,n),a=this.locInfo(a);var r={type:"Program",body:t,strip:{},loc:a};return{type:"BlockStatement",path:e.path,params:e.params,hash:e.hash,program:r,openStrip:{},inverseStrip:{},closeStrip:{},loc:a}},t.prepareBlock=function(e,t,n,a,i,o){a&&a.path&&s(e,a);var d=/\*/.test(e.open);t.blockParams=e.blockParams;var u=void 0,l=void 0;if(n){if(d)throw new r.default("Unexpected inverse block on decorator",n);n.chain&&(n.program.body[0].closeStrip=a.strip),l=n.strip,u=n.program}i&&(i=u,u=t,t=i);return{type:d?"DecoratorBlock":"BlockStatement",path:e.path,params:e.params,hash:e.hash,program:t,inverse:u,openStrip:e.strip,inverseStrip:l,closeStrip:a&&a.strip,loc:this.locInfo(o)}},t.prepareProgram=function(e,t){if(!t&&e.length){var n=e[0].loc,a=e[e.length-1].loc;n&&a&&(t={source:n.source,start:{line:n.start.line,column:n.start.column},end:{line:a.end.line,column:a.end.column}})}return{type:"Program",body:e,strip:{},loc:t}},t.preparePartialBlock=function(e,t,n,a){return s(e,n),{type:"PartialBlockStatement",name:e.path,params:e.params,hash:e.hash,program:t,openStrip:e.strip,closeStrip:n&&n.strip,loc:this.locInfo(a)}};var r=a(n(6));function s(e,t){if(t=t.path?t.path.original:t,e.path.original!==t){var n={loc:e.path.loc};throw new r.default(e.path.original+" doesn't match "+t,n)}}},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0,t.Compiler=d,t.precompile=function(e,t,n){if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new r.default("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+e);"data"in(t=t||{})||(t.data=!0);t.compat&&(t.useDepths=!0);var a=n.parse(e,t),s=(new n.Compiler).compile(a,t);return(new n.JavaScriptCompiler).compile(s,t)},t.compile=function(e,t,n){void 0===t&&(t={});if(null==e||"string"!=typeof e&&"Program"!==e.type)throw new r.default("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+e);"data"in(t=s.extend({},t))||(t.data=!0);t.compat&&(t.useDepths=!0);var a=void 0;function i(){var a=n.parse(e,t),r=(new n.Compiler).compile(a,t),s=(new n.JavaScriptCompiler).compile(r,t,void 0,!0);return n.template(s)}function o(e,t){return a||(a=i()),a.call(this,e,t)}return o._setup=function(e){return a||(a=i()),a._setup(e)},o._child=function(e,t,n,r){return a||(a=i()),a._child(e,t,n,r)},o};var r=a(n(6)),s=n(5),i=a(n(35)),o=[].slice;function d(){}function u(e,t){if(e===t)return!0;if(s.isArray(e)&&s.isArray(t)&&e.length===t.length){for(var n=0;n<e.length;n++)if(!u(e[n],t[n]))return!1;return!0}}function l(e){if(!e.path.parts){var t=e.path;e.path={type:"PathExpression",data:!1,depth:0,parts:[t.original+""],original:t.original+"",loc:t.loc}}}d.prototype={compiler:d,equals:function(e){var t=this.opcodes.length;if(e.opcodes.length!==t)return!1;for(var n=0;n<t;n++){var a=this.opcodes[n],r=e.opcodes[n];if(a.opcode!==r.opcode||!u(a.args,r.args))return!1}t=this.children.length;for(n=0;n<t;n++)if(!this.children[n].equals(e.children[n]))return!1;return!0},guid:0,compile:function(e,t){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=t,this.stringParams=t.stringParams,this.trackIds=t.trackIds,t.blockParams=t.blockParams||[];var n=t.knownHelpers;if(t.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},n)for(var a in n)a in n&&(this.options.knownHelpers[a]=n[a]);return this.accept(e)},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++;return this.usePartial=this.usePartial||t.usePartial,this.children[n]=t,this.useDepths=this.useDepths||t.useDepths,n},accept:function(e){if(!this[e.type])throw new r.default("Unknown type: "+e.type,e);this.sourceNode.unshift(e);var t=this[e.type](e);return this.sourceNode.shift(),t},Program:function(e){this.options.blockParams.unshift(e.blockParams);for(var t=e.body,n=t.length,a=0;a<n;a++)this.accept(t[a]);return this.options.blockParams.shift(),this.isSimple=1===n,this.blockParams=e.blockParams?e.blockParams.length:0,this},BlockStatement:function(e){l(e);var t=e.program,n=e.inverse;t=t&&this.compileProgram(t),n=n&&this.compileProgram(n);var a=this.classifySexpr(e);"helper"===a?this.helperSexpr(e,t,n):"simple"===a?(this.simpleSexpr(e),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("blockValue",e.path.original)):(this.ambiguousSexpr(e,t,n),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(e){var t=e.program&&this.compileProgram(e.program),n=this.setupFullMustacheParams(e,t,void 0),a=e.path;this.useDecorators=!0,this.opcode("registerDecorator",n.length,a.original)},PartialStatement:function(e){this.usePartial=!0;var t=e.program;t&&(t=this.compileProgram(e.program));var n=e.params;if(n.length>1)throw new r.default("Unsupported number of partial arguments: "+n.length,e);n.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):n.push({type:"PathExpression",parts:[],depth:0}));var a=e.name.original,s="SubExpression"===e.name.type;s&&this.accept(e.name),this.setupFullMustacheParams(e,t,void 0,!0);var i=e.indent||"";this.options.preventIndent&&i&&(this.opcode("appendContent",i),i=""),this.opcode("invokePartial",s,a,i),this.opcode("append")},PartialBlockStatement:function(e){this.PartialStatement(e)},MustacheStatement:function(e){this.SubExpression(e),e.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(e){this.DecoratorBlock(e)},ContentStatement:function(e){e.value&&this.opcode("appendContent",e.value)},CommentStatement:function(){},SubExpression:function(e){l(e);var t=this.classifySexpr(e);"simple"===t?this.simpleSexpr(e):"helper"===t?this.helperSexpr(e):this.ambiguousSexpr(e)},ambiguousSexpr:function(e,t,n){var a=e.path,r=a.parts[0],s=null!=t||null!=n;this.opcode("getContext",a.depth),this.opcode("pushProgram",t),this.opcode("pushProgram",n),a.strict=!0,this.accept(a),this.opcode("invokeAmbiguous",r,s)},simpleSexpr:function(e){var t=e.path;t.strict=!0,this.accept(t),this.opcode("resolvePossibleLambda")},helperSexpr:function(e,t,n){var a=this.setupFullMustacheParams(e,t,n),s=e.path,o=s.parts[0];if(this.options.knownHelpers[o])this.opcode("invokeKnownHelper",a.length,o);else{if(this.options.knownHelpersOnly)throw new r.default("You specified knownHelpersOnly, but used the unknown helper "+o,e);s.strict=!0,s.falsy=!0,this.accept(s),this.opcode("invokeHelper",a.length,s.original,i.default.helpers.simpleId(s))}},PathExpression:function(e){this.addDepth(e.depth),this.opcode("getContext",e.depth);var t=e.parts[0],n=i.default.helpers.scopedId(e),a=!e.depth&&!n&&this.blockParamIndex(t);a?this.opcode("lookupBlockParam",a,e.parts):t?e.data?(this.options.data=!0,this.opcode("lookupData",e.depth,e.parts,e.strict)):this.opcode("lookupOnContext",e.parts,e.falsy,e.strict,n):this.opcode("pushContext")},StringLiteral:function(e){this.opcode("pushString",e.value)},NumberLiteral:function(e){this.opcode("pushLiteral",e.value)},BooleanLiteral:function(e){this.opcode("pushLiteral",e.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(e){var t=e.pairs,n=0,a=t.length;for(this.opcode("pushHash");n<a;n++)this.pushParam(t[n].value);for(;n--;)this.opcode("assignToHash",t[n].key);this.opcode("popHash")},opcode:function(e){this.opcodes.push({opcode:e,args:o.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(e){e&&(this.useDepths=!0)},classifySexpr:function(e){var t=i.default.helpers.simpleId(e.path),n=t&&!!this.blockParamIndex(e.path.parts[0]),a=!n&&i.default.helpers.helperExpression(e),r=!n&&(a||t);if(r&&!a){var s=e.path.parts[0],o=this.options;o.knownHelpers[s]?a=!0:o.knownHelpersOnly&&(r=!1)}return a?"helper":r?"ambiguous":"simple"},pushParams:function(e){for(var t=0,n=e.length;t<n;t++)this.pushParam(e[t])},pushParam:function(e){var t=null!=e.value?e.value:e.original||"";if(this.stringParams)t.replace&&(t=t.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),e.depth&&this.addDepth(e.depth),this.opcode("getContext",e.depth||0),this.opcode("pushStringParam",t,e.type),"SubExpression"===e.type&&this.accept(e);else{if(this.trackIds){var n=void 0;if(!e.parts||i.default.helpers.scopedId(e)||e.depth||(n=this.blockParamIndex(e.parts[0])),n){var a=e.parts.slice(1).join(".");this.opcode("pushId","BlockParam",n,a)}else(t=e.original||t).replace&&(t=t.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",e.type,t)}this.accept(e)}},setupFullMustacheParams:function(e,t,n,a){var r=e.params;return this.pushParams(r),this.opcode("pushProgram",t),this.opcode("pushProgram",n),e.hash?this.accept(e.hash):this.opcode("emptyHash",a),r},blockParamIndex:function(e){for(var t=0,n=this.options.blockParams.length;t<n;t++){var a=this.options.blockParams[t],r=a&&s.indexOf(a,e);if(a&&r>=0)return[t,r]}}}},function(e,t,n){"use strict";var a=n(1).default;t.__esModule=!0;var r=n(4),s=a(n(6)),i=n(5),o=a(n(43));function d(e){this.value=e}function u(){}u.prototype={nameLookup:function(e,t){return u.isValidJavaScriptVariableName(t)?[e,".",t]:[e,"[",JSON.stringify(t),"]"]},depthedLookup:function(e){return[this.aliasable("container.lookup"),'(depths, "',e,'")']},compilerInfo:function(){var e=r.COMPILER_REVISION;return[e,r.REVISION_CHANGES[e]]},appendToBuffer:function(e,t,n){return i.isArray(e)||(e=[e]),e=this.source.wrap(e,t),this.environment.isSimple?["return ",e,";"]:n?["buffer += ",e,";"]:(e.appendToBuffer=!0,e)},initializeBuffer:function(){return this.quotedString("")},compile:function(e,t,n,a){this.environment=e,this.options=t,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!a,this.name=this.environment.name,this.isChild=!!n,this.context=n||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(e,t),this.useDepths=this.useDepths||e.useDepths||e.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||e.useBlockParams;var r=e.opcodes,i=void 0,o=void 0,d=void 0,u=void 0;for(d=0,u=r.length;d<u;d++)i=r[d],this.source.currentLocation=i.loc,o=o||i.loc,this[i.opcode].apply(this,i.args);if(this.source.currentLocation=o,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new s.default("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),a?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var l=this.createFunctionContext(a);if(this.isChild)return l;var _={compiler:this.compilerInfo(),main:l};this.decorators&&(_.main_d=this.decorators,_.useDecorators=!0);var c=this.context,m=c.programs,h=c.decorators;for(d=0,u=m.length;d<u;d++)m[d]&&(_[d]=m[d],h[d]&&(_[d+"_d"]=h[d],_.useDecorators=!0));return this.environment.usePartial&&(_.usePartial=!0),this.options.data&&(_.useData=!0),this.useDepths&&(_.useDepths=!0),this.useBlockParams&&(_.useBlockParams=!0),this.options.compat&&(_.compat=!0),a?_.compilerOptions=this.options:(_.compiler=JSON.stringify(_.compiler),this.source.currentLocation={start:{line:1,column:0}},_=this.objectLiteral(_),t.srcName?(_=_.toStringWithSourceMap({file:t.destName})).map=_.map&&_.map.toString():_=_.toString()),_},preamble:function(){this.lastContext=0,this.source=new o.default(this.options.srcName),this.decorators=new o.default(this.options.srcName)},createFunctionContext:function(e){var t="",n=this.stackVars.concat(this.registers.list);n.length>0&&(t+=", "+n.join(", "));var a=0;for(var r in this.aliases){var s=this.aliases[r];this.aliases.hasOwnProperty(r)&&s.children&&s.referenceCount>1&&(t+=", alias"+ ++a+"="+r,s.children[0]="alias"+a)}var i=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&i.push("blockParams"),this.useDepths&&i.push("depths");var o=this.mergeSource(t);return e?(i.push(o),Function.apply(this,i)):this.source.wrap(["function(",i.join(","),") {\n  ",o,"}"])},mergeSource:function(e){var t=this.environment.isSimple,n=!this.forceBuffer,a=void 0,r=void 0,s=void 0,i=void 0;return this.source.each(function(e){e.appendToBuffer?(s?e.prepend("  + "):s=e,i=e):(s&&(r?s.prepend("buffer += "):a=!0,i.add(";"),s=i=void 0),r=!0,t||(n=!1))}),n?s?(s.prepend("return "),i.add(";")):r||this.source.push('return "";'):(e+=", buffer = "+(a?"":this.initializeBuffer()),s?(s.prepend("return buffer + "),i.add(";")):this.source.push("return buffer;")),e&&this.source.prepend("var "+e.substring(2)+(a?"":";\n")),this.source.merge()},blockValue:function(e){var t=this.aliasable("helpers.blockHelperMissing"),n=[this.contextName(0)];this.setupHelperArgs(e,0,n);var a=this.popStack();n.splice(1,0,a),this.push(this.source.functionCall(t,"call",n))},ambiguousBlockValue:function(){var e=this.aliasable("helpers.blockHelperMissing"),t=[this.contextName(0)];this.setupHelperArgs("",0,t,!0),this.flushInline();var n=this.topStack();t.splice(1,0,n),this.pushSource(["if (!",this.lastHelper,") { ",n," = ",this.source.functionCall(e,"call",t),"}"])},appendContent:function(e){this.pendingContent?e=this.pendingContent+e:this.pendingLocation=this.source.currentLocation,this.pendingContent=e},append:function(){if(this.isInline())this.replaceStack(function(e){return[" != null ? ",e,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var e=this.popStack();this.pushSource(["if (",e," != null) { ",this.appendToBuffer(e,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(e){this.lastContext=e},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(e,t,n,a){var r=0;a||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(e[r++])),this.resolvePath("context",e,r,t,n)},lookupBlockParam:function(e,t){this.useBlockParams=!0,this.push(["blockParams[",e[0],"][",e[1],"]"]),this.resolvePath("context",t,1)},lookupData:function(e,t,n){e?this.pushStackLiteral("container.data(data, "+e+")"):this.pushStackLiteral("data"),this.resolvePath("data",t,0,!0,n)},resolvePath:function(e,t,n,a,r){var s=this;if(this.options.strict||this.options.assumeObjects)this.push(function(e,t,n,a){var r=t.popStack(),s=0,i=n.length;e&&i--;for(;s<i;s++)r=t.nameLookup(r,n[s],a);return e?[t.aliasable("container.strict"),"(",r,", ",t.quotedString(n[s]),")"]:r}(this.options.strict&&r,this,t,e));else for(var i=t.length;n<i;n++)this.replaceStack(function(r){var i=s.nameLookup(r,t[n],e);return a?[" && ",i]:[" != null ? ",i," : ",r]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(e,t){this.pushContext(),this.pushString(t),"SubExpression"!==t&&("string"==typeof e?this.pushString(e):this.pushStackLiteral(e))},emptyHash:function(e){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(e?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var e=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(e.ids)),this.stringParams&&(this.push(this.objectLiteral(e.contexts)),this.push(this.objectLiteral(e.types))),this.push(this.objectLiteral(e.values))},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){null!=e?this.pushStackLiteral(this.programExpression(e)):this.pushStackLiteral(null)},registerDecorator:function(e,t){var n=this.nameLookup("decorators",t,"decorator"),a=this.setupHelperArgs(t,e);this.decorators.push(["fn = ",this.decorators.functionCall(n,"",["fn","props","container",a])," || fn;"])},invokeHelper:function(e,t,n){var a=this.popStack(),r=this.setupHelper(e,t),s=n?[r.name," || "]:"",i=["("].concat(s,a);this.options.strict||i.push(" || ",this.aliasable("helpers.helperMissing")),i.push(")"),this.push(this.source.functionCall(i,"call",r.callParams))},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.push(this.source.functionCall(n.name,"call",n.callParams))},invokeAmbiguous:function(e,t){this.useRegister("helper");var n=this.popStack();this.emptyHash();var a=this.setupHelper(0,e,t),r=["(","(helper = ",this.lastHelper=this.nameLookup("helpers",e,"helper")," || ",n,")"];this.options.strict||(r[0]="(helper = ",r.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",r,a.paramsInit?["),(",a.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",a.callParams)," : helper))"])},invokePartial:function(e,t,n){var a=[],r=this.setupParams(t,1,a);e&&(t=this.popStack(),delete r.name),n&&(r.indent=JSON.stringify(n)),r.helpers="helpers",r.partials="partials",r.decorators="container.decorators",e?a.unshift(t):a.unshift(this.nameLookup("partials",t,"partial")),this.options.compat&&(r.depths="depths"),r=this.objectLiteral(r),a.push(r),this.push(this.source.functionCall("container.invokePartial","",a))},assignToHash:function(e){var t=this.popStack(),n=void 0,a=void 0,r=void 0;this.trackIds&&(r=this.popStack()),this.stringParams&&(a=this.popStack(),n=this.popStack());var s=this.hash;n&&(s.contexts[e]=n),a&&(s.types[e]=a),r&&(s.ids[e]=r),s.values[e]=t},pushId:function(e,t,n){"BlockParam"===e?this.pushStackLiteral("blockParams["+t[0]+"].path["+t[1]+"]"+(n?" + "+JSON.stringify("."+n):"")):"PathExpression"===e?this.pushString(t):"SubExpression"===e?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:u,compileChildren:function(e,t){for(var n=e.children,a=void 0,r=void 0,s=0,i=n.length;s<i;s++){a=n[s],r=new this.compiler;var o=this.matchExistingProgram(a);if(null==o){this.context.programs.push("");var d=this.context.programs.length;a.index=d,a.name="program"+d,this.context.programs[d]=r.compile(a,t,this.context,!this.precompile),this.context.decorators[d]=r.decorators,this.context.environments[d]=a,this.useDepths=this.useDepths||r.useDepths,this.useBlockParams=this.useBlockParams||r.useBlockParams,a.useDepths=this.useDepths,a.useBlockParams=this.useBlockParams}else a.index=o.index,a.name="program"+o.index,this.useDepths=this.useDepths||o.useDepths,this.useBlockParams=this.useBlockParams||o.useBlockParams}},matchExistingProgram:function(e){for(var t=0,n=this.context.environments.length;t<n;t++){var a=this.context.environments[t];if(a&&a.equals(e))return a}},programExpression:function(e){var t=this.environment.children[e],n=[t.index,"data",t.blockParams];return(this.useBlockParams||this.useDepths)&&n.push("blockParams"),this.useDepths&&n.push("depths"),"container.program("+n.join(", ")+")"},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},push:function(e){return e instanceof d||(e=this.source.wrap(e)),this.inlineStack.push(e),e},pushStackLiteral:function(e){this.push(new d(e))},pushSource:function(e){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),e&&this.source.push(e)},replaceStack:function(e){var t=["("],n=void 0,a=void 0,r=void 0;if(!this.isInline())throw new s.default("replaceStack on non-inline");var i=this.popStack(!0);if(i instanceof d)t=["(",n=[i.value]],r=!0;else{a=!0;var o=this.incrStack();t=["((",this.push(o)," = ",i,")"],n=this.topStack()}var u=e.call(this,n);r||this.popStack(),a&&this.stackSlot--,this.push(t.concat(u,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var e=this.inlineStack;this.inlineStack=[];for(var t=0,n=e.length;t<n;t++){var a=e[t];if(a instanceof d)this.compileStack.push(a);else{var r=this.incrStack();this.pushSource([r," = ",a,";"]),this.compileStack.push(r)}}},isInline:function(){return this.inlineStack.length},popStack:function(e){var t=this.isInline(),n=(t?this.inlineStack:this.compileStack).pop();if(!e&&n instanceof d)return n.value;if(!t){if(!this.stackSlot)throw new s.default("Invalid stack pop");this.stackSlot--}return n},topStack:function(){var e=this.isInline()?this.inlineStack:this.compileStack,t=e[e.length-1];return t instanceof d?t.value:t},contextName:function(e){return this.useDepths&&e?"depths["+e+"]":"depth"+e},quotedString:function(e){return this.source.quotedString(e)},objectLiteral:function(e){return this.source.objectLiteral(e)},aliasable:function(e){var t=this.aliases[e];return t?(t.referenceCount++,t):((t=this.aliases[e]=this.source.wrap(e)).aliasable=!0,t.referenceCount=1,t)},setupHelper:function(e,t,n){var a=[];return{params:a,paramsInit:this.setupHelperArgs(t,e,a,n),name:this.nameLookup("helpers",t,"helper"),callParams:[this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : (container.nullContext || {})")].concat(a)}},setupParams:function(e,t,n){var a={},r=[],s=[],i=[],o=!n,d=void 0;o&&(n=[]),a.name=this.quotedString(e),a.hash=this.popStack(),this.trackIds&&(a.hashIds=this.popStack()),this.stringParams&&(a.hashTypes=this.popStack(),a.hashContexts=this.popStack());var u=this.popStack(),l=this.popStack();(l||u)&&(a.fn=l||"container.noop",a.inverse=u||"container.noop");for(var _=t;_--;)d=this.popStack(),n[_]=d,this.trackIds&&(i[_]=this.popStack()),this.stringParams&&(s[_]=this.popStack(),r[_]=this.popStack());return o&&(a.args=this.source.generateArray(n)),this.trackIds&&(a.ids=this.source.generateArray(i)),this.stringParams&&(a.types=this.source.generateArray(s),a.contexts=this.source.generateArray(r)),this.options.data&&(a.data="data"),this.useBlockParams&&(a.blockParams="blockParams"),a},setupHelperArgs:function(e,t,n,a){var r=this.setupParams(e,t,n);return r=this.objectLiteral(r),a?(this.useRegister("options"),n.push("options"),["options=",r]):n?(n.push(r),""):r}},function(){for(var e="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),t=u.RESERVED_WORDS={},n=0,a=e.length;n<a;n++)t[e[n]]=!0}(),u.isValidJavaScriptVariableName=function(e){return!u.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(e)},t.default=u,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var a=n(5),r=void 0;try{}catch(e){}function s(e,t,n){if(a.isArray(e)){for(var r=[],s=0,i=e.length;s<i;s++)r.push(t.wrap(e[s],n));return r}return"boolean"==typeof e||"number"==typeof e?e+"":e}function i(e){this.srcFile=e,this.source=[]}r||((r=function(e,t,n,a){this.src="",a&&this.add(a)}).prototype={add:function(e){a.isArray(e)&&(e=e.join("")),this.src+=e},prepend:function(e){a.isArray(e)&&(e=e.join("")),this.src=e+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),i.prototype={isEmpty:function(){return!this.source.length},prepend:function(e,t){this.source.unshift(this.wrap(e,t))},push:function(e,t){this.source.push(this.wrap(e,t))},merge:function(){var e=this.empty();return this.each(function(t){e.add(["  ",t,"\n"])}),e},each:function(e){for(var t=0,n=this.source.length;t<n;t++)e(this.source[t])},empty:function(){var e=this.currentLocation||{start:{}};return new r(e.start.line,e.start.column,this.srcFile)},wrap:function(e){var t=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return e instanceof r?e:(e=s(e,this,t),new r(t.start.line,t.start.column,this.srcFile,e))},functionCall:function(e,t,n){return n=this.generateList(n),this.wrap([e,t?"."+t+"(":"(",n,")"])},quotedString:function(e){return'"'+(e+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var a=s(e[n],this);"undefined"!==a&&t.push([this.quotedString(n),":",a])}var r=this.generateList(t);return r.prepend("{"),r.add("}"),r},generateList:function(e){for(var t=this.empty(),n=0,a=e.length;n<a;n++)n&&t.add(","),t.add(s(e[n],this));return t},generateArray:function(e){var t=this.generateList(e);return t.prepend("["),t.add("]"),t}},t.default=i,e.exports=t.default}])}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";var e,t;function n(){return e.apply(null,arguments)}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function r(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function i(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function o(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,a=[];for(n=0;n<e.length;++n)a.push(t(e[n],n));return a}function u(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function l(e,t){for(var n in t)u(t,n)&&(e[n]=t[n]);return u(t,"toString")&&(e.toString=t.toString),u(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,a){return bt(e,t,n,a,!0).utc()}function c(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function m(e){if(null==e._isValid){var n=c(e),a=t.call(n.parsedDateParts,function(e){return null!=e}),r=!isNaN(e._d.getTime())&&n.overflow<0&&!n.empty&&!n.invalidMonth&&!n.invalidWeekday&&!n.weekdayMismatch&&!n.nullInput&&!n.invalidFormat&&!n.userInvalidated&&(!n.meridiem||n.meridiem&&a);if(e._strict&&(r=r&&0===n.charsLeftOver&&0===n.unusedTokens.length&&void 0===n.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function h(e){var t=_(NaN);return null!=e?l(c(t),e):c(t).userInvalidated=!0,t}t=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,a=0;a<n;a++)if(a in t&&e.call(this,t[a],a,t))return!0;return!1};var p=n.momentProperties=[];function f(e,t){var n,a,r;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=c(t)),s(t._locale)||(e._locale=t._locale),p.length>0)for(n=0;n<p.length;n++)s(r=t[a=p[n]])||(e[a]=r);return e}var y=!1;function M(e){f(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,n.updateOffset(this),y=!1)}function L(e){return e instanceof M||null!=e&&null!=e._isAMomentObject}function g(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function Y(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=g(t)),n}function k(e,t,n){var a,r=Math.min(e.length,t.length),s=Math.abs(e.length-t.length),i=0;for(a=0;a<r;a++)(n&&e[a]!==t[a]||!n&&Y(e[a])!==Y(t[a]))&&i++;return i+s}function v(e){!1===n.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function D(e,t){var a=!0;return l(function(){if(null!=n.deprecationHandler&&n.deprecationHandler(null,e),a){for(var r,s=[],i=0;i<arguments.length;i++){if(r="","object"==typeof arguments[i]){for(var o in r+="\n["+i+"] ",arguments[0])r+=o+": "+arguments[0][o]+", ";r=r.slice(0,-2)}else r=arguments[i];s.push(r)}v(e+"\nArguments: "+Array.prototype.slice.call(s).join("")+"\n"+(new Error).stack),a=!1}return t.apply(this,arguments)},t)}var w,T={};function b(e,t){null!=n.deprecationHandler&&n.deprecationHandler(e,t),T[e]||(v(t),T[e]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,a=l({},e);for(n in t)u(t,n)&&(r(e[n])&&r(t[n])?(a[n]={},l(a[n],e[n]),l(a[n],t[n])):null!=t[n]?a[n]=t[n]:delete a[n]);for(n in e)u(e,n)&&!u(t,n)&&r(e[n])&&(a[n]=l({},a[n]));return a}function H(e){null!=e&&this.set(e)}n.suppressDeprecationWarnings=!1,n.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)u(e,t)&&n.push(t);return n};var j={};function P(e,t){var n=e.toLowerCase();j[n]=j[n+"s"]=j[t]=e}function E(e){return"string"==typeof e?j[e]||j[e.toLowerCase()]:void 0}function O(e){var t,n,a={};for(n in e)u(e,n)&&(t=E(n))&&(a[t]=e[n]);return a}var A={};function W(e,t){A[e]=t}function C(e,t,n){var a=""+Math.abs(e),r=t-a.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+a}var N=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,I={},z={};function R(e,t,n,a){var r=a;"string"==typeof a&&(r=function(){return this[a]()}),e&&(z[e]=r),t&&(z[t[0]]=function(){return C(r.apply(this,arguments),t[1],t[2])}),n&&(z[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function J(e,t){return e.isValid()?(t=$(t,e.localeData()),I[t]=I[t]||function(e){var t,n,a,r=e.match(N);for(t=0,n=r.length;t<n;t++)z[r[t]]?r[t]=z[r[t]]:r[t]=(a=r[t]).match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"");return function(t){var a,s="";for(a=0;a<n;a++)s+=S(r[a])?r[a].call(t,e):r[a];return s}}(t),I[t](e)):e.localeData().invalidDate()}function $(e,t){var n=5;function a(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;n>=0&&F.test(e);)e=e.replace(F,a),F.lastIndex=0,n-=1;return e}var B=/\d/,q=/\d\d/,U=/\d{3}/,V=/\d{4}/,G=/[+-]?\d{6}/,K=/\d\d?/,Z=/\d\d\d\d?/,X=/\d\d\d\d\d\d?/,Q=/\d{1,3}/,ee=/\d{1,4}/,te=/[+-]?\d{1,6}/,ne=/\d+/,ae=/[+-]?\d+/,re=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,ie=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,oe={};function de(e,t,n){oe[e]=S(t)?t:function(e,a){return e&&n?n:t}}function ue(e,t){return u(oe,e)?oe[e](t._strict,t._locale):new RegExp(le(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,a,r){return t||n||a||r})))}function le(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var _e={};function ce(e,t){var n,a=t;for("string"==typeof e&&(e=[e]),i(t)&&(a=function(e,n){n[t]=Y(e)}),n=0;n<e.length;n++)_e[e[n]]=a}function me(e,t){ce(e,function(e,n,a,r){a._w=a._w||{},t(e,a._w,a,r)})}function he(e,t,n){null!=t&&u(_e,e)&&_e[e](t,n._a,n,e)}var pe=0,fe=1,ye=2,Me=3,Le=4,ge=5,Ye=6,ke=7,ve=8;function De(e){return we(e)?366:365}function we(e){return e%4==0&&e%100!=0||e%400==0}R("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),R(0,["YY",2],0,function(){return this.year()%100}),R(0,["YYYY",4],0,"year"),R(0,["YYYYY",5],0,"year"),R(0,["YYYYYY",6,!0],0,"year"),P("year","y"),W("year",1),de("Y",ae),de("YY",K,q),de("YYYY",ee,V),de("YYYYY",te,G),de("YYYYYY",te,G),ce(["YYYYY","YYYYYY"],pe),ce("YYYY",function(e,t){t[pe]=2===e.length?n.parseTwoDigitYear(e):Y(e)}),ce("YY",function(e,t){t[pe]=n.parseTwoDigitYear(e)}),ce("Y",function(e,t){t[pe]=parseInt(e,10)}),n.parseTwoDigitYear=function(e){return Y(e)+(Y(e)>68?1900:2e3)};var Te,be=Se("FullYear",!0);function Se(e,t){return function(a){return null!=a?(He(this,e,a),n.updateOffset(this,t),this):xe(this,e)}}function xe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function He(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&we(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),je(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function je(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,a=(t%(n=12)+n)%n;return e+=(t-a)/12,1===a?we(e)?29:28:31-a%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},R("M",["MM",2],"Mo",function(){return this.month()+1}),R("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),R("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),W("month",8),de("M",K),de("MM",K,q),de("MMM",function(e,t){return t.monthsShortRegex(e)}),de("MMMM",function(e,t){return t.monthsRegex(e)}),ce(["M","MM"],function(e,t){t[fe]=Y(e)-1}),ce(["MMM","MMMM"],function(e,t,n,a){var r=n._locale.monthsParse(e,a,n._strict);null!=r?t[fe]=r:c(n).invalidMonth=e});var Pe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ee="January_February_March_April_May_June_July_August_September_October_November_December".split("_");var Oe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ae(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=Y(t);else if(!i(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),je(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function We(e){return null!=e?(Ae(this,e),n.updateOffset(this,!0),this):xe(this,"Month")}var Ce=ie;var Ne=ie;function Fe(){function e(e,t){return t.length-e.length}var t,n,a=[],r=[],s=[];for(t=0;t<12;t++)n=_([2e3,t]),a.push(this.monthsShort(n,"")),r.push(this.months(n,"")),s.push(this.months(n,"")),s.push(this.monthsShort(n,""));for(a.sort(e),r.sort(e),s.sort(e),t=0;t<12;t++)a[t]=le(a[t]),r[t]=le(r[t]);for(t=0;t<24;t++)s[t]=le(s[t]);this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Ie(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ze(e,t,n){var a=7+t-n;return-((7+Ie(e,0,a).getUTCDay()-t)%7)+a-1}function Re(e,t,n,a,r){var s,i,o=1+7*(t-1)+(7+n-a)%7+ze(e,a,r);return o<=0?i=De(s=e-1)+o:o>De(e)?(s=e+1,i=o-De(e)):(s=e,i=o),{year:s,dayOfYear:i}}function Je(e,t,n){var a,r,s=ze(e.year(),t,n),i=Math.floor((e.dayOfYear()-s-1)/7)+1;return i<1?a=i+$e(r=e.year()-1,t,n):i>$e(e.year(),t,n)?(a=i-$e(e.year(),t,n),r=e.year()+1):(r=e.year(),a=i),{week:a,year:r}}function $e(e,t,n){var a=ze(e,t,n),r=ze(e+1,t,n);return(De(e)-a+r)/7}R("w",["ww",2],"wo","week"),R("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),W("week",5),W("isoWeek",5),de("w",K),de("ww",K,q),de("W",K),de("WW",K,q),me(["w","ww","W","WW"],function(e,t,n,a){t[a.substr(0,1)]=Y(e)});R("d",0,"do","day"),R("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),R("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),R("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),R("e",0,0,"weekday"),R("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),W("day",11),W("weekday",11),W("isoWeekday",11),de("d",K),de("e",K),de("E",K),de("dd",function(e,t){return t.weekdaysMinRegex(e)}),de("ddd",function(e,t){return t.weekdaysShortRegex(e)}),de("dddd",function(e,t){return t.weekdaysRegex(e)}),me(["dd","ddd","dddd"],function(e,t,n,a){var r=n._locale.weekdaysParse(e,a,n._strict);null!=r?t.d=r:c(n).invalidWeekday=e}),me(["d","e","E"],function(e,t,n,a){t[a]=Y(e)});var Be="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");var qe="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");var Ue="Su_Mo_Tu_We_Th_Fr_Sa".split("_");var Ve=ie;var Ge=ie;var Ke=ie;function Ze(){function e(e,t){return t.length-e.length}var t,n,a,r,s,i=[],o=[],d=[],u=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),a=this.weekdaysMin(n,""),r=this.weekdaysShort(n,""),s=this.weekdays(n,""),i.push(a),o.push(r),d.push(s),u.push(a),u.push(r),u.push(s);for(i.sort(e),o.sort(e),d.sort(e),u.sort(e),t=0;t<7;t++)o[t]=le(o[t]),d[t]=le(d[t]),u[t]=le(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Xe(){return this.hours()%12||12}function Qe(e,t){R(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function et(e,t){return t._meridiemParse}R("H",["HH",2],0,"hour"),R("h",["hh",2],0,Xe),R("k",["kk",2],0,function(){return this.hours()||24}),R("hmm",0,0,function(){return""+Xe.apply(this)+C(this.minutes(),2)}),R("hmmss",0,0,function(){return""+Xe.apply(this)+C(this.minutes(),2)+C(this.seconds(),2)}),R("Hmm",0,0,function(){return""+this.hours()+C(this.minutes(),2)}),R("Hmmss",0,0,function(){return""+this.hours()+C(this.minutes(),2)+C(this.seconds(),2)}),Qe("a",!0),Qe("A",!1),P("hour","h"),W("hour",13),de("a",et),de("A",et),de("H",K),de("h",K),de("k",K),de("HH",K,q),de("hh",K,q),de("kk",K,q),de("hmm",Z),de("hmmss",X),de("Hmm",Z),de("Hmmss",X),ce(["H","HH"],Me),ce(["k","kk"],function(e,t,n){var a=Y(e);t[Me]=24===a?0:a}),ce(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ce(["h","hh"],function(e,t,n){t[Me]=Y(e),c(n).bigHour=!0}),ce("hmm",function(e,t,n){var a=e.length-2;t[Me]=Y(e.substr(0,a)),t[Le]=Y(e.substr(a)),c(n).bigHour=!0}),ce("hmmss",function(e,t,n){var a=e.length-4,r=e.length-2;t[Me]=Y(e.substr(0,a)),t[Le]=Y(e.substr(a,2)),t[ge]=Y(e.substr(r)),c(n).bigHour=!0}),ce("Hmm",function(e,t,n){var a=e.length-2;t[Me]=Y(e.substr(0,a)),t[Le]=Y(e.substr(a))}),ce("Hmmss",function(e,t,n){var a=e.length-4,r=e.length-2;t[Me]=Y(e.substr(0,a)),t[Le]=Y(e.substr(a,2)),t[ge]=Y(e.substr(r))});var tt,nt=Se("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ee,monthsShort:Oe,week:{dow:0,doy:6},weekdays:Be,weekdaysMin:Ue,weekdaysShort:qe,meridiemParse:/[ap]\.?m?\.?/i},rt={},st={};function it(e){return e?e.toLowerCase().replace("_","-"):e}function ot(e){var t=null;if(!rt[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=tt._abbr,require("./locale/"+e),dt(t)}catch(e){}return rt[e]}function dt(e,t){var n;return e&&((n=s(t)?lt(e):ut(e,t))?tt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),tt._abbr}function ut(e,t){if(null!==t){var n,a=at;if(t.abbr=e,null!=rt[e])b("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=rt[e]._config;else if(null!=t.parentLocale)if(null!=rt[t.parentLocale])a=rt[t.parentLocale]._config;else{if(null==(n=ot(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;a=n._config}return rt[e]=new H(x(a,t)),st[e]&&st[e].forEach(function(e){ut(e.name,e.config)}),dt(e),rt[e]}return delete rt[e],null}function lt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return tt;if(!a(e)){if(t=ot(e))return t;e=[e]}return function(e){for(var t,n,a,r,s=0;s<e.length;){for(t=(r=it(e[s]).split("-")).length,n=(n=it(e[s+1]))?n.split("-"):null;t>0;){if(a=ot(r.slice(0,t).join("-")))return a;if(n&&n.length>=t&&k(r,n,!0)>=t-1)break;t--}s++}return tt}(e)}function _t(e){var t,n=e._a;return n&&-2===c(e).overflow&&(t=n[fe]<0||n[fe]>11?fe:n[ye]<1||n[ye]>je(n[pe],n[fe])?ye:n[Me]<0||n[Me]>24||24===n[Me]&&(0!==n[Le]||0!==n[ge]||0!==n[Ye])?Me:n[Le]<0||n[Le]>59?Le:n[ge]<0||n[ge]>59?ge:n[Ye]<0||n[Ye]>999?Ye:-1,c(e)._overflowDayOfYear&&(t<pe||t>ye)&&(t=ye),c(e)._overflowWeeks&&-1===t&&(t=ke),c(e)._overflowWeekday&&-1===t&&(t=ve),c(e).overflow=t),e}function ct(e,t,n){return null!=e?e:null!=t?t:n}function mt(e){var t,a,r,s,i,o=[];if(!e._d){for(r=function(e){var t=new Date(n.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ye]&&null==e._a[fe]&&function(e){var t,n,a,r,s,i,o,d;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)s=1,i=4,n=ct(t.GG,e._a[pe],Je(St(),1,4).year),a=ct(t.W,1),((r=ct(t.E,1))<1||r>7)&&(d=!0);else{s=e._locale._week.dow,i=e._locale._week.doy;var u=Je(St(),s,i);n=ct(t.gg,e._a[pe],u.year),a=ct(t.w,u.week),null!=t.d?((r=t.d)<0||r>6)&&(d=!0):null!=t.e?(r=t.e+s,(t.e<0||t.e>6)&&(d=!0)):r=s}a<1||a>$e(n,s,i)?c(e)._overflowWeeks=!0:null!=d?c(e)._overflowWeekday=!0:(o=Re(n,a,r,s,i),e._a[pe]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(i=ct(e._a[pe],r[pe]),(e._dayOfYear>De(i)||0===e._dayOfYear)&&(c(e)._overflowDayOfYear=!0),a=Ie(i,0,e._dayOfYear),e._a[fe]=a.getUTCMonth(),e._a[ye]=a.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Me]&&0===e._a[Le]&&0===e._a[ge]&&0===e._a[Ye]&&(e._nextDay=!0,e._a[Me]=0),e._d=(e._useUTC?Ie:function(e,t,n,a,r,s,i){var o=new Date(e,t,n,a,r,s,i);return e<100&&e>=0&&isFinite(o.getFullYear())&&o.setFullYear(e),o}).apply(null,o),s=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Me]=24),e._w&&void 0!==e._w.d&&e._w.d!==s&&(c(e).weekdayMismatch=!0)}}var ht=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,pt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ft=/Z|[+-]\d\d(?::?\d\d)?/,yt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Lt=/^\/?Date\((\-?\d+)/i;function gt(e){var t,n,a,r,s,i,o=e._i,d=ht.exec(o)||pt.exec(o);if(d){for(c(e).iso=!0,t=0,n=yt.length;t<n;t++)if(yt[t][1].exec(d[1])){r=yt[t][0],a=!1!==yt[t][2];break}if(null==r)return void(e._isValid=!1);if(d[3]){for(t=0,n=Mt.length;t<n;t++)if(Mt[t][1].exec(d[3])){s=(d[2]||" ")+Mt[t][0];break}if(null==s)return void(e._isValid=!1)}if(!a&&null!=s)return void(e._isValid=!1);if(d[4]){if(!ft.exec(d[4]))return void(e._isValid=!1);i="Z"}e._f=r+(s||"")+(i||""),wt(e)}else e._isValid=!1}var Yt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,n,a,r,s){var i=[function(e){var t=parseInt(e,10);if(t<=49)return 2e3+t;if(t<=999)return 1900+t;return t}(e),Oe.indexOf(t),parseInt(n,10),parseInt(a,10),parseInt(r,10)];return s&&i.push(parseInt(s,10)),i}var vt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Dt(e){var t=Yt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(t){var n=kt(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,n){return!e||qe.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(c(n).weekdayMismatch=!0,n._isValid=!1,!1)}(t[1],n,e))return;e._a=n,e._tzm=function(e,t,n){if(e)return vt[e];if(t)return 0;var a=parseInt(n,10),r=a%100;return(a-r)/100*60+r}(t[8],t[9],t[10]),e._d=Ie.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),c(e).rfc2822=!0}else e._isValid=!1}function wt(e){if(e._f!==n.ISO_8601)if(e._f!==n.RFC_2822){e._a=[],c(e).empty=!0;var t,a,r,s,i,o=""+e._i,d=o.length,u=0;for(r=$(e._f,e._locale).match(N)||[],t=0;t<r.length;t++)s=r[t],(a=(o.match(ue(s,e))||[])[0])&&((i=o.substr(0,o.indexOf(a))).length>0&&c(e).unusedInput.push(i),o=o.slice(o.indexOf(a)+a.length),u+=a.length),z[s]?(a?c(e).empty=!1:c(e).unusedTokens.push(s),he(s,a,e)):e._strict&&!a&&c(e).unusedTokens.push(s);c(e).charsLeftOver=d-u,o.length>0&&c(e).unusedInput.push(o),e._a[Me]<=12&&!0===c(e).bigHour&&e._a[Me]>0&&(c(e).bigHour=void 0),c(e).parsedDateParts=e._a.slice(0),c(e).meridiem=e._meridiem,e._a[Me]=function(e,t,n){var a;if(null==n)return t;return null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((a=e.isPM(n))&&t<12&&(t+=12),a||12!==t||(t=0),t):t}(e._locale,e._a[Me],e._meridiem),mt(e),_t(e)}else Dt(e);else gt(e)}function Tt(e){var t=e._i,u=e._f;return e._locale=e._locale||lt(e._l),null===t||void 0===u&&""===t?h({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),L(t)?new M(_t(t)):(o(t)?e._d=t:a(u)?function(e){var t,n,a,r,s;if(0===e._f.length)return c(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)s=0,t=f({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],wt(t),m(t)&&(s+=c(t).charsLeftOver,s+=10*c(t).unusedTokens.length,c(t).score=s,(null==a||s<a)&&(a=s,n=t));l(e,n||t)}(e):u?wt(e):function(e){var t=e._i;s(t)?e._d=new Date(n.now()):o(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=Lt.exec(e._i);null===t?(gt(e),!1===e._isValid&&(delete e._isValid,Dt(e),!1===e._isValid&&(delete e._isValid,n.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):a(t)?(e._a=d(t.slice(0),function(e){return parseInt(e,10)}),mt(e)):r(t)?function(e){if(!e._d){var t=O(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),mt(e)}}(e):i(t)?e._d=new Date(t):n.createFromInputFallback(e)}(e),m(e)||(e._d=null),e))}function bt(e,t,n,s,i){var o,d={};return!0!==n&&!1!==n||(s=n,n=void 0),(r(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||a(e)&&0===e.length)&&(e=void 0),d._isAMomentObject=!0,d._useUTC=d._isUTC=i,d._l=n,d._i=e,d._f=t,d._strict=s,(o=new M(_t(Tt(d))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function St(e,t,n,a){return bt(e,t,n,a,!1)}n.createFromInputFallback=D("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),n.ISO_8601=function(){},n.RFC_2822=function(){};var xt=D("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=St.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:h()}),Ht=D("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=St.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:h()});function jt(e,t){var n,r;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return St();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Pt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Et(e){var t=O(e),n=t.year||0,a=t.quarter||0,r=t.month||0,s=t.week||0,i=t.day||0,o=t.hour||0,d=t.minute||0,u=t.second||0,l=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Pt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,a=0;a<Pt.length;++a)if(e[Pt[a]]){if(n)return!1;parseFloat(e[Pt[a]])!==Y(e[Pt[a]])&&(n=!0)}return!0}(t),this._milliseconds=+l+1e3*u+6e4*d+1e3*o*60*60,this._days=+i+7*s,this._months=+r+3*a+12*n,this._data={},this._locale=lt(),this._bubble()}function Ot(e){return e instanceof Et}function At(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Wt(e,t){R(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+C(~~(e/60),2)+t+C(~~e%60,2)})}Wt("Z",":"),Wt("ZZ",""),de("Z",se),de("ZZ",se),ce(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Nt(se,e)});var Ct=/([\+\-]|\d\d)/gi;function Nt(e,t){var n=(t||"").match(e);if(null===n)return null;var a=((n[n.length-1]||[])+"").match(Ct)||["-",0,0],r=60*a[1]+Y(a[2]);return 0===r?0:"+"===a[0]?r:-r}function Ft(e,t){var a,r;return t._isUTC?(a=t.clone(),r=(L(e)||o(e)?e.valueOf():St(e).valueOf())-a.valueOf(),a._d.setTime(a._d.valueOf()+r),n.updateOffset(a,!1),a):St(e).local()}function It(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function zt(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}n.updateOffset=function(){};var Rt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Jt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function $t(e,t){var n,a,r,s=e,o=null;return Ot(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:i(e)?(s={},t?s[t]=e:s.milliseconds=e):(o=Rt.exec(e))?(n="-"===o[1]?-1:1,s={y:0,d:Y(o[ye])*n,h:Y(o[Me])*n,m:Y(o[Le])*n,s:Y(o[ge])*n,ms:Y(At(1e3*o[Ye]))*n}):(o=Jt.exec(e))?(n="-"===o[1]?-1:(o[1],1),s={y:Bt(o[2],n),M:Bt(o[3],n),w:Bt(o[4],n),d:Bt(o[5],n),h:Bt(o[6],n),m:Bt(o[7],n),s:Bt(o[8],n)}):null==s?s={}:"object"==typeof s&&("from"in s||"to"in s)&&(r=function(e,t){var n;if(!e.isValid()||!t.isValid())return{milliseconds:0,months:0};t=Ft(t,e),e.isBefore(t)?n=qt(e,t):((n=qt(t,e)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(St(s.from),St(s.to)),(s={}).ms=r.milliseconds,s.M=r.months),a=new Et(s),Ot(e)&&u(e,"_locale")&&(a._locale=e._locale),a}function Bt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function qt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Ut(e,t){return function(n,a){var r;return null===a||isNaN(+a)||(b(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=a,a=r),Vt(this,$t(n="string"==typeof n?+n:n,a),e),this}}function Vt(e,t,a,r){var s=t._milliseconds,i=At(t._days),o=At(t._months);e.isValid()&&(r=null==r||r,o&&Ae(e,xe(e,"Month")+o*a),i&&He(e,"Date",xe(e,"Date")+i*a),s&&e._d.setTime(e._d.valueOf()+s*a),r&&n.updateOffset(e,i||o))}$t.fn=Et.prototype,$t.invalid=function(){return $t(NaN)};var Gt=Ut(1,"add"),Kt=Ut(-1,"subtract");function Zt(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(n,"months");return-(n+(t-a<0?(t-a)/(a-e.clone().add(n-1,"months")):(t-a)/(e.clone().add(n+1,"months")-a)))||0}function Xt(e){var t;return void 0===e?this._locale._abbr:(null!=(t=lt(e))&&(this._locale=t),this)}n.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",n.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Qt=D("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function en(){return this._locale}function tn(e,t){R(0,[e,e.length],0,t)}function nn(e,t,n,a,r){var s;return null==e?Je(this,a,r).year:(t>(s=$e(e,a,r))&&(t=s),function(e,t,n,a,r){var s=Re(e,t,n,a,r),i=Ie(s.year,0,s.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}.call(this,e,t,n,a,r))}R(0,["gg",2],0,function(){return this.weekYear()%100}),R(0,["GG",2],0,function(){return this.isoWeekYear()%100}),tn("gggg","weekYear"),tn("ggggg","weekYear"),tn("GGGG","isoWeekYear"),tn("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),W("weekYear",1),W("isoWeekYear",1),de("G",ae),de("g",ae),de("GG",K,q),de("gg",K,q),de("GGGG",ee,V),de("gggg",ee,V),de("GGGGG",te,G),de("ggggg",te,G),me(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,a){t[a.substr(0,2)]=Y(e)}),me(["gg","GG"],function(e,t,a,r){t[r]=n.parseTwoDigitYear(e)}),R("Q",0,"Qo","quarter"),P("quarter","Q"),W("quarter",7),de("Q",B),ce("Q",function(e,t){t[fe]=3*(Y(e)-1)}),R("D",["DD",2],"Do","date"),P("date","D"),W("date",9),de("D",K),de("DD",K,q),de("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),ce(["D","DD"],ye),ce("Do",function(e,t){t[ye]=Y(e.match(K)[0])});var an=Se("Date",!0);R("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),W("dayOfYear",4),de("DDD",Q),de("DDDD",U),ce(["DDD","DDDD"],function(e,t,n){n._dayOfYear=Y(e)}),R("m",["mm",2],0,"minute"),P("minute","m"),W("minute",14),de("m",K),de("mm",K,q),ce(["m","mm"],Le);var rn=Se("Minutes",!1);R("s",["ss",2],0,"second"),P("second","s"),W("second",15),de("s",K),de("ss",K,q),ce(["s","ss"],ge);var sn,on=Se("Seconds",!1);for(R("S",0,0,function(){return~~(this.millisecond()/100)}),R(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),R(0,["SSS",3],0,"millisecond"),R(0,["SSSS",4],0,function(){return 10*this.millisecond()}),R(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),R(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),R(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),R(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),R(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),W("millisecond",16),de("S",Q,B),de("SS",Q,q),de("SSS",Q,U),sn="SSSS";sn.length<=9;sn+="S")de(sn,ne);function dn(e,t){t[Ye]=Y(1e3*("0."+e))}for(sn="S";sn.length<=9;sn+="S")ce(sn,dn);var un=Se("Milliseconds",!1);R("z",0,0,"zoneAbbr"),R("zz",0,0,"zoneName");var ln=M.prototype;function _n(e){return e}ln.add=Gt,ln.calendar=function(e,t){var a=e||St(),r=Ft(a,this).startOf("day"),s=n.calendarFormat(this,r)||"sameElse",i=t&&(S(t[s])?t[s].call(this,a):t[s]);return this.format(i||this.localeData().calendar(s,this,St(a)))},ln.clone=function(){return new M(this)},ln.diff=function(e,t,n){var a,r,s;if(!this.isValid())return NaN;if(!(a=Ft(e,this)).isValid())return NaN;switch(r=6e4*(a.utcOffset()-this.utcOffset()),t=E(t)){case"year":s=Zt(this,a)/12;break;case"month":s=Zt(this,a);break;case"quarter":s=Zt(this,a)/3;break;case"second":s=(this-a)/1e3;break;case"minute":s=(this-a)/6e4;break;case"hour":s=(this-a)/36e5;break;case"day":s=(this-a-r)/864e5;break;case"week":s=(this-a-r)/6048e5;break;default:s=this-a}return n?s:g(s)},ln.endOf=function(e){return void 0===(e=E(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},ln.format=function(e){e||(e=this.isUtc()?n.defaultFormatUtc:n.defaultFormat);var t=J(this,e);return this.localeData().postformat(t)},ln.from=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||St(e).isValid())?$t({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},ln.fromNow=function(e){return this.from(St(),e)},ln.to=function(e,t){return this.isValid()&&(L(e)&&e.isValid()||St(e).isValid())?$t({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},ln.toNow=function(e){return this.to(St(),e)},ln.get=function(e){return S(this[e=E(e)])?this[e]():this},ln.invalidAt=function(){return c(this).overflow},ln.isAfter=function(e,t){var n=L(e)?e:St(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=E(s(t)?"millisecond":t))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},ln.isBefore=function(e,t){var n=L(e)?e:St(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=E(s(t)?"millisecond":t))?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},ln.isBetween=function(e,t,n,a){return("("===(a=a||"()")[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===a[1]?this.isBefore(t,n):!this.isAfter(t,n))},ln.isSame=function(e,t){var n,a=L(e)?e:St(e);return!(!this.isValid()||!a.isValid())&&("millisecond"===(t=E(t||"millisecond"))?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},ln.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},ln.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},ln.isValid=function(){return m(this)},ln.lang=Qt,ln.locale=Xt,ln.localeData=en,ln.max=Ht,ln.min=xt,ln.parsingFlags=function(){return l({},c(this))},ln.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:A[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=O(e)),a=0;a<n.length;a++)this[n[a].unit](e[n[a].unit]);else if(S(this[e=E(e)]))return this[e](t);return this},ln.startOf=function(e){switch(e=E(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},ln.subtract=Kt,ln.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},ln.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},ln.toDate=function(){return new Date(this.valueOf())},ln.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?J(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",J(n,"Z")):J(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},ln.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',a=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r=t+'[")]';return this.format(n+a+"-MM-DD[T]HH:mm:ss.SSS"+r)},ln.toJSON=function(){return this.isValid()?this.toISOString():null},ln.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},ln.unix=function(){return Math.floor(this.valueOf()/1e3)},ln.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},ln.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},ln.year=be,ln.isLeapYear=function(){return we(this.year())},ln.weekYear=function(e){return nn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},ln.isoWeekYear=function(e){return nn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},ln.quarter=ln.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},ln.month=We,ln.daysInMonth=function(){return je(this.year(),this.month())},ln.week=ln.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},ln.isoWeek=ln.isoWeeks=function(e){var t=Je(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},ln.weeksInYear=function(){var e=this.localeData()._week;return $e(this.year(),e.dow,e.doy)},ln.isoWeeksInYear=function(){return $e(this.year(),1,4)},ln.date=an,ln.day=ln.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},ln.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},ln.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},ln.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},ln.hour=ln.hours=nt,ln.minute=ln.minutes=rn,ln.second=ln.seconds=on,ln.millisecond=ln.milliseconds=un,ln.utcOffset=function(e,t,a){var r,s=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Nt(se,e)))return this}else Math.abs(e)<16&&!a&&(e*=60);return!this._isUTC&&t&&(r=It(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),s!==e&&(!t||this._changeInProgress?Vt(this,$t(e-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,n.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?s:It(this)},ln.utc=function(e){return this.utcOffset(0,e)},ln.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(It(this),"m")),this},ln.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Nt(re,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},ln.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?St(e).utcOffset():0,(this.utcOffset()-e)%60==0)},ln.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},ln.isLocal=function(){return!!this.isValid()&&!this._isUTC},ln.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},ln.isUtc=zt,ln.isUTC=zt,ln.zoneAbbr=function(){return this._isUTC?"UTC":""},ln.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},ln.dates=D("dates accessor is deprecated. Use date instead.",an),ln.months=D("months accessor is deprecated. Use month instead",We),ln.years=D("years accessor is deprecated. Use year instead",be),ln.zone=D("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),ln.isDSTShifted=D("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(f(e,this),(e=Tt(e))._a){var t=e._isUTC?_(e._a):St(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var cn=H.prototype;function mn(e,t,n,a){var r=lt(),s=_().set(a,t);return r[n](s,e)}function hn(e,t,n){if(i(e)&&(t=e,e=void 0),e=e||"",null!=t)return mn(e,t,n,"month");var a,r=[];for(a=0;a<12;a++)r[a]=mn(e,a,n,"month");return r}function pn(e,t,n,a){"boolean"==typeof e?(i(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,i(t)&&(n=t,t=void 0),t=t||"");var r,s=lt(),o=e?s._week.dow:0;if(null!=n)return mn(t,(n+o)%7,a,"day");var d=[];for(r=0;r<7;r++)d[r]=mn(t,(r+o)%7,a,"day");return d}cn.calendar=function(e,t,n){var a=this._calendar[e]||this._calendar.sameElse;return S(a)?a.call(t,n):a},cn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},cn.invalidDate=function(){return this._invalidDate},cn.ordinal=function(e){return this._ordinal.replace("%d",e)},cn.preparse=_n,cn.postformat=_n,cn.relativeTime=function(e,t,n,a){var r=this._relativeTime[n];return S(r)?r(e,t,n,a):r.replace(/%d/i,e)},cn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},cn.set=function(e){var t,n;for(n in e)S(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},cn.months=function(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Pe).test(t)?"format":"standalone"][e.month()]:a(this._months)?this._months:this._months.standalone},cn.monthsShort=function(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Pe.test(t)?"format":"standalone"][e.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},cn.monthsParse=function(e,t,n){var a,r,s;if(this._monthsParseExact)return function(e,t,n){var a,r,s,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)s=_([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(s,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(s,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(r=Te.call(this._shortMonthsParse,i))?r:null:-1!==(r=Te.call(this._longMonthsParse,i))?r:null:"MMM"===t?-1!==(r=Te.call(this._shortMonthsParse,i))?r:-1!==(r=Te.call(this._longMonthsParse,i))?r:null:-1!==(r=Te.call(this._longMonthsParse,i))?r:-1!==(r=Te.call(this._shortMonthsParse,i))?r:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(r=_([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(s="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[a]=new RegExp(s.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===t&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}},cn.monthsRegex=function(e){return this._monthsParseExact?(u(this,"_monthsRegex")||Fe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(u(this,"_monthsRegex")||(this._monthsRegex=Ne),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},cn.monthsShortRegex=function(e){return this._monthsParseExact?(u(this,"_monthsRegex")||Fe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(u(this,"_monthsShortRegex")||(this._monthsShortRegex=Ce),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},cn.week=function(e){return Je(e,this._week.dow,this._week.doy).week},cn.firstDayOfYear=function(){return this._week.doy},cn.firstDayOfWeek=function(){return this._week.dow},cn.weekdays=function(e,t){return e?a(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:a(this._weekdays)?this._weekdays:this._weekdays.standalone},cn.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},cn.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},cn.weekdaysParse=function(e,t,n){var a,r,s;if(this._weekdaysParseExact)return function(e,t,n){var a,r,s,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)s=_([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(s,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(s,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(s,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(r=Te.call(this._weekdaysParse,i))?r:null:"ddd"===t?-1!==(r=Te.call(this._shortWeekdaysParse,i))?r:null:-1!==(r=Te.call(this._minWeekdaysParse,i))?r:null:"dddd"===t?-1!==(r=Te.call(this._weekdaysParse,i))?r:-1!==(r=Te.call(this._shortWeekdaysParse,i))?r:-1!==(r=Te.call(this._minWeekdaysParse,i))?r:null:"ddd"===t?-1!==(r=Te.call(this._shortWeekdaysParse,i))?r:-1!==(r=Te.call(this._weekdaysParse,i))?r:-1!==(r=Te.call(this._minWeekdaysParse,i))?r:null:-1!==(r=Te.call(this._minWeekdaysParse,i))?r:-1!==(r=Te.call(this._weekdaysParse,i))?r:-1!==(r=Te.call(this._shortWeekdaysParse,i))?r:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(r=_([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(s="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[a]=new RegExp(s.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===t&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===t&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}},cn.weekdaysRegex=function(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(u(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},cn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(u(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ge),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},cn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||Ze.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(u(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ke),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},cn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},cn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},dt("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===Y(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),n.lang=D("moment.lang is deprecated. Use moment.locale instead.",dt),n.langData=D("moment.langData is deprecated. Use moment.localeData instead.",lt);var fn=Math.abs;function yn(e,t,n,a){var r=$t(t,n);return e._milliseconds+=a*r._milliseconds,e._days+=a*r._days,e._months+=a*r._months,e._bubble()}function Mn(e){return e<0?Math.floor(e):Math.ceil(e)}function Ln(e){return 4800*e/146097}function gn(e){return 146097*e/4800}function Yn(e){return function(){return this.as(e)}}var kn=Yn("ms"),vn=Yn("s"),Dn=Yn("m"),wn=Yn("h"),Tn=Yn("d"),bn=Yn("w"),Sn=Yn("M"),xn=Yn("y");function Hn(e){return function(){return this.isValid()?this._data[e]:NaN}}var jn=Hn("milliseconds"),Pn=Hn("seconds"),En=Hn("minutes"),On=Hn("hours"),An=Hn("days"),Wn=Hn("months"),Cn=Hn("years");var Nn=Math.round,Fn={ss:44,s:45,m:45,h:22,d:26,M:11};var In=Math.abs;function zn(e){return(e>0)-(e<0)||+e}function Rn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=In(this._milliseconds)/1e3,a=In(this._days),r=In(this._months);e=g(n/60),t=g(e/60),n%=60,e%=60;var s=g(r/12),i=r%=12,o=a,d=t,u=e,l=n?n.toFixed(3).replace(/\.?0+$/,""):"",_=this.asSeconds();if(!_)return"P0D";var c=_<0?"-":"",m=zn(this._months)!==zn(_)?"-":"",h=zn(this._days)!==zn(_)?"-":"",p=zn(this._milliseconds)!==zn(_)?"-":"";return c+"P"+(s?m+s+"Y":"")+(i?m+i+"M":"")+(o?h+o+"D":"")+(d||u||l?"T":"")+(d?p+d+"H":"")+(u?p+u+"M":"")+(l?p+l+"S":"")}var Jn=Et.prototype;Jn.isValid=function(){return this._isValid},Jn.abs=function(){var e=this._data;return this._milliseconds=fn(this._milliseconds),this._days=fn(this._days),this._months=fn(this._months),e.milliseconds=fn(e.milliseconds),e.seconds=fn(e.seconds),e.minutes=fn(e.minutes),e.hours=fn(e.hours),e.months=fn(e.months),e.years=fn(e.years),this},Jn.add=function(e,t){return yn(this,e,t,1)},Jn.subtract=function(e,t){return yn(this,e,t,-1)},Jn.as=function(e){if(!this.isValid())return NaN;var t,n,a=this._milliseconds;if("month"===(e=E(e))||"year"===e)return t=this._days+a/864e5,n=this._months+Ln(t),"month"===e?n:n/12;switch(t=this._days+Math.round(gn(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return 24*t+a/36e5;case"minute":return 1440*t+a/6e4;case"second":return 86400*t+a/1e3;case"millisecond":return Math.floor(864e5*t)+a;default:throw new Error("Unknown unit "+e)}},Jn.asMilliseconds=kn,Jn.asSeconds=vn,Jn.asMinutes=Dn,Jn.asHours=wn,Jn.asDays=Tn,Jn.asWeeks=bn,Jn.asMonths=Sn,Jn.asYears=xn,Jn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*Y(this._months/12):NaN},Jn._bubble=function(){var e,t,n,a,r,s=this._milliseconds,i=this._days,o=this._months,d=this._data;return s>=0&&i>=0&&o>=0||s<=0&&i<=0&&o<=0||(s+=864e5*Mn(gn(o)+i),i=0,o=0),d.milliseconds=s%1e3,e=g(s/1e3),d.seconds=e%60,t=g(e/60),d.minutes=t%60,n=g(t/60),d.hours=n%24,i+=g(n/24),o+=r=g(Ln(i)),i-=Mn(gn(r)),a=g(o/12),o%=12,d.days=i,d.months=o,d.years=a,this},Jn.clone=function(){return $t(this)},Jn.get=function(e){return e=E(e),this.isValid()?this[e+"s"]():NaN},Jn.milliseconds=jn,Jn.seconds=Pn,Jn.minutes=En,Jn.hours=On,Jn.days=An,Jn.weeks=function(){return g(this.days()/7)},Jn.months=Wn,Jn.years=Cn,Jn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var a=$t(e).abs(),r=Nn(a.as("s")),s=Nn(a.as("m")),i=Nn(a.as("h")),o=Nn(a.as("d")),d=Nn(a.as("M")),u=Nn(a.as("y")),l=r<=Fn.ss&&["s",r]||r<Fn.s&&["ss",r]||s<=1&&["m"]||s<Fn.m&&["mm",s]||i<=1&&["h"]||i<Fn.h&&["hh",i]||o<=1&&["d"]||o<Fn.d&&["dd",o]||d<=1&&["M"]||d<Fn.M&&["MM",d]||u<=1&&["y"]||["yy",u];return l[2]=t,l[3]=+e>0,l[4]=n,function(e,t,n,a,r){return r.relativeTime(t||1,!!n,e,a)}.apply(null,l)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Jn.toISOString=Rn,Jn.toString=Rn,Jn.toJSON=Rn,Jn.locale=Xt,Jn.localeData=en,Jn.toIsoString=D("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Rn),Jn.lang=Qt,R("X",0,0,"unix"),R("x",0,0,"valueOf"),de("x",ae),de("X",/[+-]?\d+(\.\d{1,3})?/),ce("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ce("x",function(e,t,n){n._d=new Date(Y(e))}),n.version="2.22.2",e=St,n.fn=ln,n.min=function(){return jt("isBefore",[].slice.call(arguments,0))},n.max=function(){return jt("isAfter",[].slice.call(arguments,0))},n.now=function(){return Date.now?Date.now():+new Date},n.utc=_,n.unix=function(e){return St(1e3*e)},n.months=function(e,t){return hn(e,t,"months")},n.isDate=o,n.locale=dt,n.invalid=h,n.duration=$t,n.isMoment=L,n.weekdays=function(e,t,n){return pn(e,t,n,"weekdays")},n.parseZone=function(){return St.apply(null,arguments).parseZone()},n.localeData=lt,n.isDuration=Ot,n.monthsShort=function(e,t){return hn(e,t,"monthsShort")},n.weekdaysMin=function(e,t,n){return pn(e,t,n,"weekdaysMin")},n.defineLocale=ut,n.updateLocale=function(e,t){if(null!=t){var n,a,r=at;null!=(a=ot(e))&&(r=a._config),(n=new H(t=x(r,t))).parentLocale=rt[e],rt[e]=n,dt(e)}else null!=rt[e]&&(null!=rt[e].parentLocale?rt[e]=rt[e].parentLocale:null!=rt[e]&&delete rt[e]);return rt[e]},n.locales=function(){return w(rt)},n.weekdaysShort=function(e,t,n){return pn(e,t,n,"weekdaysShort")},n.normalizeUnits=E,n.relativeTimeRounding=function(e){return void 0===e?Nn:"function"==typeof e&&(Nn=e,!0)},n.relativeTimeThreshold=function(e,t){return void 0!==Fn[e]&&(void 0===t?Fn[e]:(Fn[e]=t,"s"===e&&(Fn.ss=t-1),!0))},n.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},n.prototype=ln,n.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},n.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[MÃ´re om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),n.defineLocale("ar-dz",{months:"Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±".split("_"),monthsShort:"Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±".split("_"),weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø§Ø­Ø¯_Ø§Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø£Ø­_Ø¥Ø«_Ø«ÙØ§_Ø£Ø±_Ø®Ù_Ø¬Ù_Ø³Ø¨".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"ÙÙ %s",past:"ÙÙØ° %s",s:"Ø«ÙØ§Ù",ss:"%d Ø«Ø§ÙÙØ©",m:"Ø¯ÙÙÙØ©",mm:"%d Ø¯ÙØ§Ø¦Ù",h:"Ø³Ø§Ø¹Ø©",hh:"%d Ø³Ø§Ø¹Ø§Øª",d:"ÙÙÙ",dd:"%d Ø£ÙØ§Ù",M:"Ø´ÙØ±",MM:"%d Ø£Ø´ÙØ±",y:"Ø³ÙØ©",yy:"%d Ø³ÙÙØ§Øª"},week:{dow:0,doy:4}}),n.defineLocale("ar-kw",{months:"ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±".split("_"),monthsShort:"ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±".split("_"),weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥ØªÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø§Ø­Ø¯_Ø§ØªÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"ÙÙ %s",past:"ÙÙØ° %s",s:"Ø«ÙØ§Ù",ss:"%d Ø«Ø§ÙÙØ©",m:"Ø¯ÙÙÙØ©",mm:"%d Ø¯ÙØ§Ø¦Ù",h:"Ø³Ø§Ø¹Ø©",hh:"%d Ø³Ø§Ø¹Ø§Øª",d:"ÙÙÙ",dd:"%d Ø£ÙØ§Ù",M:"Ø´ÙØ±",MM:"%d Ø£Ø´ÙØ±",y:"Ø³ÙØ©",yy:"%d Ø³ÙÙØ§Øª"},week:{dow:0,doy:12}});var $n={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},Bn=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},qn={s:["Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©","Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",["Ø«Ø§ÙÙØªØ§Ù","Ø«Ø§ÙÙØªÙÙ"],"%d Ø«ÙØ§Ù","%d Ø«Ø§ÙÙØ©","%d Ø«Ø§ÙÙØ©"],m:["Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©","Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©",["Ø¯ÙÙÙØªØ§Ù","Ø¯ÙÙÙØªÙÙ"],"%d Ø¯ÙØ§Ø¦Ù","%d Ø¯ÙÙÙØ©","%d Ø¯ÙÙÙØ©"],h:["Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©","Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©",["Ø³Ø§Ø¹ØªØ§Ù","Ø³Ø§Ø¹ØªÙÙ"],"%d Ø³Ø§Ø¹Ø§Øª","%d Ø³Ø§Ø¹Ø©","%d Ø³Ø§Ø¹Ø©"],d:["Ø£ÙÙ ÙÙ ÙÙÙ","ÙÙÙ ÙØ§Ø­Ø¯",["ÙÙÙØ§Ù","ÙÙÙÙÙ"],"%d Ø£ÙØ§Ù","%d ÙÙÙÙØ§","%d ÙÙÙ"],M:["Ø£ÙÙ ÙÙ Ø´ÙØ±","Ø´ÙØ± ÙØ§Ø­Ø¯",["Ø´ÙØ±Ø§Ù","Ø´ÙØ±ÙÙ"],"%d Ø£Ø´ÙØ±","%d Ø´ÙØ±Ø§","%d Ø´ÙØ±"],y:["Ø£ÙÙ ÙÙ Ø¹Ø§Ù","Ø¹Ø§Ù ÙØ§Ø­Ø¯",["Ø¹Ø§ÙØ§Ù","Ø¹Ø§ÙÙÙ"],"%d Ø£Ø¹ÙØ§Ù","%d Ø¹Ø§ÙÙØ§","%d Ø¹Ø§Ù"]},Un=function(e){return function(t,n,a,r){var s=Bn(t),i=qn[e][Bn(t)];return 2===s&&(i=i[n?0:1]),i.replace(/%d/i,t)}},Vn=["ÙÙØ§ÙØ±","ÙØ¨Ø±Ø§ÙØ±","ÙØ§Ø±Ø³","Ø£Ø¨Ø±ÙÙ","ÙØ§ÙÙ","ÙÙÙÙÙ","ÙÙÙÙÙ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙØ¨Ø±","Ø£ÙØªÙØ¨Ø±","ÙÙÙÙØ¨Ø±","Ø¯ÙØ³ÙØ¨Ø±"];n.defineLocale("ar-ly",{months:Vn,monthsShort:Vn,weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/âM/âYYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/Øµ|Ù/,isPM:function(e){return"Ù"===e},meridiem:function(e,t,n){return e<12?"Øµ":"Ù"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"Ø¨Ø¹Ø¯ %s",past:"ÙÙØ° %s",s:Un("s"),ss:Un("s"),m:Un("m"),mm:Un("m"),h:Un("h"),hh:Un("h"),d:Un("d"),dd:Un("d"),M:Un("M"),MM:Un("M"),y:Un("y"),yy:Un("y")},preparse:function(e){return e.replace(/Ø/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return $n[e]}).replace(/,/g,"Ø")},week:{dow:6,doy:12}}),n.defineLocale("ar-ma",{months:"ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±".split("_"),monthsShort:"ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±".split("_"),weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥ØªÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø§Ø­Ø¯_Ø§ØªÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"ÙÙ %s",past:"ÙÙØ° %s",s:"Ø«ÙØ§Ù",ss:"%d Ø«Ø§ÙÙØ©",m:"Ø¯ÙÙÙØ©",mm:"%d Ø¯ÙØ§Ø¦Ù",h:"Ø³Ø§Ø¹Ø©",hh:"%d Ø³Ø§Ø¹Ø§Øª",d:"ÙÙÙ",dd:"%d Ø£ÙØ§Ù",M:"Ø´ÙØ±",MM:"%d Ø£Ø´ÙØ±",y:"Ø³ÙØ©",yy:"%d Ø³ÙÙØ§Øª"},week:{dow:6,doy:12}});var Gn={1:"Ù¡",2:"Ù¢",3:"Ù£",4:"Ù¤",5:"Ù¥",6:"Ù¦",7:"Ù§",8:"Ù¨",9:"Ù©",0:"Ù "},Kn={"Ù¡":"1","Ù¢":"2","Ù£":"3","Ù¤":"4","Ù¥":"5","Ù¦":"6","Ù§":"7","Ù¨":"8","Ù©":"9","Ù ":"0"};n.defineLocale("ar-sa",{months:"ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§ÙÙ_ÙÙÙÙÙ_ÙÙÙÙÙ_Ø£ØºØ³Ø·Ø³_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±".split("_"),monthsShort:"ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§ÙÙ_ÙÙÙÙÙ_ÙÙÙÙÙ_Ø£ØºØ³Ø·Ø³_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±".split("_"),weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/Øµ|Ù/,isPM:function(e){return"Ù"===e},meridiem:function(e,t,n){return e<12?"Øµ":"Ù"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"ÙÙ %s",past:"ÙÙØ° %s",s:"Ø«ÙØ§Ù",ss:"%d Ø«Ø§ÙÙØ©",m:"Ø¯ÙÙÙØ©",mm:"%d Ø¯ÙØ§Ø¦Ù",h:"Ø³Ø§Ø¹Ø©",hh:"%d Ø³Ø§Ø¹Ø§Øª",d:"ÙÙÙ",dd:"%d Ø£ÙØ§Ù",M:"Ø´ÙØ±",MM:"%d Ø£Ø´ÙØ±",y:"Ø³ÙØ©",yy:"%d Ø³ÙÙØ§Øª"},preparse:function(e){return e.replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g,function(e){return Kn[e]}).replace(/Ø/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return Gn[e]}).replace(/,/g,"Ø")},week:{dow:0,doy:6}}),n.defineLocale("ar-tn",{months:"Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±".split("_"),monthsShort:"Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±".split("_"),weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"ÙÙ %s",past:"ÙÙØ° %s",s:"Ø«ÙØ§Ù",ss:"%d Ø«Ø§ÙÙØ©",m:"Ø¯ÙÙÙØ©",mm:"%d Ø¯ÙØ§Ø¦Ù",h:"Ø³Ø§Ø¹Ø©",hh:"%d Ø³Ø§Ø¹Ø§Øª",d:"ÙÙÙ",dd:"%d Ø£ÙØ§Ù",M:"Ø´ÙØ±",MM:"%d Ø£Ø´ÙØ±",y:"Ø³ÙØ©",yy:"%d Ø³ÙÙØ§Øª"},week:{dow:1,doy:4}});var Zn={1:"Ù¡",2:"Ù¢",3:"Ù£",4:"Ù¤",5:"Ù¥",6:"Ù¦",7:"Ù§",8:"Ù¨",9:"Ù©",0:"Ù "},Xn={"Ù¡":"1","Ù¢":"2","Ù£":"3","Ù¤":"4","Ù¥":"5","Ù¦":"6","Ù§":"7","Ù¨":"8","Ù©":"9","Ù ":"0"},Qn=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},ea={s:["Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©","Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",["Ø«Ø§ÙÙØªØ§Ù","Ø«Ø§ÙÙØªÙÙ"],"%d Ø«ÙØ§Ù","%d Ø«Ø§ÙÙØ©","%d Ø«Ø§ÙÙØ©"],m:["Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©","Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©",["Ø¯ÙÙÙØªØ§Ù","Ø¯ÙÙÙØªÙÙ"],"%d Ø¯ÙØ§Ø¦Ù","%d Ø¯ÙÙÙØ©","%d Ø¯ÙÙÙØ©"],h:["Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©","Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©",["Ø³Ø§Ø¹ØªØ§Ù","Ø³Ø§Ø¹ØªÙÙ"],"%d Ø³Ø§Ø¹Ø§Øª","%d Ø³Ø§Ø¹Ø©","%d Ø³Ø§Ø¹Ø©"],d:["Ø£ÙÙ ÙÙ ÙÙÙ","ÙÙÙ ÙØ§Ø­Ø¯",["ÙÙÙØ§Ù","ÙÙÙÙÙ"],"%d Ø£ÙØ§Ù","%d ÙÙÙÙØ§","%d ÙÙÙ"],M:["Ø£ÙÙ ÙÙ Ø´ÙØ±","Ø´ÙØ± ÙØ§Ø­Ø¯",["Ø´ÙØ±Ø§Ù","Ø´ÙØ±ÙÙ"],"%d Ø£Ø´ÙØ±","%d Ø´ÙØ±Ø§","%d Ø´ÙØ±"],y:["Ø£ÙÙ ÙÙ Ø¹Ø§Ù","Ø¹Ø§Ù ÙØ§Ø­Ø¯",["Ø¹Ø§ÙØ§Ù","Ø¹Ø§ÙÙÙ"],"%d Ø£Ø¹ÙØ§Ù","%d Ø¹Ø§ÙÙØ§","%d Ø¹Ø§Ù"]},ta=function(e){return function(t,n,a,r){var s=Qn(t),i=ea[e][Qn(t)];return 2===s&&(i=i[n?0:1]),i.replace(/%d/i,t)}},na=["ÙÙØ§ÙØ±","ÙØ¨Ø±Ø§ÙØ±","ÙØ§Ø±Ø³","Ø£Ø¨Ø±ÙÙ","ÙØ§ÙÙ","ÙÙÙÙÙ","ÙÙÙÙÙ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙØ¨Ø±","Ø£ÙØªÙØ¨Ø±","ÙÙÙÙØ¨Ø±","Ø¯ÙØ³ÙØ¨Ø±"];n.defineLocale("ar",{months:na,monthsShort:na,weekdays:"Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª".split("_"),weekdaysShort:"Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª".split("_"),weekdaysMin:"Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/âM/âYYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/Øµ|Ù/,isPM:function(e){return"Ù"===e},meridiem:function(e,t,n){return e<12?"Øµ":"Ù"},calendar:{sameDay:"[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextDay:"[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",nextWeek:"dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastDay:"[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",lastWeek:"dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT",sameElse:"L"},relativeTime:{future:"Ø¨Ø¹Ø¯ %s",past:"ÙÙØ° %s",s:ta("s"),ss:ta("s"),m:ta("m"),mm:ta("m"),h:ta("h"),hh:ta("h"),d:ta("d"),dd:ta("d"),M:ta("M"),MM:ta("M"),y:ta("y"),yy:ta("y")},preparse:function(e){return e.replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g,function(e){return Xn[e]}).replace(/Ø/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return Zn[e]}).replace(/,/g,"Ø")},week:{dow:6,doy:12}});var aa={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-Ã¼ncÃ¼",4:"-Ã¼ncÃ¼",100:"-Ã¼ncÃ¼",6:"-ncÄ±",9:"-uncu",10:"-uncu",30:"-uncu",60:"-Ä±ncÄ±",90:"-Ä±ncÄ±"};function ra(e,t,n){var a,r;return"m"===n?t?"ÑÐ²ÑÐ»ÑÐ½Ð°":"ÑÐ²ÑÐ»ÑÐ½Ñ":"h"===n?t?"Ð³Ð°Ð´Ð·ÑÐ½Ð°":"Ð³Ð°Ð´Ð·ÑÐ½Ñ":e+" "+(a=+e,r={ss:t?"ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´":"ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´",mm:t?"ÑÐ²ÑÐ»ÑÐ½Ð°_ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½":"ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½",hh:t?"Ð³Ð°Ð´Ð·ÑÐ½Ð°_Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½":"Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½",dd:"Ð´Ð·ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð·ÑÐ½",MM:"Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÑ_Ð¼ÐµÑÑÑÐ°Ñ",yy:"Ð³Ð¾Ð´_Ð³Ð°Ð´Ñ_Ð³Ð°Ð´Ð¾Ñ"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}n.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertÉsi_ÃÉrÅÉnbÉ axÅamÄ±_ÃÉrÅÉnbÉ_CÃ¼mÉ axÅamÄ±_CÃ¼mÉ_ÅÉnbÉ".split("_"),weekdaysShort:"Baz_BzE_ÃAx_ÃÉr_CAx_CÃ¼m_ÅÉn".split("_"),weekdaysMin:"Bz_BE_ÃA_ÃÉ_CA_CÃ¼_ÅÉ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugÃ¼n saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gÉlÉn hÉftÉ] dddd [saat] LT",lastDay:"[dÃ¼nÉn] LT",lastWeek:"[keÃ§Én hÉftÉ] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s ÉvvÉl",s:"birneÃ§É saniyÉ",ss:"%d saniyÉ",m:"bir dÉqiqÉ",mm:"%d dÉqiqÉ",h:"bir saat",hh:"%d saat",d:"bir gÃ¼n",dd:"%d gÃ¼n",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecÉ|sÉhÉr|gÃ¼ndÃ¼z|axÅam/,isPM:function(e){return/^(gÃ¼ndÃ¼z|axÅam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecÉ":e<12?"sÉhÉr":e<17?"gÃ¼ndÃ¼z":"axÅam"},dayOfMonthOrdinalParse:/\d{1,2}-(Ä±ncÄ±|inci|nci|Ã¼ncÃ¼|ncÄ±|uncu)/,ordinal:function(e){if(0===e)return e+"-Ä±ncÄ±";var t=e%10;return e+(aa[t]||aa[e%100-t]||aa[e>=100?100:null])},week:{dow:1,doy:7}}),n.defineLocale("be",{months:{format:"ÑÑÑÐ´Ð·ÐµÐ½Ñ_Ð»ÑÑÐ°Ð³Ð°_ÑÐ°ÐºÐ°Ð²ÑÐºÐ°_ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°_ÑÑÐ°ÑÐ½Ñ_ÑÑÑÐ²ÐµÐ½Ñ_Ð»ÑÐ¿ÐµÐ½Ñ_Ð¶Ð½ÑÑÐ½Ñ_Ð²ÐµÑÐ°ÑÐ½Ñ_ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°_Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°_ÑÐ½ÐµÐ¶Ð½Ñ".split("_"),standalone:"ÑÑÑÐ´Ð·ÐµÐ½Ñ_Ð»ÑÑÑ_ÑÐ°ÐºÐ°Ð²ÑÐº_ÐºÑÐ°ÑÐ°Ð²ÑÐº_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÑÑÐ²ÐµÐ½Ñ_Ð»ÑÐ¿ÐµÐ½Ñ_Ð¶Ð½ÑÐ²ÐµÐ½Ñ_Ð²ÐµÑÐ°ÑÐµÐ½Ñ_ÐºÐ°ÑÑÑÑÑÐ½ÑÐº_Ð»ÑÑÑÐ°Ð¿Ð°Ð´_ÑÐ½ÐµÐ¶Ð°Ð½Ñ".split("_")},monthsShort:"ÑÑÑÐ´_Ð»ÑÑ_ÑÐ°Ðº_ÐºÑÐ°Ñ_ÑÑÐ°Ð²_ÑÑÑÐ²_Ð»ÑÐ¿_Ð¶Ð½ÑÐ²_Ð²ÐµÑ_ÐºÐ°ÑÑ_Ð»ÑÑÑ_ÑÐ½ÐµÐ¶".split("_"),weekdays:{format:"Ð½ÑÐ´Ð·ÐµÐ»Ñ_Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº_Ð°ÑÑÐ¾ÑÐ°Ðº_ÑÐµÑÐ°Ð´Ñ_ÑÐ°ÑÐ²ÐµÑ_Ð¿ÑÑÐ½ÑÑÑ_ÑÑÐ±Ð¾ÑÑ".split("_"),standalone:"Ð½ÑÐ´Ð·ÐµÐ»Ñ_Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº_Ð°ÑÑÐ¾ÑÐ°Ðº_ÑÐµÑÐ°Ð´Ð°_ÑÐ°ÑÐ²ÐµÑ_Ð¿ÑÑÐ½ÑÑÐ°_ÑÑÐ±Ð¾ÑÐ°".split("_"),isFormat:/\[ ?[Ð£ÑÑ] ?(?:Ð¼ÑÐ½ÑÐ»ÑÑ|Ð½Ð°ÑÑÑÐ¿Ð½ÑÑ)? ?\] ?dddd/},weekdaysShort:"Ð½Ð´_Ð¿Ð½_Ð°Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),weekdaysMin:"Ð½Ð´_Ð¿Ð½_Ð°Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY Ð³.",LLL:"D MMMM YYYY Ð³., HH:mm",LLLL:"dddd, D MMMM YYYY Ð³., HH:mm"},calendar:{sameDay:"[Ð¡ÑÐ½Ð½Ñ Ñ] LT",nextDay:"[ÐÐ°ÑÑÑÐ° Ñ] LT",lastDay:"[Ð£ÑÐ¾ÑÐ° Ñ] LT",nextWeek:function(){return"[Ð£] dddd [Ñ] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[Ð£ Ð¼ÑÐ½ÑÐ»ÑÑ] dddd [Ñ] LT";case 1:case 2:case 4:return"[Ð£ Ð¼ÑÐ½ÑÐ»Ñ] dddd [Ñ] LT"}},sameElse:"L"},relativeTime:{future:"Ð¿ÑÐ°Ð· %s",past:"%s ÑÐ°Ð¼Ñ",s:"Ð½ÐµÐºÐ°Ð»ÑÐºÑ ÑÐµÐºÑÐ½Ð´",m:ra,mm:ra,h:ra,hh:ra,d:"Ð´Ð·ÐµÐ½Ñ",dd:ra,M:"Ð¼ÐµÑÑÑ",MM:ra,y:"Ð³Ð¾Ð´",yy:ra},meridiemParse:/Ð½Ð¾ÑÑ|ÑÐ°Ð½ÑÑÑ|Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°/,isPM:function(e){return/^(Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°)$/.test(e)},meridiem:function(e,t,n){return e<4?"Ð½Ð¾ÑÑ":e<12?"ÑÐ°Ð½ÑÑÑ":e<17?"Ð´Ð½Ñ":"Ð²ÐµÑÐ°ÑÐ°"},dayOfMonthOrdinalParse:/\d{1,2}-(Ñ|Ñ|Ð³Ð°)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-Ñ":e+"-Ñ";case"D":return e+"-Ð³Ð°";default:return e}},week:{dow:1,doy:7}}),n.defineLocale("bg",{months:"ÑÐ½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸".split("_"),monthsShort:"ÑÐ½Ñ_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº".split("_"),weekdays:"Ð½ÐµÐ´ÐµÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÑÐ´Ð°_ÑÐµÑÐ²ÑÑÑÑÐº_Ð¿ÐµÑÑÐº_ÑÑÐ±Ð¾ÑÐ°".split("_"),weekdaysShort:"Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÑ_ÑÐµÑ_Ð¿ÐµÑ_ÑÑÐ±".split("_"),weekdaysMin:"Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[ÐÐ½ÐµÑ Ð²] LT",nextDay:"[Ð£ÑÑÐµ Ð²] LT",nextWeek:"dddd [Ð²] LT",lastDay:"[ÐÑÐµÑÐ° Ð²] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Ð Ð¸Ð·Ð¼Ð¸Ð½Ð°Ð»Ð°ÑÐ°] dddd [Ð²] LT";case 1:case 2:case 4:case 5:return"[Ð Ð¸Ð·Ð¼Ð¸Ð½Ð°Ð»Ð¸Ñ] dddd [Ð²] LT"}},sameElse:"L"},relativeTime:{future:"ÑÐ»ÐµÐ´ %s",past:"Ð¿ÑÐµÐ´Ð¸ %s",s:"Ð½ÑÐºÐ¾Ð»ÐºÐ¾ ÑÐµÐºÑÐ½Ð´Ð¸",ss:"%d ÑÐµÐºÑÐ½Ð´Ð¸",m:"Ð¼Ð¸Ð½ÑÑÐ°",mm:"%d Ð¼Ð¸Ð½ÑÑÐ¸",h:"ÑÐ°Ñ",hh:"%d ÑÐ°ÑÐ°",d:"Ð´ÐµÐ½",dd:"%d Ð´Ð½Ð¸",M:"Ð¼ÐµÑÐµÑ",MM:"%d Ð¼ÐµÑÐµÑÐ°",y:"Ð³Ð¾Ð´Ð¸Ð½Ð°",yy:"%d Ð³Ð¾Ð´Ð¸Ð½Ð¸"},dayOfMonthOrdinalParse:/\d{1,2}-(ÐµÐ²|ÐµÐ½|ÑÐ¸|Ð²Ð¸|ÑÐ¸|Ð¼Ð¸)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ÐµÐ²":0===n?e+"-ÐµÐ½":n>10&&n<20?e+"-ÑÐ¸":1===t?e+"-Ð²Ð¸":2===t?e+"-ÑÐ¸":7===t||8===t?e+"-Ð¼Ð¸":e+"-ÑÐ¸"},week:{dow:1,doy:7}}),n.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_MÉkalo_ZuwÉnkalo_Zuluyekalo_Utikalo_SÉtanburukalo_ÉkutÉburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_MÉ_Zuw_Zul_Uti_SÉt_Éku_Now_Des".split("_"),weekdays:"Kari_NtÉnÉn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_NtÉ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lÉrÉ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lÉrÉ] HH:mm"},calendar:{sameDay:"[Bi lÉrÉ] LT",nextDay:"[Sini lÉrÉ] LT",nextWeek:"dddd [don lÉrÉ] LT",lastDay:"[Kunu lÉrÉ] LT",lastWeek:"dddd [tÉmÉnen lÉrÉ] LT",sameElse:"L"},relativeTime:{future:"%s kÉnÉ",past:"a bÉ %s bÉ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lÉrÉ kelen",hh:"lÉrÉ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}});var sa={1:"à§§",2:"à§¨",3:"à§©",4:"à§ª",5:"à§«",6:"à§¬",7:"à§­",8:"à§®",9:"à§¯",0:"à§¦"},ia={"à§§":"1","à§¨":"2","à§©":"3","à§ª":"4","à§«":"5","à§¬":"6","à§­":"7","à§®":"8","à§¯":"9","à§¦":"0"};n.defineLocale("bn",{months:"à¦à¦¾à¦¨à§à§à¦¾à¦°à§_à¦«à§à¦¬à§à¦°à§à§à¦¾à¦°à¦¿_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°à¦¿à¦²_à¦®à§_à¦à§à¦¨_à¦à§à¦²à¦¾à¦_à¦à¦à¦¸à§à¦_à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°_à¦à¦à§à¦à§à¦¬à¦°_à¦¨à¦­à§à¦®à§à¦¬à¦°_à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°".split("_"),monthsShort:"à¦à¦¾à¦¨à§_à¦«à§à¦¬_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°_à¦®à§_à¦à§à¦¨_à¦à§à¦²_à¦à¦_à¦¸à§à¦ªà§à¦_à¦à¦à§à¦à§_à¦¨à¦­à§_à¦¡à¦¿à¦¸à§".split("_"),weekdays:"à¦°à¦¬à¦¿à¦¬à¦¾à¦°_à¦¸à§à¦®à¦¬à¦¾à¦°_à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°_à¦¬à§à¦§à¦¬à¦¾à¦°_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°_à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°_à¦¶à¦¨à¦¿à¦¬à¦¾à¦°".split("_"),weekdaysShort:"à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦à¦²_à¦¬à§à¦§_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿".split("_"),weekdaysMin:"à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦_à¦¬à§à¦§_à¦¬à§à¦¹à¦_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿".split("_"),longDateFormat:{LT:"A h:mm à¦¸à¦®à§",LTS:"A h:mm:ss à¦¸à¦®à§",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm à¦¸à¦®à§",LLLL:"dddd, D MMMM YYYY, A h:mm à¦¸à¦®à§"},calendar:{sameDay:"[à¦à¦] LT",nextDay:"[à¦à¦à¦¾à¦®à§à¦à¦¾à¦²] LT",nextWeek:"dddd, LT",lastDay:"[à¦à¦¤à¦à¦¾à¦²] LT",lastWeek:"[à¦à¦¤] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à¦ªà¦°à§",past:"%s à¦à¦à§",s:"à¦à§à§à¦ à¦¸à§à¦à§à¦¨à§à¦¡",ss:"%d à¦¸à§à¦à§à¦¨à§à¦¡",m:"à¦à¦ à¦®à¦¿à¦¨à¦¿à¦",mm:"%d à¦®à¦¿à¦¨à¦¿à¦",h:"à¦à¦ à¦à¦¨à§à¦à¦¾",hh:"%d à¦à¦¨à§à¦à¦¾",d:"à¦à¦ à¦¦à¦¿à¦¨",dd:"%d à¦¦à¦¿à¦¨",M:"à¦à¦ à¦®à¦¾à¦¸",MM:"%d à¦®à¦¾à¦¸",y:"à¦à¦ à¦¬à¦à¦°",yy:"%d à¦¬à¦à¦°"},preparse:function(e){return e.replace(/[à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§¦]/g,function(e){return ia[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return sa[e]})},meridiemParse:/à¦°à¦¾à¦¤|à¦¸à¦à¦¾à¦²|à¦¦à§à¦ªà§à¦°|à¦¬à¦¿à¦à¦¾à¦²|à¦°à¦¾à¦¤/,meridiemHour:function(e,t){return 12===e&&(e=0),"à¦°à¦¾à¦¤"===t&&e>=4||"à¦¦à§à¦ªà§à¦°"===t&&e<5||"à¦¬à¦¿à¦à¦¾à¦²"===t?e+12:e},meridiem:function(e,t,n){return e<4?"à¦°à¦¾à¦¤":e<10?"à¦¸à¦à¦¾à¦²":e<17?"à¦¦à§à¦ªà§à¦°":e<20?"à¦¬à¦¿à¦à¦¾à¦²":"à¦°à¦¾à¦¤"},week:{dow:0,doy:6}});var oa={1:"à¼¡",2:"à¼¢",3:"à¼£",4:"à¼¤",5:"à¼¥",6:"à¼¦",7:"à¼§",8:"à¼¨",9:"à¼©",0:"à¼ "},da={"à¼¡":"1","à¼¢":"2","à¼£":"3","à¼¤":"4","à¼¥":"5","à¼¦":"6","à¼§":"7","à¼¨":"8","à¼©":"9","à¼ ":"0"};function ua(e,t,n){return e+" "+function(e,t){if(2===t)return function(e){var t={m:"v",b:"v",d:"z"};if(void 0===t[e.charAt(0)])return e;return t[e.charAt(0)]+e.substring(1)}(e);return e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function la(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}n.defineLocale("bo",{months:"à½à¾³à¼à½à¼à½à½à¼à½à½¼_à½à¾³à¼à½à¼à½à½à½²à½¦à¼à½_à½à¾³à¼à½à¼à½à½¦à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½²à¼à½_à½à¾³à¼à½à¼à½£à¾à¼à½_à½à¾³à¼à½à¼à½à¾²à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à½à¼à½_à½à¾³à¼à½à¼à½à½¢à¾à¾±à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½¦à¼à½".split("_"),monthsShort:"à½à¾³à¼à½à¼à½à½à¼à½à½¼_à½à¾³à¼à½à¼à½à½à½²à½¦à¼à½_à½à¾³à¼à½à¼à½à½¦à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½²à¼à½_à½à¾³à¼à½à¼à½£à¾à¼à½_à½à¾³à¼à½à¼à½à¾²à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à½à¼à½_à½à¾³à¼à½à¼à½à½¢à¾à¾±à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½¦à¼à½".split("_"),weekdays:"à½à½à½ à¼à½à½²à¼à½à¼_à½à½à½ à¼à½à¾³à¼à½à¼_à½à½à½ à¼à½à½²à½à¼à½à½à½¢à¼_à½à½à½ à¼à½£à¾·à½à¼à½à¼_à½à½à½ à¼à½à½´à½¢à¼à½à½´_à½à½à½ à¼à½à¼à½¦à½à½¦à¼_à½à½à½ à¼à½¦à¾¤à½ºà½à¼à½à¼".split("_"),weekdaysShort:"à½à½²à¼à½à¼_à½à¾³à¼à½à¼_à½à½²à½à¼à½à½à½¢à¼_à½£à¾·à½à¼à½à¼_à½à½´à½¢à¼à½à½´_à½à¼à½¦à½à½¦à¼_à½¦à¾¤à½ºà½à¼à½à¼".split("_"),weekdaysMin:"à½à½²à¼à½à¼_à½à¾³à¼à½à¼_à½à½²à½à¼à½à½à½¢à¼_à½£à¾·à½à¼à½à¼_à½à½´à½¢à¼à½à½´_à½à¼à½¦à½à½¦à¼_à½¦à¾¤à½ºà½à¼à½à¼".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[à½à½²à¼à½¢à½²à½] LT",nextDay:"[à½¦à½à¼à½à½²à½] LT",nextWeek:"[à½à½à½´à½à¼à½à¾²à½à¼à½¢à¾à½ºà½¦à¼à½], LT",lastDay:"[à½à¼à½¦à½] LT",lastWeek:"[à½à½à½´à½à¼à½à¾²à½à¼à½à½à½ à¼à½] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à½£à¼",past:"%s à½¦à¾à½à¼à½£",s:"à½£à½à¼à½¦à½",ss:"%d à½¦à¾à½¢à¼à½à¼",m:"à½¦à¾à½¢à¼à½à¼à½à½à½²à½",mm:"%d à½¦à¾à½¢à¼à½",h:"à½à½´à¼à½à½¼à½à¼à½à½à½²à½",hh:"%d à½à½´à¼à½à½¼à½",d:"à½à½²à½à¼à½à½à½²à½",dd:"%d à½à½²à½à¼",M:"à½à¾³à¼à½à¼à½à½à½²à½",MM:"%d à½à¾³à¼à½",y:"à½£à½¼à¼à½à½à½²à½",yy:"%d à½£à½¼"},preparse:function(e){return e.replace(/[à¼¡à¼¢à¼£à¼¤à¼¥à¼¦à¼§à¼¨à¼©à¼ ]/g,function(e){return da[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return oa[e]})},meridiemParse:/à½à½à½à¼à½à½¼|à½à½¼à½à½¦à¼à½à½¦|à½à½²à½à¼à½à½´à½|à½à½à½¼à½à¼à½à½|à½à½à½à¼à½à½¼/,meridiemHour:function(e,t){return 12===e&&(e=0),"à½à½à½à¼à½à½¼"===t&&e>=4||"à½à½²à½à¼à½à½´à½"===t&&e<5||"à½à½à½¼à½à¼à½à½"===t?e+12:e},meridiem:function(e,t,n){return e<4?"à½à½à½à¼à½à½¼":e<10?"à½à½¼à½à½¦à¼à½à½¦":e<17?"à½à½²à½à¼à½à½´à½":e<20?"à½à½à½¼à½à¼à½à½":"à½à½à½à¼à½à½¼"},week:{dow:0,doy:6}}),n.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoÃ¹",ss:"%d eilenn",m:"ur vunutenn",mm:ua,h:"un eur",hh:"%d eur",d:"un devezh",dd:ua,M:"ur miz",MM:ua,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(aÃ±|vet)/,ordinal:function(e){return e+(1===e?"aÃ±":"vet")},week:{dow:1,doy:4}}),n.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._Äet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_Äe_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juÄer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[proÅ¡lu] dddd [u] LT";case 6:return"[proÅ¡le] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[proÅ¡li] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:la,m:la,mm:la,h:la,hh:la,d:"dan",dd:la,M:"mjesec",MM:la,y:"godinu",yy:la},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),n.defineLocale("ca",{months:{standalone:"gener_febrer_marÃ§_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de marÃ§_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._marÃ§_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demÃ  a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquÃ­ %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|Ã¨|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"Ã¨";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}});var _a="leden_Ãºnor_bÅezen_duben_kvÄten_Äerven_Äervenec_srpen_zÃ¡ÅÃ­_ÅÃ­jen_listopad_prosinec".split("_"),ca="led_Ãºno_bÅe_dub_kvÄ_Ävn_Ävc_srp_zÃ¡Å_ÅÃ­j_lis_pro".split("_");function ma(e){return e>1&&e<5&&1!=~~(e/10)}function ha(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"pÃ¡r sekund":"pÃ¡r sekundami";case"ss":return t||a?r+(ma(e)?"sekundy":"sekund"):r+"sekundami";case"m":return t?"minuta":a?"minutu":"minutou";case"mm":return t||a?r+(ma(e)?"minuty":"minut"):r+"minutami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?r+(ma(e)?"hodiny":"hodin"):r+"hodinami";case"d":return t||a?"den":"dnem";case"dd":return t||a?r+(ma(e)?"dny":"dnÃ­"):r+"dny";case"M":return t||a?"mÄsÃ­c":"mÄsÃ­cem";case"MM":return t||a?r+(ma(e)?"mÄsÃ­ce":"mÄsÃ­cÅ¯"):r+"mÄsÃ­ci";case"y":return t||a?"rok":"rokem";case"yy":return t||a?r+(ma(e)?"roky":"let"):r+"lety"}}function pa(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function fa(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}function ya(e,t,n,a){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?r[n][0]:r[n][1]}n.defineLocale("cs",{months:_a,monthsShort:ca,monthsParse:function(e,t){var n,a=[];for(n=0;n<12;n++)a[n]=new RegExp("^"+e[n]+"$|^"+t[n]+"$","i");return a}(_a,ca),shortMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(ca),longMonthsParse:function(e){var t,n=[];for(t=0;t<12;t++)n[t]=new RegExp("^"+e[t]+"$","i");return n}(_a),weekdays:"nedÄle_pondÄlÃ­_ÃºterÃ½_stÅeda_Ätvrtek_pÃ¡tek_sobota".split("_"),weekdaysShort:"ne_po_Ãºt_st_Ät_pÃ¡_so".split("_"),weekdaysMin:"ne_po_Ãºt_st_Ät_pÃ¡_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zÃ­tra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedÄli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve stÅedu v] LT";case 4:return"[ve Ätvrtek v] LT";case 5:return"[v pÃ¡tek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[vÄera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou nedÄli v] LT";case 1:case 2:return"[minulÃ©] dddd [v] LT";case 3:return"[minulou stÅedu v] LT";case 4:case 5:return"[minulÃ½] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pÅed %s",s:ha,ss:ha,m:ha,mm:ha,h:ha,hh:ha,d:ha,dd:ha,M:ha,MM:ha,y:ha,yy:ha},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("cv",{months:"ÐºÓÑÐ»Ð°Ñ_Ð½Ð°ÑÓÑ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ò«ÓÑÑÐ¼Ðµ_ÑÑÓ_Ò«ÑÑÐ»Ð°_Ð°Ð²ÓÐ½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°ÑÑÐ°Ð²".split("_"),monthsShort:"ÐºÓÑ_Ð½Ð°Ñ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ò«ÓÑ_ÑÑÓ_Ò«ÑÑ_Ð°Ð²Ð½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°Ñ".split("_"),weekdays:"Ð²ÑÑÑÐ°ÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÑÐ¸ÐºÑÐ½_ÑÑÐ»Ð°ÑÐ¸ÐºÑÐ½_ÑÐ½ÐºÑÐ½_ÐºÓÒ«Ð½ÐµÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÐµÐºÑÐ½_ÑÓÐ¼Ð°ÑÐºÑÐ½".split("_"),weekdaysShort:"Ð²ÑÑ_ÑÑÐ½_ÑÑÐ»_ÑÐ½_ÐºÓÒ«_ÑÑÐ½_ÑÓÐ¼".split("_"),weekdaysMin:"Ð²Ñ_ÑÐ½_ÑÑ_ÑÐ½_ÐºÒ«_ÑÑ_ÑÐ¼".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ]",LLL:"YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ], HH:mm",LLLL:"dddd, YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ], HH:mm"},calendar:{sameDay:"[ÐÐ°ÑÐ½] LT [ÑÐµÑÐµÑÑÐµ]",nextDay:"[Ð«ÑÐ°Ð½] LT [ÑÐµÑÐµÑÑÐµ]",lastDay:"[ÓÐ½ÐµÑ] LT [ÑÐµÑÐµÑÑÐµ]",nextWeek:"[ÒªÐ¸ÑÐµÑ] dddd LT [ÑÐµÑÐµÑÑÐµ]",lastWeek:"[ÐÑÑÐ½Ó] dddd LT [ÑÐµÑÐµÑÑÐµ]",sameElse:"L"},relativeTime:{future:function(e){return e+(/ÑÐµÑÐµÑ$/i.exec(e)?"ÑÐµÐ½":/Ò«ÑÐ»$/i.exec(e)?"ÑÐ°Ð½":"ÑÐ°Ð½")},past:"%s ÐºÐ°ÑÐ»Ð»Ð°",s:"Ð¿ÓÑ-Ð¸Ðº Ò«ÐµÐºÐºÑÐ½Ñ",ss:"%d Ò«ÐµÐºÐºÑÐ½Ñ",m:"Ð¿ÓÑ Ð¼Ð¸Ð½ÑÑ",mm:"%d Ð¼Ð¸Ð½ÑÑ",h:"Ð¿ÓÑ ÑÐµÑÐµÑ",hh:"%d ÑÐµÑÐµÑ",d:"Ð¿ÓÑ ÐºÑÐ½",dd:"%d ÐºÑÐ½",M:"Ð¿ÓÑ ÑÐ¹ÓÑ",MM:"%d ÑÐ¹ÓÑ",y:"Ð¿ÓÑ Ò«ÑÐ»",yy:"%d Ò«ÑÐ»"},dayOfMonthOrdinalParse:/\d{1,2}-Ð¼ÓÑ/,ordinal:"%d-Ð¼ÓÑ",week:{dow:1,doy:7}}),n.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn Ã´l",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}}),n.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag".split("_"),weekdaysShort:"sÃ¸n_man_tir_ons_tor_fre_lÃ¸r".split("_"),weekdaysMin:"sÃ¸_ma_ti_on_to_fr_lÃ¸".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"pÃ¥ dddd [kl.] LT",lastDay:"[i gÃ¥r kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"fÃ¥ sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en mÃ¥ned",MM:"%d mÃ¥neder",y:"et Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("de-at",{months:"JÃ¤nner_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"JÃ¤n._Feb._MÃ¤rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:pa,mm:"%d Minuten",h:pa,hh:"%d Stunden",d:pa,dd:pa,M:pa,MM:pa,y:pa,yy:pa},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("de-ch",{months:"Januar_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._MÃ¤rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:fa,mm:"%d Minuten",h:fa,hh:"%d Stunden",d:fa,dd:fa,M:fa,MM:fa,y:fa,yy:fa},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("de",{months:"Januar_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._MÃ¤rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:ya,mm:"%d Minuten",h:ya,hh:"%d Stunden",d:ya,dd:ya,M:ya,MM:ya,y:ya,yy:ya},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Ma=["ÞÞ¬ÞÞªÞÞ¦ÞÞ©","ÞÞ¬ÞÞ°ÞÞªÞÞ¦ÞÞ©","ÞÞ§ÞÞ¨ÞÞª","ÞÞ­ÞÞ°ÞÞ©ÞÞª","ÞÞ­","ÞÞ«ÞÞ°","ÞÞªÞÞ¦ÞÞ¨","ÞÞ¯ÞÞ¦ÞÞ°ÞÞª","ÞÞ¬ÞÞ°ÞÞ¬ÞÞ°ÞÞ¦ÞÞª","ÞÞ®ÞÞ°ÞÞ¯ÞÞ¦ÞÞª","ÞÞ®ÞÞ¬ÞÞ°ÞÞ¦ÞÞª","ÞÞ¨ÞÞ¬ÞÞ°ÞÞ¦ÞÞª"],La=["ÞÞ§ÞÞ¨ÞÞ°ÞÞ¦","ÞÞ¯ÞÞ¦","ÞÞ¦ÞÞ°ÞÞ§ÞÞ¦","ÞÞªÞÞ¦","ÞÞªÞÞ§ÞÞ°ÞÞ¦ÞÞ¨","ÞÞªÞÞªÞÞª","ÞÞ®ÞÞ¨ÞÞ¨ÞÞª"];n.defineLocale("dv",{months:Ma,monthsShort:Ma,weekdays:La,weekdaysShort:La,weekdaysMin:"ÞÞ§ÞÞ¨_ÞÞ¯ÞÞ¦_ÞÞ¦ÞÞ°_ÞÞªÞÞ¦_ÞÞªÞÞ§_ÞÞªÞÞª_ÞÞ®ÞÞ¨".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ÞÞ|ÞÞ/,isPM:function(e){return"ÞÞ"===e},meridiem:function(e,t,n){return e<12?"ÞÞ":"ÞÞ"},calendar:{sameDay:"[ÞÞ¨ÞÞ¦ÞÞª] LT",nextDay:"[ÞÞ§ÞÞ¦ÞÞ§] LT",nextWeek:"dddd LT",lastDay:"[ÞÞ¨ÞÞ°ÞÞ¬] LT",lastWeek:"[ÞÞ§ÞÞ¨ÞÞªÞÞ¨] dddd LT",sameElse:"L"},relativeTime:{future:"ÞÞ¬ÞÞ­ÞÞ¦ÞÞ¨ %s",past:"ÞÞªÞÞ¨ÞÞ° %s",s:"ÞÞ¨ÞÞªÞÞ°ÞÞªÞÞ®ÞÞ¬ÞÞ°",ss:"d% ÞÞ¨ÞÞªÞÞ°ÞÞª",m:"ÞÞ¨ÞÞ¨ÞÞ¬ÞÞ°",mm:"ÞÞ¨ÞÞ¨ÞÞª %d",h:"ÞÞ¦ÞÞ¨ÞÞ¨ÞÞ¬ÞÞ°",hh:"ÞÞ¦ÞÞ¨ÞÞ¨ÞÞª %d",d:"ÞÞªÞÞ¦ÞÞ¬ÞÞ°",dd:"ÞÞªÞÞ¦ÞÞ° %d",M:"ÞÞ¦ÞÞ¬ÞÞ°",MM:"ÞÞ¦ÞÞ° %d",y:"ÞÞ¦ÞÞ¦ÞÞ¬ÞÞ°",yy:"ÞÞ¦ÞÞ¦ÞÞª %d"},preparse:function(e){return e.replace(/Ø/g,",")},postformat:function(e){return e.replace(/,/g,"Ø")},week:{dow:7,doy:12}}),n.defineLocale("el",{monthsNominativeEl:"ÎÎ±Î½Î¿ÏÎ¬ÏÎ¹Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ¬ÏÎ¹Î¿Ï_ÎÎ¬ÏÏÎ¹Î¿Ï_ÎÏÏÎ¯Î»Î¹Î¿Ï_ÎÎ¬Î¹Î¿Ï_ÎÎ¿ÏÎ½Î¹Î¿Ï_ÎÎ¿ÏÎ»Î¹Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎ­Î¼Î²ÏÎ¹Î¿Ï_ÎÎºÏÏÎ²ÏÎ¹Î¿Ï_ÎÎ¿Î­Î¼Î²ÏÎ¹Î¿Ï_ÎÎµÎºÎ­Î¼Î²ÏÎ¹Î¿Ï".split("_"),monthsGenitiveEl:"ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï_ÎÎ±ÏÏÎ¯Î¿Ï_ÎÏÏÎ¹Î»Î¯Î¿Ï_ÎÎ±ÎÎ¿Ï_ÎÎ¿ÏÎ½Î¯Î¿Ï_ÎÎ¿ÏÎ»Î¯Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎºÏÏÎ²ÏÎ¯Î¿Ï_ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"ÎÎ±Î½_Î¦ÎµÎ²_ÎÎ±Ï_ÎÏÏ_ÎÎ±Ï_ÎÎ¿ÏÎ½_ÎÎ¿ÏÎ»_ÎÏÎ³_Î£ÎµÏ_ÎÎºÏ_ÎÎ¿Îµ_ÎÎµÎº".split("_"),weekdays:"ÎÏÏÎ¹Î±ÎºÎ®_ÎÎµÏÏÎ­ÏÎ±_Î¤ÏÎ¯ÏÎ·_Î¤ÎµÏÎ¬ÏÏÎ·_Î Î­Î¼ÏÏÎ·_Î Î±ÏÎ±ÏÎºÎµÏÎ®_Î£Î¬Î²Î²Î±ÏÎ¿".split("_"),weekdaysShort:"ÎÏÏ_ÎÎµÏ_Î¤ÏÎ¹_Î¤ÎµÏ_Î ÎµÎ¼_Î Î±Ï_Î£Î±Î²".split("_"),weekdaysMin:"ÎÏ_ÎÎµ_Î¤Ï_Î¤Îµ_Î Îµ_Î Î±_Î£Î±".split("_"),meridiem:function(e,t,n){return e>11?n?"Î¼Î¼":"ÎÎ":n?"ÏÎ¼":"Î Î"},isPM:function(e){return"Î¼"===(e+"").toLowerCase()[0]},meridiemParse:/[Î Î]\.?Î?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Î£Î®Î¼ÎµÏÎ± {}] LT",nextDay:"[ÎÏÏÎ¹Î¿ {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Î§Î¸ÎµÏ {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[ÏÎ¿ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î¿] dddd [{}] LT";default:return"[ÏÎ·Î½ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î·] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n=this._calendarEl[e],a=t&&t.hours();return S(n)&&(n=n.apply(t)),n.replace("{}",a%12==1?"ÏÏÎ·":"ÏÏÎ¹Ï")},relativeTime:{future:"ÏÎµ %s",past:"%s ÏÏÎ¹Î½",s:"Î»Î¯Î³Î± Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±",ss:"%d Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±",m:"Î­Î½Î± Î»ÎµÏÏÏ",mm:"%d Î»ÎµÏÏÎ¬",h:"Î¼Î¯Î± ÏÏÎ±",hh:"%d ÏÏÎµÏ",d:"Î¼Î¯Î± Î¼Î­ÏÎ±",dd:"%d Î¼Î­ÏÎµÏ",M:"Î­Î½Î±Ï Î¼Î®Î½Î±Ï",MM:"%d Î¼Î®Î½ÎµÏ",y:"Î­Î½Î±Ï ÏÏÏÎ½Î¿Ï",yy:"%d ÏÏÏÎ½Î¹Î±"},dayOfMonthOrdinalParse:/\d{1,2}Î·/,ordinal:"%dÎ·",week:{dow:1,doy:4}}),n.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}}),n.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),n.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}}),n.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}}),n.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),n.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}}),n.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aÅ­gusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aÅ­g_sep_okt_nov_dec".split("_"),weekdays:"dimanÄo_lundo_mardo_merkredo_ÄµaÅ­do_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ÄµaÅ­_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_Äµa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[HodiaÅ­ je] LT",nextDay:"[MorgaÅ­ je] LT",nextWeek:"dddd [je] LT",lastDay:"[HieraÅ­ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaÅ­ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}});var ga="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),Ya="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),ka=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],va=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;n.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return e?/-MMM-/.test(t)?Ya[e.month()]:ga[e.month()]:ga},monthsRegex:va,monthsShortRegex:va,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:ka,longMonthsParse:ka,shortMonthsParse:ka,weekdays:"domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado".split("_"),weekdaysShort:"dom._lun._mar._miÃ©._jue._vie._sÃ¡b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[maÃ±ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un dÃ­a",dd:"%d dÃ­as",M:"un mes",MM:"%d meses",y:"un aÃ±o",yy:"%d aÃ±os"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}});var Da="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),wa="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");n.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return e?/-MMM-/.test(t)?wa[e.month()]:Da[e.month()]:Da},monthsParseExact:!0,weekdays:"domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado".split("_"),weekdaysShort:"dom._lun._mar._miÃ©._jue._vie._sÃ¡b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"MMMM [de] D [de] YYYY",LLL:"MMMM [de] D [de] YYYY h:mm A",LLLL:"dddd, MMMM [de] D [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[maÃ±ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un dÃ­a",dd:"%d dÃ­as",M:"un mes",MM:"%d meses",y:"un aÃ±o",yy:"%d aÃ±os"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:0,doy:6}});var Ta="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),ba="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),Sa=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],xa=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;function Ha(e,t,n,a){var r={s:["mÃµne sekundi","mÃµni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["Ã¼he minuti","Ã¼ks minut"],mm:[e+" minuti",e+" minutit"],h:["Ã¼he tunni","tund aega","Ã¼ks tund"],hh:[e+" tunni",e+" tundi"],d:["Ã¼he pÃ¤eva","Ã¼ks pÃ¤ev"],M:["kuu aja","kuu aega","Ã¼ks kuu"],MM:[e+" kuu",e+" kuud"],y:["Ã¼he aasta","aasta","Ã¼ks aasta"],yy:[e+" aasta",e+" aastat"]};return t?r[n][2]?r[n][2]:r[n][1]:a?r[n][0]:r[n][1]}n.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,t){return e?/-MMM-/.test(t)?ba[e.month()]:Ta[e.month()]:Ta},monthsRegex:xa,monthsShortRegex:xa,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:Sa,longMonthsParse:Sa,shortMonthsParse:Sa,weekdays:"domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado".split("_"),weekdaysShort:"dom._lun._mar._miÃ©._jue._vie._sÃ¡b.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[maÃ±ana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un dÃ­a",dd:"%d dÃ­as",M:"un mes",MM:"%d meses",y:"un aÃ±o",yy:"%d aÃ±os"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}}),n.defineLocale("et",{months:"jaanuar_veebruar_mÃ¤rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_mÃ¤rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pÃ¼hapÃ¤ev_esmaspÃ¤ev_teisipÃ¤ev_kolmapÃ¤ev_neljapÃ¤ev_reede_laupÃ¤ev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[TÃ¤na,] LT",nextDay:"[Homme,] LT",nextWeek:"[JÃ¤rgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pÃ¤rast",past:"%s tagasi",s:Ha,ss:Ha,m:Ha,mm:Ha,h:Ha,hh:Ha,d:Ha,dd:"%d pÃ¤eva",M:Ha,MM:Ha,y:Ha,yy:Ha},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var ja={1:"Û±",2:"Û²",3:"Û³",4:"Û´",5:"Ûµ",6:"Û¶",7:"Û·",8:"Û¸",9:"Û¹",0:"Û°"},Pa={"Û±":"1","Û²":"2","Û³":"3","Û´":"4","Ûµ":"5","Û¶":"6","Û·":"7","Û¸":"8","Û¹":"9","Û°":"0"};n.defineLocale("fa",{months:"ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±".split("_"),monthsShort:"ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±".split("_"),weekdays:"ÛÚ©âØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³ÙâØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬âØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù".split("_"),weekdaysShort:"ÛÚ©âØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³ÙâØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬âØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù".split("_"),weekdaysMin:"Û_Ø¯_Ø³_Ú_Ù¾_Ø¬_Ø´".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ÙØ¨Ù Ø§Ø² Ø¸ÙØ±|Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±/,isPM:function(e){return/Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±/.test(e)},meridiem:function(e,t,n){return e<12?"ÙØ¨Ù Ø§Ø² Ø¸ÙØ±":"Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±"},calendar:{sameDay:"[Ø§ÙØ±ÙØ² Ø³Ø§Ø¹Øª] LT",nextDay:"[ÙØ±Ø¯Ø§ Ø³Ø§Ø¹Øª] LT",nextWeek:"dddd [Ø³Ø§Ø¹Øª] LT",lastDay:"[Ø¯ÛØ±ÙØ² Ø³Ø§Ø¹Øª] LT",lastWeek:"dddd [Ù¾ÛØ´] [Ø³Ø§Ø¹Øª] LT",sameElse:"L"},relativeTime:{future:"Ø¯Ø± %s",past:"%s Ù¾ÛØ´",s:"ÚÙØ¯ Ø«Ø§ÙÛÙ",ss:"Ø«Ø§ÙÛÙ d%",m:"ÛÚ© Ø¯ÙÛÙÙ",mm:"%d Ø¯ÙÛÙÙ",h:"ÛÚ© Ø³Ø§Ø¹Øª",hh:"%d Ø³Ø§Ø¹Øª",d:"ÛÚ© Ø±ÙØ²",dd:"%d Ø±ÙØ²",M:"ÛÚ© ÙØ§Ù",MM:"%d ÙØ§Ù",y:"ÛÚ© Ø³Ø§Ù",yy:"%d Ø³Ø§Ù"},preparse:function(e){return e.replace(/[Û°-Û¹]/g,function(e){return Pa[e]}).replace(/Ø/g,",")},postformat:function(e){return e.replace(/\d/g,function(e){return ja[e]}).replace(/,/g,"Ø")},dayOfMonthOrdinalParse:/\d{1,2}Ù/,ordinal:"%dÙ",week:{dow:6,doy:12}});var Ea="nolla yksi kaksi kolme neljÃ¤ viisi kuusi seitsemÃ¤n kahdeksan yhdeksÃ¤n".split(" "),Oa=["nolla","yhden","kahden","kolmen","neljÃ¤n","viiden","kuuden",Ea[7],Ea[8],Ea[9]];function Aa(e,t,n,a){var r="";switch(n){case"s":return a?"muutaman sekunnin":"muutama sekunti";case"ss":return a?"sekunnin":"sekuntia";case"m":return a?"minuutin":"minuutti";case"mm":r=a?"minuutin":"minuuttia";break;case"h":return a?"tunnin":"tunti";case"hh":r=a?"tunnin":"tuntia";break;case"d":return a?"pÃ¤ivÃ¤n":"pÃ¤ivÃ¤";case"dd":r=a?"pÃ¤ivÃ¤n":"pÃ¤ivÃ¤Ã¤";break;case"M":return a?"kuukauden":"kuukausi";case"MM":r=a?"kuukauden":"kuukautta";break;case"y":return a?"vuoden":"vuosi";case"yy":r=a?"vuoden":"vuotta"}return r=function(e,t){return e<10?t?Oa[e]:Ea[e]:e}(e,a)+" "+r}n.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesÃ¤kuu_heinÃ¤kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesÃ¤_heinÃ¤_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tÃ¤nÃ¤Ã¤n] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s pÃ¤Ã¤stÃ¤",past:"%s sitten",s:Aa,ss:Aa,m:Aa,mm:Aa,h:Aa,hh:Aa,d:Aa,dd:Aa,M:Aa,MM:Aa,y:Aa,yy:Aa},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("fo",{months:"januar_februar_mars_aprÃ­l_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mÃ¡nadagur_tÃ½sdagur_mikudagur_hÃ³sdagur_frÃ­ggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mÃ¡n_tÃ½s_mik_hÃ³s_frÃ­_ley".split("_"),weekdaysMin:"su_mÃ¡_tÃ½_mi_hÃ³_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Ã dag kl.] LT",nextDay:"[Ã morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Ã gjÃ¡r kl.] LT",lastWeek:"[sÃ­Ã°stu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s sÃ­Ã°ani",s:"fÃ¡ sekund",ss:"%d sekundir",m:"ein minutt",mm:"%d minuttir",h:"ein tÃ­mi",hh:"%d tÃ­mar",d:"ein dagur",dd:"%d dagar",M:"ein mÃ¡naÃ°i",MM:"%d mÃ¡naÃ°ir",y:"eitt Ã¡r",yy:"%d Ã¡r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("fr-ca",{months:"janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre".split("_"),monthsShort:"janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourdâhui Ã ] LT",nextDay:"[Demain Ã ] LT",nextWeek:"dddd [Ã ] LT",lastDay:"[Hier Ã ] LT",lastWeek:"dddd [dernier Ã ] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}}),n.defineLocale("fr-ch",{months:"janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre".split("_"),monthsShort:"janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourdâhui Ã ] LT",nextDay:"[Demain Ã ] LT",nextWeek:"dddd [Ã ] LT",lastDay:"[Hier Ã ] LT",lastWeek:"dddd [dernier Ã ] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}}),n.defineLocale("fr",{months:"janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre".split("_"),monthsShort:"janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourdâhui Ã ] LT",nextDay:"[Demain Ã ] LT",nextWeek:"dddd [Ã ] LT",lastDay:"[Hier Ã ] LT",lastWeek:"dddd [dernier Ã ] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}});var Wa="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),Ca="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");n.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,t){return e?/-MMM-/.test(t)?Ca[e.month()]:Wa[e.month()]:Wa},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[Ã´frÃ»ne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minÃºt",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});function Na(e,t,n,a){var r={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka horan","ek hor"],hh:[e+" horanim",e+" horam"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?r[n][0]:r[n][1]}n.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am MÃ rt","An Giblean","An CÃ¨itean","An t-Ãgmhios","An t-Iuchar","An LÃ¹nastal","An t-Sultain","An DÃ mhair","An t-Samhain","An DÃ¹bhlachd"],monthsShort:["Faoi","Gear","MÃ rt","Gibl","CÃ¨it","Ãgmh","Iuch","LÃ¹n","Sult","DÃ mh","Samh","DÃ¹bh"],monthsParseExact:!0,weekdays:["DidÃ²mhnaich","Diluain","DimÃ irt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["DÃ²","Lu","MÃ ","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-mÃ ireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dÃ¨ aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mÃ¬os",MM:"%d mÃ¬osan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}}),n.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuÃ±o_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuÃ±._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mÃ©rcores_xoves_venres_sÃ¡bado".split("_"),weekdaysShort:"dom._lun._mar._mÃ©r._xov._ven._sÃ¡b.".split("_"),weekdaysMin:"do_lu_ma_mÃ©_xo_ve_sÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"Ã¡s":"Ã¡")+"] LT"},nextDay:function(){return"[maÃ±Ã¡ "+(1!==this.hours()?"Ã¡s":"Ã¡")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"Ã¡s":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"Ã¡":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"Ã¡s":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un dÃ­a",dd:"%d dÃ­as",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}}),n.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:Na,ss:Na,m:Na,mm:Na,h:Na,hh:Na,d:Na,dd:Na,M:Na,MM:Na,y:Na,yy:Na},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}});var Fa={1:"à«§",2:"à«¨",3:"à«©",4:"à«ª",5:"à««",6:"à«¬",7:"à«­",8:"à«®",9:"à«¯",0:"à«¦"},Ia={"à«§":"1","à«¨":"2","à«©":"3","à«ª":"4","à««":"5","à«¬":"6","à«­":"7","à«®":"8","à«¯":"9","à«¦":"0"};n.defineLocale("gu",{months:"àªàª¾àª¨à«àª¯à«àªàª°à«_àª«à«àª¬à«àª°à«àªàª°à«_àª®àª¾àª°à«àª_àªàªªà«àª°àª¿àª²_àª®à«_àªà«àª¨_àªà«àª²àª¾àª_àªàªàª¸à«àª_àª¸àªªà«àªà«àª®à«àª¬àª°_àªàªà«àªà«àª¬àª°_àª¨àªµà«àª®à«àª¬àª°_àª¡àª¿àª¸à«àª®à«àª¬àª°".split("_"),monthsShort:"àªàª¾àª¨à«àª¯à«._àª«à«àª¬à«àª°à«._àª®àª¾àª°à«àª_àªàªªà«àª°àª¿._àª®à«_àªà«àª¨_àªà«àª²àª¾._àªàª._àª¸àªªà«àªà«._àªàªà«àªà«._àª¨àªµà«._àª¡àª¿àª¸à«.".split("_"),monthsParseExact:!0,weekdays:"àª°àªµàª¿àªµàª¾àª°_àª¸à«àª®àªµàª¾àª°_àª®àªàªàª³àªµàª¾àª°_àª¬à«àª§à«àªµàª¾àª°_àªà«àª°à«àªµàª¾àª°_àª¶à«àªà«àª°àªµàª¾àª°_àª¶àª¨àª¿àªµàª¾àª°".split("_"),weekdaysShort:"àª°àªµàª¿_àª¸à«àª®_àª®àªàªàª³_àª¬à«àª§à«_àªà«àª°à«_àª¶à«àªà«àª°_àª¶àª¨àª¿".split("_"),weekdaysMin:"àª°_àª¸à«_àª®àª_àª¬à«_àªà«_àª¶à«_àª¶".split("_"),longDateFormat:{LT:"A h:mm àªµàª¾àªà«àª¯à«",LTS:"A h:mm:ss àªµàª¾àªà«àª¯à«",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm àªµàª¾àªà«àª¯à«",LLLL:"dddd, D MMMM YYYY, A h:mm àªµàª¾àªà«àª¯à«"},calendar:{sameDay:"[àªàª] LT",nextDay:"[àªàª¾àª²à«] LT",nextWeek:"dddd, LT",lastDay:"[àªàªàªàª¾àª²à«] LT",lastWeek:"[àªªàª¾àªàª²àª¾] dddd, LT",sameElse:"L"},relativeTime:{future:"%s àª®àª¾",past:"%s àªªà«àª¹àª²àª¾",s:"àªàª®à«àª àªªàª³à«",ss:"%d àª¸à«àªàªàª¡",m:"àªàª àª®àª¿àª¨àª¿àª",mm:"%d àª®àª¿àª¨àª¿àª",h:"àªàª àªàª²àª¾àª",hh:"%d àªàª²àª¾àª",d:"àªàª àª¦àª¿àªµàª¸",dd:"%d àª¦àª¿àªµàª¸",M:"àªàª àª®àª¹àª¿àª¨à«",MM:"%d àª®àª¹àª¿àª¨à«",y:"àªàª àªµàª°à«àª·",yy:"%d àªµàª°à«àª·"},preparse:function(e){return e.replace(/[à«§à«¨à«©à«ªà««à«¬à«­à«®à«¯à«¦]/g,function(e){return Ia[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Fa[e]})},meridiemParse:/àª°àª¾àª¤|àª¬àªªà«àª°|àª¸àªµàª¾àª°|àª¸àª¾àªàª/,meridiemHour:function(e,t){return 12===e&&(e=0),"àª°àª¾àª¤"===t?e<4?e:e+12:"àª¸àªµàª¾àª°"===t?e:"àª¬àªªà«àª°"===t?e>=10?e:e+12:"àª¸àª¾àªàª"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"àª°àª¾àª¤":e<10?"àª¸àªµàª¾àª°":e<17?"àª¬àªªà«àª°":e<20?"àª¸àª¾àªàª":"àª°àª¾àª¤"},week:{dow:0,doy:6}}),n.defineLocale("he",{months:"×× ×××¨_×¤××¨×××¨_××¨×¥_××¤×¨××_×××_××× ×_××××_×××××¡×_×¡×¤××××¨_×××§××××¨_× ×××××¨_××¦×××¨".split("_"),monthsShort:"×× ××³_×¤××¨×³_××¨×¥_××¤×¨×³_×××_××× ×_××××_××××³_×¡×¤××³_×××§×³_× ×××³_××¦××³".split("_"),weekdays:"×¨××©××_×©× ×_×©×××©×_×¨×××¢×_××××©×_×©××©×_×©××ª".split("_"),weekdaysShort:"××³_××³_××³_××³_××³_××³_×©×³".split("_"),weekdaysMin:"×_×_×_×_×_×_×©".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [×]MMMM YYYY",LLL:"D [×]MMMM YYYY HH:mm",LLLL:"dddd, D [×]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[×××× ×Ö¾]LT",nextDay:"[×××¨ ×Ö¾]LT",nextWeek:"dddd [××©×¢×] LT",lastDay:"[××ª××× ×Ö¾]LT",lastWeek:"[××××] dddd [××××¨×× ××©×¢×] LT",sameElse:"L"},relativeTime:{future:"××¢×× %s",past:"××¤× × %s",s:"××¡×¤×¨ ×©× ×××ª",ss:"%d ×©× ×××ª",m:"××§×",mm:"%d ××§××ª",h:"×©×¢×",hh:function(e){return 2===e?"×©×¢×ª×××":e+" ×©×¢××ª"},d:"×××",dd:function(e){return 2===e?"××××××":e+" ××××"},M:"××××©",MM:function(e){return 2===e?"××××©×××":e+" ××××©××"},y:"×©× ×",yy:function(e){return 2===e?"×©× ×ª×××":e%10==0&&10!==e?e+" ×©× ×":e+" ×©× ××"}},meridiemParse:/×××"×¦|××¤× ×"×¦|×××¨× ××¦××¨×××|××¤× × ××¦××¨×××|××¤× ××ª ×××§×¨|××××§×¨|××¢×¨×/i,isPM:function(e){return/^(×××"×¦|×××¨× ××¦××¨×××|××¢×¨×)$/.test(e)},meridiem:function(e,t,n){return e<5?"××¤× ××ª ×××§×¨":e<10?"××××§×¨":e<12?n?'××¤× ×"×¦':"××¤× × ××¦××¨×××":e<18?n?'×××"×¦':"×××¨× ××¦××¨×××":"××¢×¨×"}});var za={1:"à¥§",2:"à¥¨",3:"à¥©",4:"à¥ª",5:"à¥«",6:"à¥¬",7:"à¥­",8:"à¥®",9:"à¥¯",0:"à¥¦"},Ra={"à¥§":"1","à¥¨":"2","à¥©":"3","à¥ª":"4","à¥«":"5","à¥¬":"6","à¥­":"7","à¥®":"8","à¥¯":"9","à¥¦":"0"};function Ja(e,t,n){var a=e+" ";switch(n){case"ss":return a+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return a+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return a+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return a+=1===e?"dan":"dana";case"MM":return a+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return a+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}n.defineLocale("hi",{months:"à¤à¤¨à¤µà¤°à¥_à¤«à¤¼à¤°à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤¸à¥à¤¤_à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¤µà¤®à¥à¤¬à¤°_à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°".split("_"),monthsShort:"à¤à¤¨._à¤«à¤¼à¤°._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²._à¤à¤._à¤¸à¤¿à¤¤._à¤à¤à¥à¤à¥._à¤¨à¤µ._à¤¦à¤¿à¤¸.".split("_"),monthsParseExact:!0,weekdays:"à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤²à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°".split("_"),weekdaysShort:"à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤²_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿".split("_"),weekdaysMin:"à¤°_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤à¥_à¤¶à¥_à¤¶".split("_"),longDateFormat:{LT:"A h:mm à¤¬à¤à¥",LTS:"A h:mm:ss à¤¬à¤à¥",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm à¤¬à¤à¥",LLLL:"dddd, D MMMM YYYY, A h:mm à¤¬à¤à¥"},calendar:{sameDay:"[à¤à¤] LT",nextDay:"[à¤à¤²] LT",nextWeek:"dddd, LT",lastDay:"[à¤à¤²] LT",lastWeek:"[à¤ªà¤¿à¤à¤²à¥] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à¤®à¥à¤",past:"%s à¤ªà¤¹à¤²à¥",s:"à¤à¥à¤ à¤¹à¥ à¤à¥à¤·à¤£",ss:"%d à¤¸à¥à¤à¤à¤¡",m:"à¤à¤ à¤®à¤¿à¤¨à¤",mm:"%d à¤®à¤¿à¤¨à¤",h:"à¤à¤ à¤à¤à¤à¤¾",hh:"%d à¤à¤à¤à¥",d:"à¤à¤ à¤¦à¤¿à¤¨",dd:"%d à¤¦à¤¿à¤¨",M:"à¤à¤ à¤®à¤¹à¥à¤¨à¥",MM:"%d à¤®à¤¹à¥à¤¨à¥",y:"à¤à¤ à¤µà¤°à¥à¤·",yy:"%d à¤µà¤°à¥à¤·"},preparse:function(e){return e.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g,function(e){return Ra[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return za[e]})},meridiemParse:/à¤°à¤¾à¤¤|à¤¸à¥à¤¬à¤¹|à¤¦à¥à¤ªà¤¹à¤°|à¤¶à¤¾à¤®/,meridiemHour:function(e,t){return 12===e&&(e=0),"à¤°à¤¾à¤¤"===t?e<4?e:e+12:"à¤¸à¥à¤¬à¤¹"===t?e:"à¤¦à¥à¤ªà¤¹à¤°"===t?e>=10?e:e+12:"à¤¶à¤¾à¤®"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"à¤°à¤¾à¤¤":e<10?"à¤¸à¥à¤¬à¤¹":e<17?"à¤¦à¥à¤ªà¤¹à¤°":e<20?"à¤¶à¤¾à¤®":"à¤°à¤¾à¤¤"},week:{dow:0,doy:6}}),n.defineLocale("hr",{months:{format:"sijeÄnja_veljaÄe_oÅ¾ujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"sijeÄanj_veljaÄa_oÅ¾ujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._oÅ¾u._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._Äet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_Äe_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juÄer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[proÅ¡lu] dddd [u] LT";case 6:return"[proÅ¡le] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[proÅ¡li] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:Ja,m:Ja,mm:Ja,h:Ja,hh:Ja,d:"dan",dd:Ja,M:"mjesec",MM:Ja,y:"godinu",yy:Ja},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var $a="vasÃ¡rnap hÃ©tfÅn kedden szerdÃ¡n csÃ¼tÃ¶rtÃ¶kÃ¶n pÃ©nteken szombaton".split(" ");function Ba(e,t,n,a){var r=e;switch(n){case"s":return a||t?"nÃ©hÃ¡ny mÃ¡sodperc":"nÃ©hÃ¡ny mÃ¡sodperce";case"ss":return r+(a||t)?" mÃ¡sodperc":" mÃ¡sodperce";case"m":return"egy"+(a||t?" perc":" perce");case"mm":return r+(a||t?" perc":" perce");case"h":return"egy"+(a||t?" Ã³ra":" Ã³rÃ¡ja");case"hh":return r+(a||t?" Ã³ra":" Ã³rÃ¡ja");case"d":return"egy"+(a||t?" nap":" napja");case"dd":return r+(a||t?" nap":" napja");case"M":return"egy"+(a||t?" hÃ³nap":" hÃ³napja");case"MM":return r+(a||t?" hÃ³nap":" hÃ³napja");case"y":return"egy"+(a||t?" Ã©v":" Ã©ve");case"yy":return r+(a||t?" Ã©v":" Ã©ve")}return""}function qa(e){return(e?"":"[mÃºlt] ")+"["+$a[this.day()]+"] LT[-kor]"}function Ua(e){return e%100==11||e%10!=1}function Va(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"nokkrar sekÃºndur":"nokkrum sekÃºndum";case"ss":return Ua(e)?r+(t||a?"sekÃºndur":"sekÃºndum"):r+"sekÃºnda";case"m":return t?"mÃ­nÃºta":"mÃ­nÃºtu";case"mm":return Ua(e)?r+(t||a?"mÃ­nÃºtur":"mÃ­nÃºtum"):t?r+"mÃ­nÃºta":r+"mÃ­nÃºtu";case"hh":return Ua(e)?r+(t||a?"klukkustundir":"klukkustundum"):r+"klukkustund";case"d":return t?"dagur":a?"dag":"degi";case"dd":return Ua(e)?t?r+"dagar":r+(a?"daga":"dÃ¶gum"):t?r+"dagur":r+(a?"dag":"degi");case"M":return t?"mÃ¡nuÃ°ur":a?"mÃ¡nuÃ°":"mÃ¡nuÃ°i";case"MM":return Ua(e)?t?r+"mÃ¡nuÃ°ir":r+(a?"mÃ¡nuÃ°i":"mÃ¡nuÃ°um"):t?r+"mÃ¡nuÃ°ur":r+(a?"mÃ¡nuÃ°":"mÃ¡nuÃ°i");case"y":return t||a?"Ã¡r":"Ã¡ri";case"yy":return Ua(e)?r+(t||a?"Ã¡r":"Ã¡rum"):r+(t||a?"Ã¡r":"Ã¡ri")}}n.defineLocale("hu",{months:"januÃ¡r_februÃ¡r_mÃ¡rcius_Ã¡prilis_mÃ¡jus_jÃºnius_jÃºlius_augusztus_szeptember_oktÃ³ber_november_december".split("_"),monthsShort:"jan_feb_mÃ¡rc_Ã¡pr_mÃ¡j_jÃºn_jÃºl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasÃ¡rnap_hÃ©tfÅ_kedd_szerda_csÃ¼tÃ¶rtÃ¶k_pÃ©ntek_szombat".split("_"),weekdaysShort:"vas_hÃ©t_kedd_sze_csÃ¼t_pÃ©n_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return qa.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return qa.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s mÃºlva",past:"%s",s:Ba,ss:Ba,m:Ba,mm:Ba,h:Ba,hh:Ba,d:Ba,dd:Ba,M:Ba,MM:Ba,y:Ba,yy:Ba},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("hy-am",{months:{format:"Õ°Õ¸ÖÕ¶Õ¾Õ¡ÖÕ«_ÖÕ¥Õ¿ÖÕ¾Õ¡ÖÕ«_Õ´Õ¡ÖÕ¿Õ«_Õ¡ÕºÖÕ«Õ¬Õ«_Õ´Õ¡ÕµÕ«Õ½Õ«_Õ°Õ¸ÖÕ¶Õ«Õ½Õ«_Õ°Õ¸ÖÕ¬Õ«Õ½Õ«_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½Õ«_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥ÖÕ«_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥ÖÕ«_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥ÖÕ«_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥ÖÕ«".split("_"),standalone:"Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö_ÖÕ¥Õ¿ÖÕ¾Õ¡Ö_Õ´Õ¡ÖÕ¿_Õ¡ÕºÖÕ«Õ¬_Õ´Õ¡ÕµÕ«Õ½_Õ°Õ¸ÖÕ¶Õ«Õ½_Õ°Õ¸ÖÕ¬Õ«Õ½_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö".split("_")},monthsShort:"Õ°Õ¶Õ¾_ÖÕ¿Ö_Õ´ÖÕ¿_Õ¡ÕºÖ_Õ´ÕµÕ½_Õ°Õ¶Õ½_Õ°Õ¬Õ½_ÖÕ£Õ½_Õ½ÕºÕ¿_Õ°Õ¯Õ¿_Õ¶Õ´Õ¢_Õ¤Õ¯Õ¿".split("_"),weekdays:"Õ¯Õ«ÖÕ¡Õ¯Õ«_Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«_Õ¸ÖÖÕ¢Õ¡Õ©_Õ·Õ¡Õ¢Õ¡Õ©".split("_"),weekdaysShort:"Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©".split("_"),weekdaysMin:"Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY Õ©.",LLL:"D MMMM YYYY Õ©., HH:mm",LLLL:"dddd, D MMMM YYYY Õ©., HH:mm"},calendar:{sameDay:"[Õ¡ÕµÕ½ÖÖ] LT",nextDay:"[Õ¾Õ¡Õ²Õ¨] LT",lastDay:"[Õ¥ÖÕ¥Õ¯] LT",nextWeek:function(){return"dddd [ÖÖÕ¨ ÕªÕ¡Õ´Õ¨] LT"},lastWeek:function(){return"[Õ¡Õ¶ÖÕ¡Õ®] dddd [ÖÖÕ¨ ÕªÕ¡Õ´Õ¨] LT"},sameElse:"L"},relativeTime:{future:"%s Õ°Õ¥Õ¿Õ¸",past:"%s Õ¡Õ¼Õ¡Õ»",s:"Õ´Õ« ÖÕ¡Õ¶Õ« Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶",ss:"%d Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶",m:"ÖÕ¸ÕºÕ¥",mm:"%d ÖÕ¸ÕºÕ¥",h:"ÕªÕ¡Õ´",hh:"%d ÕªÕ¡Õ´",d:"ÖÖ",dd:"%d ÖÖ",M:"Õ¡Õ´Õ«Õ½",MM:"%d Õ¡Õ´Õ«Õ½",y:"Õ¿Õ¡ÖÕ«",yy:"%d Õ¿Õ¡ÖÕ«"},meridiemParse:/Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡|Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡|ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡|Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶/,isPM:function(e){return/^(ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡|Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶)$/.test(e)},meridiem:function(e){return e<4?"Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡":e<12?"Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡":e<17?"ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡":"Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(Õ«Õ¶|ÖÕ¤)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-Õ«Õ¶":e+"-ÖÕ¤";default:return e}},week:{dow:1,doy:7}}),n.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),n.defineLocale("is",{months:"janÃºar_febrÃºar_mars_aprÃ­l_maÃ­_jÃºnÃ­_jÃºlÃ­_Ã¡gÃºst_september_oktÃ³ber_nÃ³vember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maÃ­_jÃºn_jÃºl_Ã¡gÃº_sep_okt_nÃ³v_des".split("_"),weekdays:"sunnudagur_mÃ¡nudagur_Ã¾riÃ°judagur_miÃ°vikudagur_fimmtudagur_fÃ¶studagur_laugardagur".split("_"),weekdaysShort:"sun_mÃ¡n_Ã¾ri_miÃ°_fim_fÃ¶s_lau".split("_"),weekdaysMin:"Su_MÃ¡_Ãr_Mi_Fi_FÃ¶_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[Ã­ dag kl.] LT",nextDay:"[Ã¡ morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Ã­ gÃ¦r kl.] LT",lastWeek:"[sÃ­Ã°asta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s sÃ­Ã°an",s:Va,ss:Va,m:Va,mm:Va,h:"klukkustund",hh:Va,d:Va,dd:Va,M:Va,MM:Va,y:Va,yy:Va},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedÃ¬_martedÃ¬_mercoledÃ¬_giovedÃ¬_venerdÃ¬_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}}),n.defineLocale("ja",{months:"1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),monthsShort:"1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),weekdays:"æ¥ææ¥_æææ¥_ç«ææ¥_æ°´ææ¥_æ¨ææ¥_éææ¥_åææ¥".split("_"),weekdaysShort:"æ¥_æ_ç«_æ°´_æ¨_é_å".split("_"),weekdaysMin:"æ¥_æ_ç«_æ°´_æ¨_é_å".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYYå¹´MæDæ¥",LLL:"YYYYå¹´MæDæ¥ HH:mm",LLLL:"YYYYå¹´MæDæ¥ dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYYå¹´MæDæ¥",lll:"YYYYå¹´MæDæ¥ HH:mm",llll:"YYYYå¹´MæDæ¥(ddd) HH:mm"},meridiemParse:/åå|åå¾/i,isPM:function(e){return"åå¾"===e},meridiem:function(e,t,n){return e<12?"åå":"åå¾"},calendar:{sameDay:"[ä»æ¥] LT",nextDay:"[ææ¥] LT",nextWeek:function(e){return e.week()<this.week()?"[æ¥é±]dddd LT":"dddd LT"},lastDay:"[æ¨æ¥] LT",lastWeek:function(e){return this.week()<e.week()?"[åé±]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}æ¥/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"æ¥";default:return e}},relativeTime:{future:"%så¾",past:"%så",s:"æ°ç§",ss:"%dç§",m:"1å",mm:"%då",h:"1æé",hh:"%dæé",d:"1æ¥",dd:"%dæ¥",M:"1ã¶æ",MM:"%dã¶æ",y:"1å¹´",yy:"%då¹´"}}),n.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}}),n.defineLocale("ka",{months:{standalone:"áááááá á_ááááá áááá_ááá á¢á_ááá ááá_áááá¡á_ááááá¡á_ááááá¡á_ááááá¡á¢á_á¡áá¥á¢ááááá á_áá¥á¢ááááá á_ááááááá á_áááááááá á".split("_"),format:"áááááá á¡_ááááá áááá¡_ááá á¢á¡_ááá áááá¡_áááá¡á¡_ááááá¡á¡_ááááá¡á¡_ááááá¡á¢á¡_á¡áá¥á¢ááááá á¡_áá¥á¢ááááá á¡_ááááááá á¡_áááááááá á¡".split("_")},monthsShort:"ááá_ááá_ááá _ááá _ááá_ááá_ááá_ááá_á¡áá¥_áá¥á¢_ááá_ááá".split("_"),weekdays:{standalone:"áááá á_áá á¨ááááá_á¡ááá¨ááááá_ááá®á¨ááááá_á®á£áá¨ááááá_ááá áá¡áááá_á¨ááááá".split("_"),format:"áááá áá¡_áá á¨ááááá¡_á¡ááá¨ááááá¡_ááá®á¨ááááá¡_á®á£áá¨ááááá¡_ááá áá¡áááá¡_á¨ááááá¡".split("_"),isFormat:/(á¬ááá|á¨ááááá)/},weekdaysShort:"ááá_áá á¨_á¡áá_ááá®_á®á£á_ááá _á¨áá".split("_"),weekdaysMin:"áá_áá _á¡á_áá_á®á£_áá_á¨á".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[áá¦áá¡] LT[-áá]",nextDay:"[á®ááá] LT[-áá]",lastDay:"[áá£á¨áá] LT[-áá]",nextWeek:"[á¨ááááá] dddd LT[-áá]",lastWeek:"[á¬ááá] dddd LT-áá",sameElse:"L"},relativeTime:{future:function(e){return/(á¬ááá|á¬á£áá|á¡áááá|á¬ááá)/.test(e)?e.replace(/á$/,"á¨á"):e+"á¨á"},past:function(e){return/(á¬ááá|á¬á£áá|á¡áááá|áá¦á|ááá)/.test(e)?e.replace(/(á|á)$/,"áá¡ á¬áá"):/á¬ááá/.test(e)?e.replace(/á¬ááá$/,"á¬ááá¡ á¬áá"):void 0},s:"á áááááááá á¬ááá",ss:"%d á¬ááá",m:"á¬á£áá",mm:"%d á¬á£áá",h:"á¡áááá",hh:"%d á¡áááá",d:"áá¦á",dd:"%d áá¦á",M:"ááá",MM:"%d ááá",y:"á¬ááá",yy:"%d á¬ááá"},dayOfMonthOrdinalParse:/0|1-áá|áá-\d{1,2}|\d{1,2}-á/,ordinal:function(e){return 0===e?e:1===e?e+"-áá":e<20||e<=100&&e%20==0||e%100==0?"áá-"+e:e+"-á"},week:{dow:1,doy:7}});var Ga={0:"-ÑÑ",1:"-ÑÑ",2:"-ÑÑ",3:"-ÑÑ",4:"-ÑÑ",5:"-ÑÑ",6:"-ÑÑ",7:"-ÑÑ",8:"-ÑÑ",9:"-ÑÑ",10:"-ÑÑ",20:"-ÑÑ",30:"-ÑÑ",40:"-ÑÑ",50:"-ÑÑ",60:"-ÑÑ",70:"-ÑÑ",80:"-ÑÑ",90:"-ÑÑ",100:"-ÑÑ"};n.defineLocale("kk",{months:"ÒÐ°Ò£ÑÐ°Ñ_Ð°ÒÐ¿Ð°Ð½_Ð½Ð°ÑÑÑÐ·_ÑÓÑÑÑ_Ð¼Ð°Ð¼ÑÑ_Ð¼Ð°ÑÑÑÐ¼_ÑÑÐ»Ð´Ðµ_ÑÐ°Ð¼ÑÐ·_ÒÑÑÐºÒ¯Ð¹ÐµÐº_ÒÐ°Ð·Ð°Ð½_ÒÐ°ÑÐ°ÑÐ°_Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½".split("_"),monthsShort:"ÒÐ°Ò£_Ð°ÒÐ¿_Ð½Ð°Ñ_ÑÓÑ_Ð¼Ð°Ð¼_Ð¼Ð°Ñ_ÑÑÐ»_ÑÐ°Ð¼_ÒÑÑ_ÒÐ°Ð·_ÒÐ°Ñ_Ð¶ÐµÐ»".split("_"),weekdays:"Ð¶ÐµÐºÑÐµÐ½Ð±Ñ_Ð´Ò¯Ð¹ÑÐµÐ½Ð±Ñ_ÑÐµÐ¹ÑÐµÐ½Ð±Ñ_ÑÓÑÑÐµÐ½Ð±Ñ_Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ_Ð¶Ò±Ð¼Ð°_ÑÐµÐ½Ð±Ñ".split("_"),weekdaysShort:"Ð¶ÐµÐº_Ð´Ò¯Ð¹_ÑÐµÐ¹_ÑÓÑ_Ð±ÐµÐ¹_Ð¶Ò±Ð¼_ÑÐµÐ½".split("_"),weekdaysMin:"Ð¶Ðº_Ð´Ð¹_ÑÐ¹_ÑÑ_Ð±Ð¹_Ð¶Ð¼_ÑÐ½".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ÐÒ¯Ð³ÑÐ½ ÑÐ°ÒÐ°Ñ] LT",nextDay:"[ÐÑÑÐµÒ£ ÑÐ°ÒÐ°Ñ] LT",nextWeek:"dddd [ÑÐ°ÒÐ°Ñ] LT",lastDay:"[ÐÐµÑÐµ ÑÐ°ÒÐ°Ñ] LT",lastWeek:"[Ó¨ÑÐºÐµÐ½ Ð°Ð¿ÑÐ°Ð½ÑÒ£] dddd [ÑÐ°ÒÐ°Ñ] LT",sameElse:"L"},relativeTime:{future:"%s ÑÑÑÐ½Ð´Ðµ",past:"%s Ð±Ò±ÑÑÐ½",s:"Ð±ÑÑÐ½ÐµÑÐµ ÑÐµÐºÑÐ½Ð´",ss:"%d ÑÐµÐºÑÐ½Ð´",m:"Ð±ÑÑ Ð¼Ð¸Ð½ÑÑ",mm:"%d Ð¼Ð¸Ð½ÑÑ",h:"Ð±ÑÑ ÑÐ°ÒÐ°Ñ",hh:"%d ÑÐ°ÒÐ°Ñ",d:"Ð±ÑÑ ÐºÒ¯Ð½",dd:"%d ÐºÒ¯Ð½",M:"Ð±ÑÑ Ð°Ð¹",MM:"%d Ð°Ð¹",y:"Ð±ÑÑ Ð¶ÑÐ»",yy:"%d Ð¶ÑÐ»"},dayOfMonthOrdinalParse:/\d{1,2}-(ÑÑ|ÑÑ)/,ordinal:function(e){return e+(Ga[e]||Ga[e%10]||Ga[e>=100?100:null])},week:{dow:1,doy:7}});var Ka={1:"á¡",2:"á¢",3:"á£",4:"á¤",5:"á¥",6:"á¦",7:"á§",8:"á¨",9:"á©",0:"á "},Za={"á¡":"1","á¢":"2","á£":"3","á¤":"4","á¥":"5","á¦":"6","á§":"7","á¨":"8","á©":"9","á ":"0"};n.defineLocale("km",{months:"áááá¶_áá»áááá_áá¸áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼".split("_"),monthsShort:"áááá¶_áá»áááá_áá¸áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼".split("_"),weekdays:"á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá".split("_"),weekdaysShort:"á¢á¶_á_á¢_á_ááá_áá»_á".split("_"),weekdaysMin:"á¢á¶_á_á¢_á_ááá_áá»_á".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/áááá¹á|áááá¶á/,isPM:function(e){return"áááá¶á"===e},meridiem:function(e,t,n){return e<12?"áááá¹á":"áááá¶á"},calendar:{sameDay:"[ááááááá áááá] LT",nextDay:"[ááá¢áá áááá] LT",nextWeek:"dddd [áááá] LT",lastDay:"[áááá·ááá·á áááá] LT",lastWeek:"dddd [ááááá¶á ááá»á] [áááá] LT",sameElse:"L"},relativeTime:{future:"%sááá",past:"%sáá»á",s:"ááá»áááá¶ááá·áá¶áá¸",ss:"%d áá·áá¶áá¸",m:"áá½ááá¶áá¸",mm:"%d áá¶áá¸",h:"áá½ááááá",hh:"%d áááá",d:"áá½ááááá",dd:"%d áááá",M:"áá½ááá",MM:"%d áá",y:"áá½ááááá¶á",yy:"%d áááá¶á"},dayOfMonthOrdinalParse:/áá¸\d{1,2}/,ordinal:"áá¸%d",preparse:function(e){return e.replace(/[á¡á¢á£á¤á¥á¦á§á¨á©á ]/g,function(e){return Za[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ka[e]})},week:{dow:1,doy:4}});var Xa={1:"à³§",2:"à³¨",3:"à³©",4:"à³ª",5:"à³«",6:"à³¬",7:"à³­",8:"à³®",9:"à³¯",0:"à³¦"},Qa={"à³§":"1","à³¨":"2","à³©":"3","à³ª":"4","à³«":"5","à³¬":"6","à³­":"7","à³®":"8","à³¯":"9","à³¦":"0"};n.defineLocale("kn",{months:"à²à²¨à²µà²°à²¿_à²«à³à²¬à³à²°à²µà²°à²¿_à²®à²¾à²°à³à²à³_à²à²ªà³à²°à²¿à²²à³_à²®à³à³_à²à³à²¨à³_à²à³à²²à³à³_à²à²à²¸à³à²à³_à²¸à³à²ªà³à²à³à²à²¬à²°à³_à²à²à³à²à³à³à³à²¬à²°à³_à²¨à²µà³à²à²¬à²°à³_à²¡à²¿à²¸à³à²à²¬à²°à³".split("_"),monthsShort:"à²à²¨_à²«à³à²¬à³à²°_à²®à²¾à²°à³à²à³_à²à²ªà³à²°à²¿à²²à³_à²®à³à³_à²à³à²¨à³_à²à³à²²à³à³_à²à²à²¸à³à²à³_à²¸à³à²ªà³à²à³à²_à²à²à³à²à³à³à³_à²¨à²µà³à²_à²¡à²¿à²¸à³à²".split("_"),monthsParseExact:!0,weekdays:"à²­à²¾à²¨à³à²µà²¾à²°_à²¸à³à³à³à²®à²µà²¾à²°_à²®à²à²à²³à²µà²¾à²°_à²¬à³à²§à²µà²¾à²°_à²à³à²°à³à²µà²¾à²°_à²¶à³à²à³à²°à²µà²¾à²°_à²¶à²¨à²¿à²µà²¾à²°".split("_"),weekdaysShort:"à²­à²¾à²¨à³_à²¸à³à³à³à²®_à²®à²à²à²³_à²¬à³à²§_à²à³à²°à³_à²¶à³à²à³à²°_à²¶à²¨à²¿".split("_"),weekdaysMin:"à²­à²¾_à²¸à³à³à³_à²®à²_à²¬à³_à²à³_à²¶à³_à²¶".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[à²à²à²¦à³] LT",nextDay:"[à²¨à²¾à²³à³] LT",nextWeek:"dddd, LT",lastDay:"[à²¨à²¿à²¨à³à²¨à³] LT",lastWeek:"[à²à³à³à²¨à³à²¯] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à²¨à²à²¤à²°",past:"%s à²¹à²¿à²à²¦à³",s:"à²à³à²²à²µà³ à²à³à²·à²£à²à²³à³",ss:"%d à²¸à³à²à³à²à²¡à³à²à²³à³",m:"à²à²à²¦à³ à²¨à²¿à²®à²¿à²·",mm:"%d à²¨à²¿à²®à²¿à²·",h:"à²à²à²¦à³ à²à²à²à³",hh:"%d à²à²à²à³",d:"à²à²à²¦à³ à²¦à²¿à²¨",dd:"%d à²¦à²¿à²¨",M:"à²à²à²¦à³ à²¤à²¿à²à²à²³à³",MM:"%d à²¤à²¿à²à²à²³à³",y:"à²à²à²¦à³ à²µà²°à³à²·",yy:"%d à²µà²°à³à²·"},preparse:function(e){return e.replace(/[à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯à³¦]/g,function(e){return Qa[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Xa[e]})},meridiemParse:/à²°à²¾à²¤à³à²°à²¿|à²¬à³à²³à²¿à²à³à²à³|à²®à²§à³à²¯à²¾à²¹à³à²¨|à²¸à²à²à³/,meridiemHour:function(e,t){return 12===e&&(e=0),"à²°à²¾à²¤à³à²°à²¿"===t?e<4?e:e+12:"à²¬à³à²³à²¿à²à³à²à³"===t?e:"à²®à²§à³à²¯à²¾à²¹à³à²¨"===t?e>=10?e:e+12:"à²¸à²à²à³"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"à²°à²¾à²¤à³à²°à²¿":e<10?"à²¬à³à²³à²¿à²à³à²à³":e<17?"à²®à²§à³à²¯à²¾à²¹à³à²¨":e<20?"à²¸à²à²à³":"à²°à²¾à²¤à³à²°à²¿"},dayOfMonthOrdinalParse:/\d{1,2}(à²¨à³à³)/,ordinal:function(e){return e+"à²¨à³à³"},week:{dow:0,doy:6}}),n.defineLocale("ko",{months:"1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì".split("_"),monthsShort:"1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì".split("_"),weekdays:"ì¼ìì¼_ììì¼_íìì¼_ììì¼_ëª©ìì¼_ê¸ìì¼_í ìì¼".split("_"),weekdaysShort:"ì¼_ì_í_ì_ëª©_ê¸_í ".split("_"),weekdaysMin:"ì¼_ì_í_ì_ëª©_ê¸_í ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYYë MMMM Dì¼",LLL:"YYYYë MMMM Dì¼ A h:mm",LLLL:"YYYYë MMMM Dì¼ dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYYë MMMM Dì¼",lll:"YYYYë MMMM Dì¼ A h:mm",llll:"YYYYë MMMM Dì¼ dddd A h:mm"},calendar:{sameDay:"ì¤ë LT",nextDay:"ë´ì¼ LT",nextWeek:"dddd LT",lastDay:"ì´ì  LT",lastWeek:"ì§ëì£¼ dddd LT",sameElse:"L"},relativeTime:{future:"%s í",past:"%s ì ",s:"ëª ì´",ss:"%dì´",m:"1ë¶",mm:"%dë¶",h:"í ìê°",hh:"%dìê°",d:"íë£¨",dd:"%dì¼",M:"í ë¬",MM:"%dë¬",y:"ì¼ ë",yy:"%dë"},dayOfMonthOrdinalParse:/\d{1,2}(ì¼|ì|ì£¼)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"ì¼";case"M":return e+"ì";case"w":case"W":return e+"ì£¼";default:return e}},meridiemParse:/ì¤ì |ì¤í/,isPM:function(e){return"ì¤í"===e},meridiem:function(e,t,n){return e<12?"ì¤ì ":"ì¤í"}});var er={0:"-ÑÒ¯",1:"-ÑÐ¸",2:"-ÑÐ¸",3:"-ÑÒ¯",4:"-ÑÒ¯",5:"-ÑÐ¸",6:"-ÑÑ",7:"-ÑÐ¸",8:"-ÑÐ¸",9:"-ÑÑ",10:"-ÑÑ",20:"-ÑÑ",30:"-ÑÑ",40:"-ÑÑ",50:"-ÑÒ¯",60:"-ÑÑ",70:"-ÑÐ¸",80:"-ÑÐ¸",90:"-ÑÑ",100:"-ÑÒ¯"};function tr(e,t,n,a){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?r[n][0]:r[n][1]}function nr(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return nr(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return nr(e)}return nr(e/=1e3)}n.defineLocale("ky",{months:"ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ".split("_"),monthsShort:"ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°ÑÑ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº".split("_"),weekdays:"ÐÐµÐºÑÐµÐ¼Ð±Ð¸_ÐÒ¯Ð¹ÑÓ©Ð¼Ð±Ò¯_Ð¨ÐµÐ¹ÑÐµÐ¼Ð±Ð¸_Ð¨Ð°ÑÑÐµÐ¼Ð±Ð¸_ÐÐµÐ¹ÑÐµÐ¼Ð±Ð¸_ÐÑÐ¼Ð°_ÐÑÐµÐ¼Ð±Ð¸".split("_"),weekdaysShort:"ÐÐµÐº_ÐÒ¯Ð¹_Ð¨ÐµÐ¹_Ð¨Ð°Ñ_ÐÐµÐ¹_ÐÑÐ¼_ÐÑÐµ".split("_"),weekdaysMin:"ÐÐº_ÐÐ¹_Ð¨Ð¹_Ð¨Ñ_ÐÐ¹_ÐÐ¼_ÐÑ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ÐÒ¯Ð³Ò¯Ð½ ÑÐ°Ð°Ñ] LT",nextDay:"[Ð­ÑÑÐµÒ£ ÑÐ°Ð°Ñ] LT",nextWeek:"dddd [ÑÐ°Ð°Ñ] LT",lastDay:"[ÐÐµÑÐµ ÑÐ°Ð°Ñ] LT",lastWeek:"[Ó¨ÑÐºÐµÐ½ Ð°Ð¿ÑÐ°Ð½ÑÐ½] dddd [ÐºÒ¯Ð½Ò¯] [ÑÐ°Ð°Ñ] LT",sameElse:"L"},relativeTime:{future:"%s Ð¸ÑÐ¸Ð½Ð´Ðµ",past:"%s Ð¼ÑÑÑÐ½",s:"Ð±Ð¸ÑÐ½ÐµÑÐµ ÑÐµÐºÑÐ½Ð´",ss:"%d ÑÐµÐºÑÐ½Ð´",m:"Ð±Ð¸Ñ Ð¼Ò¯Ð½Ó©Ñ",mm:"%d Ð¼Ò¯Ð½Ó©Ñ",h:"Ð±Ð¸Ñ ÑÐ°Ð°Ñ",hh:"%d ÑÐ°Ð°Ñ",d:"Ð±Ð¸Ñ ÐºÒ¯Ð½",dd:"%d ÐºÒ¯Ð½",M:"Ð±Ð¸Ñ Ð°Ð¹",MM:"%d Ð°Ð¹",y:"Ð±Ð¸Ñ Ð¶ÑÐ»",yy:"%d Ð¶ÑÐ»"},dayOfMonthOrdinalParse:/\d{1,2}-(ÑÐ¸|ÑÑ|ÑÒ¯|ÑÑ)/,ordinal:function(e){return e+(er[e]||er[e%10]||er[e>=100?100:null])},week:{dow:1,doy:7}}),n.defineLocale("lb",{months:"Januar_Februar_MÃ¤erz_AbrÃ«ll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_MÃ©indeg_DÃ«nschdeg_MÃ«ttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._MÃ©._DÃ«._MÃ«._Do._Fr._Sa.".split("_"),weekdaysMin:"So_MÃ©_DÃ«_MÃ«_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[GÃ«schter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return nr(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return nr(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:tr,mm:"%d Minutten",h:tr,hh:"%d Stonnen",d:tr,dd:"%d Deeg",M:tr,MM:"%d MÃ©int",y:tr,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("lo",{months:"àº¡àº±àºàºàº­àº_àºàº¸àº¡àºàº²_àº¡àºµàºàº²_à»àº¡àºªàº²_àºàº¶àºàºªàº°àºàº²_àº¡àº´àºàº¸àºàº²_àºà»àº¥àº°àºàº»àº_àºªàº´àºàº«àº²_àºàº±àºàºàº²_àºàº¸àº¥àº²_àºàº°àºàº´àº_àºàº±àºàº§àº²".split("_"),monthsShort:"àº¡àº±àºàºàº­àº_àºàº¸àº¡àºàº²_àº¡àºµàºàº²_à»àº¡àºªàº²_àºàº¶àºàºªàº°àºàº²_àº¡àº´àºàº¸àºàº²_àºà»àº¥àº°àºàº»àº_àºªàº´àºàº«àº²_àºàº±àºàºàº²_àºàº¸àº¥àº²_àºàº°àºàº´àº_àºàº±àºàº§àº²".split("_"),weekdays:"àº­àº²àºàº´àº_àºàº±àº_àº­àº±àºàºàº²àº_àºàº¸àº_àºàº°àº«àº±àº_àºªàº¸àº_à»àºªàº»àº²".split("_"),weekdaysShort:"àºàº´àº_àºàº±àº_àº­àº±àºàºàº²àº_àºàº¸àº_àºàº°àº«àº±àº_àºªàº¸àº_à»àºªàº»àº²".split("_"),weekdaysMin:"àº_àº_àº­àº_àº_àºàº«_àºªàº_àºª".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"àº§àº±àºdddd D MMMM YYYY HH:mm"},meridiemParse:/àºàº­àºà»àºàº»à»àº²|àºàº­àºà»àº¥àº/,isPM:function(e){return"àºàº­àºà»àº¥àº"===e},meridiem:function(e,t,n){return e<12?"àºàº­àºà»àºàº»à»àº²":"àºàº­àºà»àº¥àº"},calendar:{sameDay:"[àº¡àº·à»àºàºµà»à»àº§àº¥àº²] LT",nextDay:"[àº¡àº·à»àº­àº·à»àºà»àº§àº¥àº²] LT",nextWeek:"[àº§àº±àº]dddd[à»à»àº²à»àº§àº¥àº²] LT",lastDay:"[àº¡àº·à»àº§àº²àºàºàºµà»à»àº§àº¥àº²] LT",lastWeek:"[àº§àº±àº]dddd[à»àº¥à»àº§àºàºµà»à»àº§àº¥àº²] LT",sameElse:"L"},relativeTime:{future:"àº­àºµàº %s",past:"%sàºà»àº²àºàº¡àº²",s:"àºà»à»à»àºàº»à»àº²à»àºàº§àº´àºàº²àºàºµ",ss:"%d àº§àº´àºàº²àºàºµ",m:"1 àºàº²àºàºµ",mm:"%d àºàº²àºàºµ",h:"1 àºàº»à»àº§à»àº¡àº",hh:"%d àºàº»à»àº§à»àº¡àº",d:"1 àº¡àº·à»",dd:"%d àº¡àº·à»",M:"1 à»àºàº·àº­àº",MM:"%d à»àºàº·àº­àº",y:"1 àºàºµ",yy:"%d àºàºµ"},dayOfMonthOrdinalParse:/(àºàºµà»)\d{1,2}/,ordinal:function(e){return"àºàºµà»"+e}});var ar={ss:"sekundÄ_sekundÅ¾iÅ³_sekundes",m:"minutÄ_minutÄs_minutÄ",mm:"minutÄs_minuÄiÅ³_minutes",h:"valanda_valandos_valandÄ",hh:"valandos_valandÅ³_valandas",d:"diena_dienos_dienÄ",dd:"dienos_dienÅ³_dienas",M:"mÄnuo_mÄnesio_mÄnesÄ¯",MM:"mÄnesiai_mÄnesiÅ³_mÄnesius",y:"metai_metÅ³_metus",yy:"metai_metÅ³_metus"};function rr(e,t,n,a){return t?ir(n)[0]:a?ir(n)[1]:ir(n)[2]}function sr(e){return e%10==0||e>10&&e<20}function ir(e){return ar[e].split("_")}function or(e,t,n,a){var r=e+" ";return 1===e?r+rr(0,t,n[0],a):t?r+(sr(e)?ir(n)[1]:ir(n)[0]):a?r+ir(n)[1]:r+(sr(e)?ir(n)[1]:ir(n)[2])}n.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandÅ¾io_geguÅ¾Äs_birÅ¾elio_liepos_rugpjÅ«Äio_rugsÄjo_spalio_lapkriÄio_gruodÅ¾io".split("_"),standalone:"sausis_vasaris_kovas_balandis_geguÅ¾Ä_birÅ¾elis_liepa_rugpjÅ«tis_rugsÄjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienÄ¯_pirmadienÄ¯_antradienÄ¯_treÄiadienÄ¯_ketvirtadienÄ¯_penktadienÄ¯_Å¡eÅ¡tadienÄ¯".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_treÄiadienis_ketvirtadienis_penktadienis_Å¡eÅ¡tadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Å eÅ¡".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Å ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Å iandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[PraÄjusÄ¯] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieÅ¡ %s",s:function(e,t,n,a){return t?"kelios sekundÄs":a?"keliÅ³ sekundÅ¾iÅ³":"kelias sekundes"},ss:or,m:rr,mm:or,h:rr,hh:or,d:rr,dd:or,M:rr,MM:or,y:rr,yy:or},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}});var dr={ss:"sekundes_sekundÄm_sekunde_sekundes".split("_"),m:"minÅ«tes_minÅ«tÄm_minÅ«te_minÅ«tes".split("_"),mm:"minÅ«tes_minÅ«tÄm_minÅ«te_minÅ«tes".split("_"),h:"stundas_stundÄm_stunda_stundas".split("_"),hh:"stundas_stundÄm_stunda_stundas".split("_"),d:"dienas_dienÄm_diena_dienas".split("_"),dd:"dienas_dienÄm_diena_dienas".split("_"),M:"mÄneÅ¡a_mÄneÅ¡iem_mÄnesis_mÄneÅ¡i".split("_"),MM:"mÄneÅ¡a_mÄneÅ¡iem_mÄnesis_mÄneÅ¡i".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function ur(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function lr(e,t,n){return e+" "+ur(dr[n],e,t)}function _r(e,t,n){return ur(dr[n],e,t)}n.defineLocale("lv",{months:"janvÄris_februÄris_marts_aprÄ«lis_maijs_jÅ«nijs_jÅ«lijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jÅ«n_jÅ«l_aug_sep_okt_nov_dec".split("_"),weekdays:"svÄtdiena_pirmdiena_otrdiena_treÅ¡diena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Å odien pulksten] LT",nextDay:"[RÄ«t pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[PagÄjuÅ¡Ä] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pÄc %s",past:"pirms %s",s:function(e,t){return t?"daÅ¾as sekundes":"daÅ¾Äm sekundÄm"},ss:lr,m:_r,mm:lr,h:_r,hh:lr,d:_r,dd:lr,M:_r,MM:lr,y:_r,yy:lr},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var cr={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,t,n){var a=cr.words[n];return 1===n.length?t?a[0]:a[1]:e+" "+cr.correctGrammaticalCase(e,a)}};function mr(e,t,n,a){switch(n){case"s":return t?"ÑÑÐ´ÑÑÐ½ ÑÐµÐºÑÐ½Ð´":"ÑÑÐ´ÑÑÐ½ ÑÐµÐºÑÐ½Ð´ÑÐ½";case"ss":return e+(t?" ÑÐµÐºÑÐ½Ð´":" ÑÐµÐºÑÐ½Ð´ÑÐ½");case"m":case"mm":return e+(t?" Ð¼Ð¸Ð½ÑÑ":" Ð¼Ð¸Ð½ÑÑÑÐ½");case"h":case"hh":return e+(t?" ÑÐ°Ð³":" ÑÐ°Ð³Ð¸Ð¹Ð½");case"d":case"dd":return e+(t?" Ó©Ð´Ó©Ñ":" Ó©Ð´ÑÐ¸Ð¹Ð½");case"M":case"MM":return e+(t?" ÑÐ°Ñ":" ÑÐ°ÑÑÐ½");case"y":case"yy":return e+(t?" Ð¶Ð¸Ð»":" Ð¶Ð¸Ð»Ð¸Ð¹Ð½");default:return e}}n.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._Äet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_Äe_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juÄe u] LT",lastWeek:function(){return["[proÅ¡le] [nedjelje] [u] LT","[proÅ¡log] [ponedjeljka] [u] LT","[proÅ¡log] [utorka] [u] LT","[proÅ¡le] [srijede] [u] LT","[proÅ¡log] [Äetvrtka] [u] LT","[proÅ¡log] [petka] [u] LT","[proÅ¡le] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:cr.translate,m:cr.translate,mm:cr.translate,h:cr.translate,hh:cr.translate,d:"dan",dd:cr.translate,M:"mjesec",MM:cr.translate,y:"godinu",yy:cr.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),n.defineLocale("mi",{months:"Kohi-tÄte_Hui-tanguru_PoutÅ«-te-rangi_Paenga-whÄwhÄ_Haratua_Pipiri_HÅngoingoi_Here-turi-kÅkÄ_Mahuru_Whiringa-Ä-nuku_Whiringa-Ä-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_HÅngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"RÄtapu_Mane_TÅ«rei_Wenerei_TÄite_Paraire_HÄtarei".split("_"),weekdaysShort:"Ta_Ma_TÅ«_We_TÄi_Pa_HÄ".split("_"),weekdaysMin:"Ta_Ma_TÅ«_We_TÄi_Pa_HÄ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hÄkona ruarua",ss:"%d hÄkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}}),n.defineLocale("mk",{months:"ÑÐ°Ð½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½Ð¸_ÑÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸".split("_"),monthsShort:"ÑÐ°Ð½_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº".split("_"),weekdays:"Ð½ÐµÐ´ÐµÐ»Ð°_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ¾Ðº_Ð¿ÐµÑÐ¾Ðº_ÑÐ°Ð±Ð¾ÑÐ°".split("_"),weekdaysShort:"Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÐµ_ÑÐµÑ_Ð¿ÐµÑ_ÑÐ°Ð±".split("_"),weekdaysMin:"Ð½e_Ð¿o_Ð²Ñ_ÑÑ_ÑÐµ_Ð¿Ðµ_Ña".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[ÐÐµÐ½ÐµÑ Ð²Ð¾] LT",nextDay:"[Ð£ÑÑÐµ Ð²Ð¾] LT",nextWeek:"[ÐÐ¾] dddd [Ð²Ð¾] LT",lastDay:"[ÐÑÐµÑÐ° Ð²Ð¾] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[ÐÐ·Ð¼Ð¸Ð½Ð°ÑÐ°ÑÐ°] dddd [Ð²Ð¾] LT";case 1:case 2:case 4:case 5:return"[ÐÐ·Ð¼Ð¸Ð½Ð°ÑÐ¸Ð¾Ñ] dddd [Ð²Ð¾] LT"}},sameElse:"L"},relativeTime:{future:"Ð¿Ð¾ÑÐ»Ðµ %s",past:"Ð¿ÑÐµÐ´ %s",s:"Ð½ÐµÐºÐ¾Ð»ÐºÑ ÑÐµÐºÑÐ½Ð´Ð¸",ss:"%d ÑÐµÐºÑÐ½Ð´Ð¸",m:"Ð¼Ð¸Ð½ÑÑÐ°",mm:"%d Ð¼Ð¸Ð½ÑÑÐ¸",h:"ÑÐ°Ñ",hh:"%d ÑÐ°ÑÐ°",d:"Ð´ÐµÐ½",dd:"%d Ð´ÐµÐ½Ð°",M:"Ð¼ÐµÑÐµÑ",MM:"%d Ð¼ÐµÑÐµÑÐ¸",y:"Ð³Ð¾Ð´Ð¸Ð½Ð°",yy:"%d Ð³Ð¾Ð´Ð¸Ð½Ð¸"},dayOfMonthOrdinalParse:/\d{1,2}-(ÐµÐ²|ÐµÐ½|ÑÐ¸|Ð²Ð¸|ÑÐ¸|Ð¼Ð¸)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ÐµÐ²":0===n?e+"-ÐµÐ½":n>10&&n<20?e+"-ÑÐ¸":1===t?e+"-Ð²Ð¸":2===t?e+"-ÑÐ¸":7===t||8===t?e+"-Ð¼Ð¸":e+"-ÑÐ¸"},week:{dow:1,doy:7}}),n.defineLocale("ml",{months:"à´à´¨àµà´µà´°à´¿_à´«àµà´¬àµà´°àµà´µà´°à´¿_à´®à´¾àµ¼à´àµà´àµ_à´à´ªàµà´°à´¿àµ½_à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ_à´à´à´¸àµà´±àµà´±àµ_à´¸àµà´ªàµà´±àµà´±à´à´¬àµ¼_à´à´àµà´àµà´¬àµ¼_à´¨à´µà´à´¬àµ¼_à´¡à´¿à´¸à´à´¬àµ¼".split("_"),monthsShort:"à´à´¨àµ._à´«àµà´¬àµà´°àµ._à´®à´¾àµ¼._à´à´ªàµà´°à´¿._à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ._à´à´._à´¸àµà´ªàµà´±àµà´±._à´à´àµà´àµ._à´¨à´µà´._à´¡à´¿à´¸à´.".split("_"),monthsParseExact:!0,weekdays:"à´à´¾à´¯à´±à´¾à´´àµà´_à´¤à´¿à´àµà´à´³à´¾à´´àµà´_à´àµà´µàµà´µà´¾à´´àµà´_à´¬àµà´§à´¨à´¾à´´àµà´_à´µàµà´¯à´¾à´´à´¾à´´àµà´_à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´_à´¶à´¨à´¿à´¯à´¾à´´àµà´".split("_"),weekdaysShort:"à´à´¾à´¯àµ¼_à´¤à´¿à´àµà´àµ¾_à´àµà´µàµà´µ_à´¬àµà´§àµ»_à´µàµà´¯à´¾à´´à´_à´µàµà´³àµà´³à´¿_à´¶à´¨à´¿".split("_"),weekdaysMin:"à´à´¾_à´¤à´¿_à´àµ_à´¬àµ_à´µàµà´¯à´¾_à´µàµ_à´¶".split("_"),longDateFormat:{LT:"A h:mm -à´¨àµ",LTS:"A h:mm:ss -à´¨àµ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -à´¨àµ",LLLL:"dddd, D MMMM YYYY, A h:mm -à´¨àµ"},calendar:{sameDay:"[à´à´¨àµà´¨àµ] LT",nextDay:"[à´¨à´¾à´³àµ] LT",nextWeek:"dddd, LT",lastDay:"[à´à´¨àµà´¨à´²àµ] LT",lastWeek:"[à´à´´à´¿à´àµà´] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à´à´´à´¿à´àµà´àµ",past:"%s à´®àµàµ»à´ªàµ",s:"à´àµ½à´ª à´¨à´¿à´®à´¿à´·à´àµà´àµ¾",ss:"%d à´¸àµà´àµà´àµ»à´¡àµ",m:"à´à´°àµ à´®à´¿à´¨à´¿à´±àµà´±àµ",mm:"%d à´®à´¿à´¨à´¿à´±àµà´±àµ",h:"à´à´°àµ à´®à´£à´¿à´àµà´àµàµ¼",hh:"%d à´®à´£à´¿à´àµà´àµàµ¼",d:"à´à´°àµ à´¦à´¿à´µà´¸à´",dd:"%d à´¦à´¿à´µà´¸à´",M:"à´à´°àµ à´®à´¾à´¸à´",MM:"%d à´®à´¾à´¸à´",y:"à´à´°àµ à´µàµ¼à´·à´",yy:"%d à´µàµ¼à´·à´"},meridiemParse:/à´°à´¾à´¤àµà´°à´¿|à´°à´¾à´µà´¿à´²àµ|à´à´àµà´ à´à´´à´¿à´àµà´àµ|à´µàµà´àµà´¨àµà´¨àµà´°à´|à´°à´¾à´¤àµà´°à´¿/i,meridiemHour:function(e,t){return 12===e&&(e=0),"à´°à´¾à´¤àµà´°à´¿"===t&&e>=4||"à´à´àµà´ à´à´´à´¿à´àµà´àµ"===t||"à´µàµà´àµà´¨àµà´¨àµà´°à´"===t?e+12:e},meridiem:function(e,t,n){return e<4?"à´°à´¾à´¤àµà´°à´¿":e<12?"à´°à´¾à´µà´¿à´²àµ":e<17?"à´à´àµà´ à´à´´à´¿à´àµà´àµ":e<20?"à´µàµà´àµà´¨àµà´¨àµà´°à´":"à´°à´¾à´¤àµà´°à´¿"}}),n.defineLocale("mn",{months:"ÐÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_Ð¥Ð¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÓ©ÑÓ©Ð²Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_Ð¢Ð°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÑÐ³Ð°Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÐ¾Ð»Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÐ°Ð¹Ð¼Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÐ´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_ÐÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÐ²Ð°Ð½ Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_ÐÑÐ²Ð°Ð½ ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ".split("_"),monthsShort:"1 ÑÐ°Ñ_2 ÑÐ°Ñ_3 ÑÐ°Ñ_4 ÑÐ°Ñ_5 ÑÐ°Ñ_6 ÑÐ°Ñ_7 ÑÐ°Ñ_8 ÑÐ°Ñ_9 ÑÐ°Ñ_10 ÑÐ°Ñ_11 ÑÐ°Ñ_12 ÑÐ°Ñ".split("_"),monthsParseExact:!0,weekdays:"ÐÑÐ¼_ÐÐ°Ð²Ð°Ð°_ÐÑÐ³Ð¼Ð°Ñ_ÐÑÐ°Ð³Ð²Ð°_ÐÒ¯ÑÑÐ²_ÐÐ°Ð°ÑÐ°Ð½_ÐÑÐ¼Ð±Ð°".split("_"),weekdaysShort:"ÐÑÐ¼_ÐÐ°Ð²_ÐÑÐ³_ÐÑÐ°_ÐÒ¯Ñ_ÐÐ°Ð°_ÐÑÐ¼".split("_"),weekdaysMin:"ÐÑ_ÐÐ°_ÐÑ_ÐÑ_ÐÒ¯_ÐÐ°_ÐÑ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY Ð¾Ð½Ñ MMMMÑÐ½ D",LLL:"YYYY Ð¾Ð½Ñ MMMMÑÐ½ D HH:mm",LLLL:"dddd, YYYY Ð¾Ð½Ñ MMMMÑÐ½ D HH:mm"},meridiemParse:/Ò®Ó¨|Ò®Ð¥/i,isPM:function(e){return"Ò®Ð¥"===e},meridiem:function(e,t,n){return e<12?"Ò®Ó¨":"Ò®Ð¥"},calendar:{sameDay:"[Ó¨Ð½Ó©Ó©Ð´Ó©Ñ] LT",nextDay:"[ÐÐ°ÑÐ³Ð°Ð°Ñ] LT",nextWeek:"[ÐÑÑÑ] dddd LT",lastDay:"[Ó¨ÑÐ¸Ð³Ð´Ó©Ñ] LT",lastWeek:"[Ó¨Ð½Ð³Ó©ÑÑÓ©Ð½] dddd LT",sameElse:"L"},relativeTime:{future:"%s Ð´Ð°ÑÐ°Ð°",past:"%s Ó©Ð¼Ð½Ó©",s:mr,ss:mr,m:mr,mm:mr,h:mr,hh:mr,d:mr,dd:mr,M:mr,MM:mr,y:mr,yy:mr},dayOfMonthOrdinalParse:/\d{1,2} Ó©Ð´Ó©Ñ/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" Ó©Ð´Ó©Ñ";default:return e}}});var hr={1:"à¥§",2:"à¥¨",3:"à¥©",4:"à¥ª",5:"à¥«",6:"à¥¬",7:"à¥­",8:"à¥®",9:"à¥¯",0:"à¥¦"},pr={"à¥§":"1","à¥¨":"2","à¥©":"3","à¥ª":"4","à¥«":"5","à¥¬":"6","à¥­":"7","à¥®":"8","à¥¯":"9","à¥¦":"0"};function fr(e,t,n,a){var r="";if(t)switch(n){case"s":r="à¤à¤¾à¤¹à¥ à¤¸à¥à¤à¤à¤¦";break;case"ss":r="%d à¤¸à¥à¤à¤à¤¦";break;case"m":r="à¤à¤ à¤®à¤¿à¤¨à¤¿à¤";break;case"mm":r="%d à¤®à¤¿à¤¨à¤¿à¤à¥";break;case"h":r="à¤à¤ à¤¤à¤¾à¤¸";break;case"hh":r="%d à¤¤à¤¾à¤¸";break;case"d":r="à¤à¤ à¤¦à¤¿à¤µà¤¸";break;case"dd":r="%d à¤¦à¤¿à¤µà¤¸";break;case"M":r="à¤à¤ à¤®à¤¹à¤¿à¤¨à¤¾";break;case"MM":r="%d à¤®à¤¹à¤¿à¤¨à¥";break;case"y":r="à¤à¤ à¤µà¤°à¥à¤·";break;case"yy":r="%d à¤µà¤°à¥à¤·à¥"}else switch(n){case"s":r="à¤à¤¾à¤¹à¥ à¤¸à¥à¤à¤à¤¦à¤¾à¤";break;case"ss":r="%d à¤¸à¥à¤à¤à¤¦à¤¾à¤";break;case"m":r="à¤à¤à¤¾ à¤®à¤¿à¤¨à¤¿à¤à¤¾";break;case"mm":r="%d à¤®à¤¿à¤¨à¤¿à¤à¤¾à¤";break;case"h":r="à¤à¤à¤¾ à¤¤à¤¾à¤¸à¤¾";break;case"hh":r="%d à¤¤à¤¾à¤¸à¤¾à¤";break;case"d":r="à¤à¤à¤¾ à¤¦à¤¿à¤µà¤¸à¤¾";break;case"dd":r="%d à¤¦à¤¿à¤µà¤¸à¤¾à¤";break;case"M":r="à¤à¤à¤¾ à¤®à¤¹à¤¿à¤¨à¥à¤¯à¤¾";break;case"MM":r="%d à¤®à¤¹à¤¿à¤¨à¥à¤¯à¤¾à¤";break;case"y":r="à¤à¤à¤¾ à¤µà¤°à¥à¤·à¤¾";break;case"yy":r="%d à¤µà¤°à¥à¤·à¤¾à¤"}return r.replace(/%d/i,e)}n.defineLocale("mr",{months:"à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¥_à¤à¥à¤¨_à¤à¥à¤²à¥_à¤à¤à¤¸à¥à¤_à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°".split("_"),monthsShort:"à¤à¤¾à¤¨à¥._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤._à¤à¤ªà¥à¤°à¤¿._à¤®à¥._à¤à¥à¤¨._à¤à¥à¤²à¥._à¤à¤._à¤¸à¤ªà¥à¤à¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤µà¥à¤¹à¥à¤._à¤¡à¤¿à¤¸à¥à¤.".split("_"),monthsParseExact:!0,weekdays:"à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤³à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°".split("_"),weekdaysShort:"à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤³_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿".split("_"),weekdaysMin:"à¤°_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤à¥_à¤¶à¥_à¤¶".split("_"),longDateFormat:{LT:"A h:mm à¤µà¤¾à¤à¤¤à¤¾",LTS:"A h:mm:ss à¤µà¤¾à¤à¤¤à¤¾",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm à¤µà¤¾à¤à¤¤à¤¾",LLLL:"dddd, D MMMM YYYY, A h:mm à¤µà¤¾à¤à¤¤à¤¾"},calendar:{sameDay:"[à¤à¤] LT",nextDay:"[à¤à¤¦à¥à¤¯à¤¾] LT",nextWeek:"dddd, LT",lastDay:"[à¤à¤¾à¤²] LT",lastWeek:"[à¤®à¤¾à¤à¥à¤²] dddd, LT",sameElse:"L"},relativeTime:{future:"%sà¤®à¤§à¥à¤¯à¥",past:"%sà¤ªà¥à¤°à¥à¤µà¥",s:fr,ss:fr,m:fr,mm:fr,h:fr,hh:fr,d:fr,dd:fr,M:fr,MM:fr,y:fr,yy:fr},preparse:function(e){return e.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g,function(e){return pr[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return hr[e]})},meridiemParse:/à¤°à¤¾à¤¤à¥à¤°à¥|à¤¸à¤à¤¾à¤³à¥|à¤¦à¥à¤ªà¤¾à¤°à¥|à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥/,meridiemHour:function(e,t){return 12===e&&(e=0),"à¤°à¤¾à¤¤à¥à¤°à¥"===t?e<4?e:e+12:"à¤¸à¤à¤¾à¤³à¥"===t?e:"à¤¦à¥à¤ªà¤¾à¤°à¥"===t?e>=10?e:e+12:"à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"à¤°à¤¾à¤¤à¥à¤°à¥":e<10?"à¤¸à¤à¤¾à¤³à¥":e<17?"à¤¦à¥à¤ªà¤¾à¤°à¥":e<20?"à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥":"à¤°à¤¾à¤¤à¥à¤°à¥"},week:{dow:0,doy:6}}),n.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),n.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),n.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ä unju_Lulju_Awwissu_Settembru_Ottubru_Novembru_DiÄembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ä un_Lul_Aww_Set_Ott_Nov_DiÄ".split("_"),weekdays:"Il-Ä¦add_It-Tnejn_It-Tlieta_L-ErbgÄ§a_Il-Ä¦amis_Il-Ä imgÄ§a_Is-Sibt".split("_"),weekdaysShort:"Ä¦ad_Tne_Tli_Erb_Ä¦am_Ä im_Sib".split("_"),weekdaysMin:"Ä¦a_Tn_Tl_Er_Ä¦a_Ä i_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[GÄ§ada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraÄ§ fil-]LT",lastWeek:"dddd [li gÄ§adda] [fil-]LT",sameElse:"L"},relativeTime:{future:"fâ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegÄ§a",hh:"%d siegÄ§at",d:"Ä¡urnata",dd:"%d Ä¡ranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}});var yr={1:"á",2:"á",3:"á",4:"á",5:"á",6:"á",7:"á",8:"á",9:"á",0:"á"},Mr={"á":"1","á":"2","á":"3","á":"4","á":"5","á":"6","á":"7","á":"8","á":"9","á":"0"};n.defineLocale("my",{months:"áááºááá«áá®_áá±áá±á¬áºáá«áá®_áááº_á§áá¼á®_áá±_áá½ááº_áá°áá­á¯ááº_áá¼áá¯ááº_áááºáááºáá¬_á¡á±á¬ááºáá­á¯áá¬_áá­á¯áááºáá¬_áá®áááºáá¬".split("_"),monthsShort:"áááº_áá±_áááº_áá¼á®_áá±_áá½ááº_áá­á¯ááº_áá¼_áááº_á¡á±á¬ááº_áá­á¯_áá®".split("_"),weekdays:"ááááºá¹ááá½á±_ááááºá¹áá¬_á¡ááºá¹áá«_áá¯áá¹ááá°á¸_áá¼á¬áááá±á¸_áá±á¬áá¼á¬_ááá±".split("_"),weekdaysShort:"áá½á±_áá¬_áá«_áá°á¸_áá¼á¬_áá±á¬_áá±".split("_"),weekdaysMin:"áá½á±_áá¬_áá«_áá°á¸_áá¼á¬_áá±á¬_áá±".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ááá±.] LT [áá¾á¬]",nextDay:"[ááááºáá¼ááº] LT [áá¾á¬]",nextWeek:"dddd LT [áá¾á¬]",lastDay:"[ááá±.á] LT [áá¾á¬]",lastWeek:"[áá¼á®á¸áá²á·áá±á¬] dddd LT [áá¾á¬]",sameElse:"L"},relativeTime:{future:"áá¬áááºá· %s áá¾á¬",past:"áá½ááºáá²á·áá±á¬ %s á",s:"ááá¹áááº.á¡áááºá¸áááº",ss:"%d ááá¹ááá·áº",m:"áááºáá­áááº",mm:"%d áá­áááº",h:"áááºáá¬áá®",hh:"%d áá¬áá®",d:"áááºáááº",dd:"%d áááº",M:"áááºá",MM:"%d á",y:"áááºáá¾ááº",yy:"%d áá¾ááº"},preparse:function(e){return e.replace(/[áááááááááá]/g,function(e){return Mr[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return yr[e]})},week:{dow:1,doy:4}}),n.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag".split("_"),weekdaysShort:"sÃ¸._ma._ti._on._to._fr._lÃ¸.".split("_"),weekdaysMin:"sÃ¸_ma_ti_on_to_fr_lÃ¸".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i gÃ¥r kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en mÃ¥ned",MM:"%d mÃ¥neder",y:"ett Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Lr={1:"à¥§",2:"à¥¨",3:"à¥©",4:"à¥ª",5:"à¥«",6:"à¥¬",7:"à¥­",8:"à¥®",9:"à¥¯",0:"à¥¦"},gr={"à¥§":"1","à¥¨":"2","à¥©":"3","à¥ª":"4","à¥«":"5","à¥¬":"6","à¥­":"7","à¥®":"8","à¥¯":"9","à¥¦":"0"};n.defineLocale("ne",{months:"à¤à¤¨à¤µà¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤·à¥à¤_à¤¸à¥à¤ªà¥à¤à¥à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤­à¥à¤®à¥à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤®à¥à¤¬à¤°".split("_"),monthsShort:"à¤à¤¨._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤._à¤à¤._à¤¸à¥à¤ªà¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤­à¥._à¤¡à¤¿à¤¸à¥.".split("_"),monthsParseExact:!0,weekdays:"à¤à¤à¤¤à¤¬à¤¾à¤°_à¤¸à¥à¤®à¤¬à¤¾à¤°_à¤®à¤à¥à¤à¤²à¤¬à¤¾à¤°_à¤¬à¥à¤§à¤¬à¤¾à¤°_à¤¬à¤¿à¤¹à¤¿à¤¬à¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤¬à¤¾à¤°_à¤¶à¤¨à¤¿à¤¬à¤¾à¤°".split("_"),weekdaysShort:"à¤à¤à¤¤._à¤¸à¥à¤®._à¤®à¤à¥à¤à¤²._à¤¬à¥à¤§._à¤¬à¤¿à¤¹à¤¿._à¤¶à¥à¤à¥à¤°._à¤¶à¤¨à¤¿.".split("_"),weekdaysMin:"à¤._à¤¸à¥._à¤®à¤._à¤¬à¥._à¤¬à¤¿._à¤¶à¥._à¤¶.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aà¤à¥ h:mm à¤¬à¤à¥",LTS:"Aà¤à¥ h:mm:ss à¤¬à¤à¥",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aà¤à¥ h:mm à¤¬à¤à¥",LLLL:"dddd, D MMMM YYYY, Aà¤à¥ h:mm à¤¬à¤à¥"},preparse:function(e){return e.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g,function(e){return gr[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Lr[e]})},meridiemParse:/à¤°à¤¾à¤¤à¤¿|à¤¬à¤¿à¤¹à¤¾à¤¨|à¤¦à¤¿à¤à¤à¤¸à¥|à¤¸à¤¾à¤à¤/,meridiemHour:function(e,t){return 12===e&&(e=0),"à¤°à¤¾à¤¤à¤¿"===t?e<4?e:e+12:"à¤¬à¤¿à¤¹à¤¾à¤¨"===t?e:"à¤¦à¤¿à¤à¤à¤¸à¥"===t?e>=10?e:e+12:"à¤¸à¤¾à¤à¤"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"à¤°à¤¾à¤¤à¤¿":e<12?"à¤¬à¤¿à¤¹à¤¾à¤¨":e<16?"à¤¦à¤¿à¤à¤à¤¸à¥":e<20?"à¤¸à¤¾à¤à¤":"à¤°à¤¾à¤¤à¤¿"},calendar:{sameDay:"[à¤à¤] LT",nextDay:"[à¤­à¥à¤²à¤¿] LT",nextWeek:"[à¤à¤à¤à¤¦à¥] dddd[,] LT",lastDay:"[à¤¹à¤¿à¤à¥] LT",lastWeek:"[à¤à¤à¤à¥] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sà¤®à¤¾",past:"%s à¤à¤à¤¾à¤¡à¤¿",s:"à¤à¥à¤¹à¥ à¤à¥à¤·à¤£",ss:"%d à¤¸à¥à¤à¥à¤£à¥à¤¡",m:"à¤à¤ à¤®à¤¿à¤¨à¥à¤",mm:"%d à¤®à¤¿à¤¨à¥à¤",h:"à¤à¤ à¤à¤£à¥à¤à¤¾",hh:"%d à¤à¤£à¥à¤à¤¾",d:"à¤à¤ à¤¦à¤¿à¤¨",dd:"%d à¤¦à¤¿à¤¨",M:"à¤à¤ à¤®à¤¹à¤¿à¤¨à¤¾",MM:"%d à¤®à¤¹à¤¿à¤¨à¤¾",y:"à¤à¤ à¤¬à¤°à¥à¤·",yy:"%d à¤¬à¤°à¥à¤·"},week:{dow:0,doy:6}});var Yr="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),kr="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),vr=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],Dr=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;n.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return e?/-MMM-/.test(t)?kr[e.month()]:Yr[e.month()]:Yr},monthsRegex:Dr,monthsShortRegex:Dr,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:vr,longMonthsParse:vr,shortMonthsParse:vr,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"Ã©Ã©n minuut",mm:"%d minuten",h:"Ã©Ã©n uur",hh:"%d uur",d:"Ã©Ã©n dag",dd:"%d dagen",M:"Ã©Ã©n maand",MM:"%d maanden",y:"Ã©Ã©n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}});var wr="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),Tr="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),br=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],Sr=/^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;n.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,t){return e?/-MMM-/.test(t)?Tr[e.month()]:wr[e.month()]:wr},monthsRegex:Sr,monthsShortRegex:Sr,monthsStrictRegex:/^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:br,longMonthsParse:br,shortMonthsParse:br,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"Ã©Ã©n minuut",mm:"%d minuten",h:"Ã©Ã©n uur",hh:"%d uur",d:"Ã©Ã©n dag",dd:"%d dagen",M:"Ã©Ã©n maand",MM:"%d maanden",y:"Ã©Ã©n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}}),n.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_mÃ¥ndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mÃ¥n_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_mÃ¥_ty_on_to_fr_lÃ¸".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I gÃ¥r klokka] LT",lastWeek:"[FÃ¸regÃ¥ande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein mÃ¥nad",MM:"%d mÃ¥nader",y:"eit Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var xr={1:"à©§",2:"à©¨",3:"à©©",4:"à©ª",5:"à©«",6:"à©¬",7:"à©­",8:"à©®",9:"à©¯",0:"à©¦"},Hr={"à©§":"1","à©¨":"2","à©©":"3","à©ª":"4","à©«":"5","à©¬":"6","à©­":"7","à©®":"8","à©¯":"9","à©¦":"0"};n.defineLocale("pa-in",{months:"à¨à¨¨à¨µà¨°à©_à¨«à¨¼à¨°à¨µà¨°à©_à¨®à¨¾à¨°à¨_à¨à¨ªà©à¨°à©à¨²_à¨®à¨_à¨à©à¨¨_à¨à©à¨²à¨¾à¨_à¨à¨à¨¸à¨¤_à¨¸à¨¤à©°à¨¬à¨°_à¨à¨à¨¤à©à¨¬à¨°_à¨¨à¨µà©°à¨¬à¨°_à¨¦à¨¸à©°à¨¬à¨°".split("_"),monthsShort:"à¨à¨¨à¨µà¨°à©_à¨«à¨¼à¨°à¨µà¨°à©_à¨®à¨¾à¨°à¨_à¨à¨ªà©à¨°à©à¨²_à¨®à¨_à¨à©à¨¨_à¨à©à¨²à¨¾à¨_à¨à¨à¨¸à¨¤_à¨¸à¨¤à©°à¨¬à¨°_à¨à¨à¨¤à©à¨¬à¨°_à¨¨à¨µà©°à¨¬à¨°_à¨¦à¨¸à©°à¨¬à¨°".split("_"),weekdays:"à¨à¨¤à¨µà¨¾à¨°_à¨¸à©à¨®à¨µà¨¾à¨°_à¨®à©°à¨à¨²à¨µà¨¾à¨°_à¨¬à©à¨§à¨µà¨¾à¨°_à¨µà©à¨°à¨µà¨¾à¨°_à¨¸à¨¼à©à©±à¨à¨°à¨µà¨¾à¨°_à¨¸à¨¼à¨¨à©à¨à¨°à¨µà¨¾à¨°".split("_"),weekdaysShort:"à¨à¨¤_à¨¸à©à¨®_à¨®à©°à¨à¨²_à¨¬à©à¨§_à¨µà©à¨°_à¨¸à¨¼à©à¨à¨°_à¨¸à¨¼à¨¨à©".split("_"),weekdaysMin:"à¨à¨¤_à¨¸à©à¨®_à¨®à©°à¨à¨²_à¨¬à©à¨§_à¨µà©à¨°_à¨¸à¨¼à©à¨à¨°_à¨¸à¨¼à¨¨à©".split("_"),longDateFormat:{LT:"A h:mm à¨µà¨à©",LTS:"A h:mm:ss à¨µà¨à©",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm à¨µà¨à©",LLLL:"dddd, D MMMM YYYY, A h:mm à¨µà¨à©"},calendar:{sameDay:"[à¨à¨] LT",nextDay:"[à¨à¨²] LT",nextWeek:"[à¨à¨à¨²à¨¾] dddd, LT",lastDay:"[à¨à¨²] LT",lastWeek:"[à¨ªà¨¿à¨à¨²à©] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à¨µà¨¿à©±à¨",past:"%s à¨ªà¨¿à¨à¨²à©",s:"à¨à©à¨ à¨¸à¨à¨¿à©°à¨",ss:"%d à¨¸à¨à¨¿à©°à¨",m:"à¨à¨ à¨®à¨¿à©°à¨",mm:"%d à¨®à¨¿à©°à¨",h:"à¨à©±à¨ à¨à©°à¨à¨¾",hh:"%d à¨à©°à¨à©",d:"à¨à©±à¨ à¨¦à¨¿à¨¨",dd:"%d à¨¦à¨¿à¨¨",M:"à¨à©±à¨ à¨®à¨¹à©à¨¨à¨¾",MM:"%d à¨®à¨¹à©à¨¨à©",y:"à¨à©±à¨ à¨¸à¨¾à¨²",yy:"%d à¨¸à¨¾à¨²"},preparse:function(e){return e.replace(/[à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯à©¦]/g,function(e){return Hr[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return xr[e]})},meridiemParse:/à¨°à¨¾à¨¤|à¨¸à¨µà©à¨°|à¨¦à©à¨ªà¨¹à¨¿à¨°|à¨¸à¨¼à¨¾à¨®/,meridiemHour:function(e,t){return 12===e&&(e=0),"à¨°à¨¾à¨¤"===t?e<4?e:e+12:"à¨¸à¨µà©à¨°"===t?e:"à¨¦à©à¨ªà¨¹à¨¿à¨°"===t?e>=10?e:e+12:"à¨¸à¨¼à¨¾à¨®"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"à¨°à¨¾à¨¤":e<10?"à¨¸à¨µà©à¨°":e<17?"à¨¦à©à¨ªà¨¹à¨¿à¨°":e<20?"à¨¸à¨¼à¨¾à¨®":"à¨°à¨¾à¨¤"},week:{dow:0,doy:6}});var jr="styczeÅ_luty_marzec_kwiecieÅ_maj_czerwiec_lipiec_sierpieÅ_wrzesieÅ_paÅºdziernik_listopad_grudzieÅ".split("_"),Pr="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrzeÅnia_paÅºdziernika_listopada_grudnia".split("_");function Er(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function Or(e,t,n){var a=e+" ";switch(n){case"ss":return a+(Er(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutÄ";case"mm":return a+(Er(e)?"minuty":"minut");case"h":return t?"godzina":"godzinÄ";case"hh":return a+(Er(e)?"godziny":"godzin");case"MM":return a+(Er(e)?"miesiÄce":"miesiÄcy");case"yy":return a+(Er(e)?"lata":"lat")}}function Ar(e,t,n){var a=" ";return(e%100>=20||e>=100&&e%100==0)&&(a=" de "),e+a+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}function Wr(e,t,n){var a,r;return"m"===n?t?"Ð¼Ð¸Ð½ÑÑÐ°":"Ð¼Ð¸Ð½ÑÑÑ":e+" "+(a=+e,r={ss:t?"ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´":"ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´",mm:t?"Ð¼Ð¸Ð½ÑÑÐ°_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ":"Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ",hh:"ÑÐ°Ñ_ÑÐ°ÑÐ°_ÑÐ°ÑÐ¾Ð²",dd:"Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÐµÐ¹",MM:"Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÐ°_Ð¼ÐµÑÑÑÐµÐ²",yy:"Ð³Ð¾Ð´_Ð³Ð¾Ð´Ð°_Ð»ÐµÑ"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}n.defineLocale("pl",{months:function(e,t){return e?""===t?"("+Pr[e.month()]+"|"+jr[e.month()]+")":/D MMMM/.test(t)?Pr[e.month()]:jr[e.month()]:jr},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paÅº_lis_gru".split("_"),weekdays:"niedziela_poniedziaÅek_wtorek_Åroda_czwartek_piÄtek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_År_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_År_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DziÅ o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielÄ o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W ÅrodÄ o] LT";case 6:return"[W sobotÄ o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszÅÄ niedzielÄ o] LT";case 3:return"[W zeszÅÄ ÅrodÄ o] LT";case 6:return"[W zeszÅÄ sobotÄ o] LT";default:return"[W zeszÅy] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:Or,m:Or,mm:Or,h:Or,hh:Or,d:"1 dzieÅ",dd:"%d dni",M:"miesiÄc",MM:Or,y:"rok",yy:Or},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("pt-br",{months:"janeiro_fevereiro_marÃ§o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_TerÃ§a-feira_Quarta-feira_Quinta-feira_Sexta-feira_SÃ¡bado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_SÃ¡b".split("_"),weekdaysMin:"Do_2Âª_3Âª_4Âª_5Âª_6Âª_SÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [Ã s] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [Ã s] HH:mm"},calendar:{sameDay:"[Hoje Ã s] LT",nextDay:"[AmanhÃ£ Ã s] LT",nextWeek:"dddd [Ã s] LT",lastDay:"[Ontem Ã s] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Ãltimo] dddd [Ã s] LT":"[Ãltima] dddd [Ã s] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"hÃ¡ %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mÃªs",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº"}),n.defineLocale("pt",{months:"janeiro_fevereiro_marÃ§o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_TerÃ§a-feira_Quarta-feira_Quinta-feira_Sexta-feira_SÃ¡bado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_SÃ¡b".split("_"),weekdaysMin:"Do_2Âª_3Âª_4Âª_5Âª_6Âª_SÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje Ã s] LT",nextDay:"[AmanhÃ£ Ã s] LT",nextWeek:"dddd [Ã s] LT",lastDay:"[Ontem Ã s] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Ãltimo] dddd [Ã s] LT":"[Ãltima] dddd [Ã s] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"hÃ¡ %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mÃªs",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}Âº/,ordinal:"%dÂº",week:{dow:1,doy:4}}),n.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminicÄ_luni_marÈi_miercuri_joi_vineri_sÃ¢mbÄtÄ".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_SÃ¢m".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_SÃ¢".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mÃ¢ine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s Ã®n urmÄ",s:"cÃ¢teva secunde",ss:Ar,m:"un minut",mm:Ar,h:"o orÄ",hh:Ar,d:"o zi",dd:Ar,M:"o lunÄ",MM:Ar,y:"un an",yy:Ar},week:{dow:1,doy:7}});var Cr=[/^ÑÐ½Ð²/i,/^ÑÐµÐ²/i,/^Ð¼Ð°Ñ/i,/^Ð°Ð¿Ñ/i,/^Ð¼Ð°[Ð¹Ñ]/i,/^Ð¸ÑÐ½/i,/^Ð¸ÑÐ»/i,/^Ð°Ð²Ð³/i,/^ÑÐµÐ½/i,/^Ð¾ÐºÑ/i,/^Ð½Ð¾Ñ/i,/^Ð´ÐµÐº/i];n.defineLocale("ru",{months:{format:"ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑÐ°_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑÐ°_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ".split("_"),standalone:"ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ".split("_")},monthsShort:{format:"ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.".split("_"),standalone:"ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°ÑÑ_Ð°Ð¿Ñ._Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.".split("_")},weekdays:{standalone:"Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÐ°_ÑÑÐ±Ð±Ð¾ÑÐ°".split("_"),format:"Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð±Ð¾ÑÑ".split("_"),isFormat:/\[ ?[ÐÐ²] ?(?:Ð¿ÑÐ¾ÑÐ»ÑÑ|ÑÐ»ÐµÐ´ÑÑÑÑÑ|ÑÑÑ)? ?\] ?dddd/},weekdaysShort:"Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),weekdaysMin:"Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),monthsParse:Cr,longMonthsParse:Cr,shortMonthsParse:Cr,monthsRegex:/^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,monthsShortRegex:/^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,monthsStrictRegex:/^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|Ð¼Ð°ÑÑÐ°?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ»[ÑÑ]|Ð°Ð²Ð³ÑÑÑÐ°?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ])/i,monthsShortStrictRegex:/^(ÑÐ½Ð²\.|ÑÐµÐ²Ñ?\.|Ð¼Ð°Ñ[Ñ.]|Ð°Ð¿Ñ\.|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ.]|Ð¸ÑÐ»[ÑÑ.]|Ð°Ð²Ð³\.|ÑÐµÐ½Ñ?\.|Ð¾ÐºÑ\.|Ð½Ð¾ÑÐ±?\.|Ð´ÐµÐº\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY Ð³.",LLL:"D MMMM YYYY Ð³., H:mm",LLLL:"dddd, D MMMM YYYY Ð³., H:mm"},calendar:{sameDay:"[Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ, Ð²] LT",nextDay:"[ÐÐ°Ð²ÑÑÐ°, Ð²] LT",lastDay:"[ÐÑÐµÑÐ°, Ð²] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[ÐÐ¾] dddd, [Ð²] LT":"[Ð] dddd, [Ð²] LT";switch(this.day()){case 0:return"[Ð ÑÐ»ÐµÐ´ÑÑÑÐµÐµ] dddd, [Ð²] LT";case 1:case 2:case 4:return"[Ð ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹] dddd, [Ð²] LT";case 3:case 5:case 6:return"[Ð ÑÐ»ÐµÐ´ÑÑÑÑÑ] dddd, [Ð²] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[ÐÐ¾] dddd, [Ð²] LT":"[Ð] dddd, [Ð²] LT";switch(this.day()){case 0:return"[Ð Ð¿ÑÐ¾ÑÐ»Ð¾Ðµ] dddd, [Ð²] LT";case 1:case 2:case 4:return"[Ð Ð¿ÑÐ¾ÑÐ»ÑÐ¹] dddd, [Ð²] LT";case 3:case 5:case 6:return"[Ð Ð¿ÑÐ¾ÑÐ»ÑÑ] dddd, [Ð²] LT"}},sameElse:"L"},relativeTime:{future:"ÑÐµÑÐµÐ· %s",past:"%s Ð½Ð°Ð·Ð°Ð´",s:"Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÐ½Ð´",ss:Wr,m:Wr,mm:Wr,h:"ÑÐ°Ñ",hh:Wr,d:"Ð´ÐµÐ½Ñ",dd:Wr,M:"Ð¼ÐµÑÑÑ",MM:Wr,y:"Ð³Ð¾Ð´",yy:Wr},meridiemParse:/Ð½Ð¾ÑÐ¸|ÑÑÑÐ°|Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°/i,isPM:function(e){return/^(Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°)$/.test(e)},meridiem:function(e,t,n){return e<4?"Ð½Ð¾ÑÐ¸":e<12?"ÑÑÑÐ°":e<17?"Ð´Ð½Ñ":"Ð²ÐµÑÐµÑÐ°"},dayOfMonthOrdinalParse:/\d{1,2}-(Ð¹|Ð³Ð¾|Ñ)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-Ð¹";case"D":return e+"-Ð³Ð¾";case"w":case"W":return e+"-Ñ";default:return e}},week:{dow:1,doy:4}});var Nr=["Ø¬ÙÙØ±Ù","ÙÙØ¨Ø±ÙØ±Ù","ÙØ§Ø±Ú","Ø§Ù¾Ø±ÙÙ","ÙØ¦Ù","Ø¬ÙÙ","Ø¬ÙÙØ§Ø¡Ù","Ø¢Ú¯Ø³Ù½","Ø³ÙÙ¾Ù½ÙØ¨Ø±","Ø¢ÚªÙ½ÙØ¨Ø±","ÙÙÙØ¨Ø±","ÚØ³ÙØ¨Ø±"],Fr=["Ø¢ÚØ±","Ø³ÙÙØ±","Ø§Ú±Ø§Ø±Ù","Ø§Ø±Ø¨Ø¹","Ø®ÙÙØ³","Ø¬ÙØ¹","ÚÙÚØ±"];n.defineLocale("sd",{months:Nr,monthsShort:Nr,weekdays:Fr,weekdaysShort:Fr,weekdaysMin:Fr,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ddddØ D MMMM YYYY HH:mm"},meridiemParse:/ØµØ¨Ø­|Ø´Ø§Ù/,isPM:function(e){return"Ø´Ø§Ù"===e},meridiem:function(e,t,n){return e<12?"ØµØ¨Ø­":"Ø´Ø§Ù"},calendar:{sameDay:"[Ø§Ú] LT",nextDay:"[Ø³ÚØ§Ú»Ù] LT",nextWeek:"dddd [Ø§Ú³ÙÙ ÙÙØªÙ ØªÙ] LT",lastDay:"[ÚªØ§ÙÙÙ] LT",lastWeek:"[Ú¯Ø²Ø±ÙÙ ÙÙØªÙ] dddd [ØªÙ] LT",sameElse:"L"},relativeTime:{future:"%s Ù¾ÙØ¡",past:"%s Ø§Ú³",s:"ÚÙØ¯ Ø³ÙÚªÙÚ",ss:"%d Ø³ÙÚªÙÚ",m:"ÙÚª ÙÙÙ½",mm:"%d ÙÙÙ½",h:"ÙÚª ÚªÙØ§Úª",hh:"%d ÚªÙØ§Úª",d:"ÙÚª ÚÙÙÙÙ",dd:"%d ÚÙÙÙÙ",M:"ÙÚª ÙÙÙÙÙ",MM:"%d ÙÙÙÙØ§",y:"ÙÚª Ø³Ø§Ù",yy:"%d Ø³Ø§Ù"},preparse:function(e){return e.replace(/Ø/g,",")},postformat:function(e){return e.replace(/,/g,"Ø")},week:{dow:1,doy:4}}),n.defineLocale("se",{months:"oÄÄajagemÃ¡nnu_guovvamÃ¡nnu_njukÄamÃ¡nnu_cuoÅomÃ¡nnu_miessemÃ¡nnu_geassemÃ¡nnu_suoidnemÃ¡nnu_borgemÃ¡nnu_ÄakÄamÃ¡nnu_golggotmÃ¡nnu_skÃ¡bmamÃ¡nnu_juovlamÃ¡nnu".split("_"),monthsShort:"oÄÄj_guov_njuk_cuo_mies_geas_suoi_borg_ÄakÄ_golg_skÃ¡b_juov".split("_"),weekdays:"sotnabeaivi_vuossÃ¡rga_maÅÅebÃ¡rga_gaskavahkku_duorastat_bearjadat_lÃ¡vvardat".split("_"),weekdaysShort:"sotn_vuos_maÅ_gask_duor_bear_lÃ¡v".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geaÅ¾es",past:"maÅit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mÃ¡nnu",MM:"%d mÃ¡nut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("si",{months:"à¶¢à¶±à·à·à¶»à·_à¶´à·à¶¶à¶»à·à·à¶»à·_à¶¸à·à¶»à·à¶­à·_à¶à¶´à·âà¶»à·à¶½à·_à¶¸à·à¶ºà·_à¶¢à·à¶±à·_à¶¢à·à¶½à·_à¶à¶à·à·à·à¶­à·_à·à·à¶´à·à¶­à·à¶¸à·à¶¶à¶»à·_à¶à¶à·à¶­à·à¶¶à¶»à·_à¶±à·à·à·à¶¸à·à¶¶à¶»à·_à¶¯à·à·à·à¶¸à·à¶¶à¶»à·".split("_"),monthsShort:"à¶¢à¶±_à¶´à·à¶¶_à¶¸à·à¶»à·_à¶à¶´à·_à¶¸à·à¶ºà·_à¶¢à·à¶±à·_à¶¢à·à¶½à·_à¶à¶à·_à·à·à¶´à·_à¶à¶à·_à¶±à·à·à·_à¶¯à·à·à·".split("_"),weekdays:"à¶à¶»à·à¶¯à·_à·à¶³à·à¶¯à·_à¶à¶à·à¶»à·à·à·à¶¯à·_à¶¶à¶¯à·à¶¯à·_à¶¶à·âà¶»à·à·à·à¶´à¶­à·à¶±à·à¶¯à·_à·à·à¶à·à¶»à·à¶¯à·_à·à·à¶±à·à·à¶»à·à¶¯à·".split("_"),weekdaysShort:"à¶à¶»à·_à·à¶³à·_à¶à¶_à¶¶à¶¯à·_à¶¶à·âà¶»à·_à·à·à¶à·_à·à·à¶±".split("_"),weekdaysMin:"à¶_à·_à¶_à¶¶_à¶¶à·âà¶»_à·à·_à·à·".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [à·à·à¶±à·] dddd, a h:mm:ss"},calendar:{sameDay:"[à¶à¶¯] LT[à¶§]",nextDay:"[à·à·à¶§] LT[à¶§]",nextWeek:"dddd LT[à¶§]",lastDay:"[à¶à¶ºà·] LT[à¶§]",lastWeek:"[à¶´à·à·à¶à·à¶º] dddd LT[à¶§]",sameElse:"L"},relativeTime:{future:"%sà¶à·à¶±à·",past:"%sà¶à¶§ à¶´à·à¶»",s:"à¶­à¶­à·à¶´à¶» à¶à·à·à·à¶´à¶º",ss:"à¶­à¶­à·à¶´à¶» %d",m:"à¶¸à·à¶±à·à¶­à·à¶­à·à·",mm:"à¶¸à·à¶±à·à¶­à·à¶­à· %d",h:"à¶´à·à¶º",hh:"à¶´à·à¶º %d",d:"à¶¯à·à¶±à¶º",dd:"à¶¯à·à¶± %d",M:"à¶¸à·à·à¶º",MM:"à¶¸à·à· %d",y:"à·à·à¶»",yy:"à·à·à¶» %d"},dayOfMonthOrdinalParse:/\d{1,2} à·à·à¶±à·/,ordinal:function(e){return e+" à·à·à¶±à·"},meridiemParse:/à¶´à·à¶» à·à¶»à·|à¶´à·à· à·à¶»à·|à¶´à·.à·|à¶´.à·./,isPM:function(e){return"à¶´.à·."===e||"à¶´à·à· à·à¶»à·"===e},meridiem:function(e,t,n){return e>11?n?"à¶´.à·.":"à¶´à·à· à·à¶»à·":n?"à¶´à·.à·.":"à¶´à·à¶» à·à¶»à·"}});var Ir="januÃ¡r_februÃ¡r_marec_aprÃ­l_mÃ¡j_jÃºn_jÃºl_august_september_oktÃ³ber_november_december".split("_"),zr="jan_feb_mar_apr_mÃ¡j_jÃºn_jÃºl_aug_sep_okt_nov_dec".split("_");function Rr(e){return e>1&&e<5}function Jr(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"pÃ¡r sekÃºnd":"pÃ¡r sekundami";case"ss":return t||a?r+(Rr(e)?"sekundy":"sekÃºnd"):r+"sekundami";case"m":return t?"minÃºta":a?"minÃºtu":"minÃºtou";case"mm":return t||a?r+(Rr(e)?"minÃºty":"minÃºt"):r+"minÃºtami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?r+(Rr(e)?"hodiny":"hodÃ­n"):r+"hodinami";case"d":return t||a?"deÅ":"dÅom";case"dd":return t||a?r+(Rr(e)?"dni":"dnÃ­"):r+"dÅami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?r+(Rr(e)?"mesiace":"mesiacov"):r+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?r+(Rr(e)?"roky":"rokov"):r+"rokmi"}}function $r(e,t,n,a){var r=e+" ";switch(n){case"s":return t||a?"nekaj sekund":"nekaj sekundami";case"ss":return r+=1===e?t?"sekundo":"sekundi":2===e?t||a?"sekundi":"sekundah":e<5?t||a?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return r+=1===e?t?"minuta":"minuto":2===e?t||a?"minuti":"minutama":e<5?t||a?"minute":"minutami":t||a?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return r+=1===e?t?"ura":"uro":2===e?t||a?"uri":"urama":e<5?t||a?"ure":"urami":t||a?"ur":"urami";case"d":return t||a?"en dan":"enim dnem";case"dd":return r+=1===e?t||a?"dan":"dnem":2===e?t||a?"dni":"dnevoma":t||a?"dni":"dnevi";case"M":return t||a?"en mesec":"enim mesecem";case"MM":return r+=1===e?t||a?"mesec":"mesecem":2===e?t||a?"meseca":"mesecema":e<5?t||a?"mesece":"meseci":t||a?"mesecev":"meseci";case"y":return t||a?"eno leto":"enim letom";case"yy":return r+=1===e?t||a?"leto":"letom":2===e?t||a?"leti":"letoma":e<5?t||a?"leta":"leti":t||a?"let":"leti"}}n.defineLocale("sk",{months:Ir,monthsShort:zr,weekdays:"nedeÄ¾a_pondelok_utorok_streda_Å¡tvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_Å¡t_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_Å¡t_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeÄ¾u o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo Å¡tvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[vÄera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulÃº nedeÄ¾u o] LT";case 1:case 2:return"[minulÃ½] dddd [o] LT";case 3:return"[minulÃº stredu o] LT";case 4:case 5:return"[minulÃ½] dddd [o] LT";case 6:return"[minulÃº sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:Jr,ss:Jr,m:Jr,mm:Jr,h:Jr,hh:Jr,d:Jr,dd:Jr,M:Jr,MM:Jr,y:Jr,yy:Jr},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_Äetrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._Äet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_Äe_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[vÄeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejÅ¡njo] [nedeljo] [ob] LT";case 3:return"[prejÅ¡njo] [sredo] [ob] LT";case 6:return"[prejÅ¡njo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejÅ¡nji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"Äez %s",past:"pred %s",s:$r,ss:$r,m:$r,mm:$r,h:$r,hh:$r,d:$r,dd:$r,M:$r,MM:$r,y:$r,yy:$r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),n.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_NÃ«ntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_NÃ«n_Dhj".split("_"),weekdays:"E Diel_E HÃ«nÃ«_E MartÃ«_E MÃ«rkurÃ«_E Enjte_E Premte_E ShtunÃ«".split("_"),weekdaysShort:"Die_HÃ«n_Mar_MÃ«r_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_MÃ«_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot nÃ«] LT",nextDay:"[NesÃ«r nÃ«] LT",nextWeek:"dddd [nÃ«] LT",lastDay:"[Dje nÃ«] LT",lastWeek:"dddd [e kaluar nÃ«] LT",sameElse:"L"},relativeTime:{future:"nÃ« %s",past:"%s mÃ« parÃ«",s:"disa sekonda",ss:"%d sekonda",m:"njÃ« minutÃ«",mm:"%d minuta",h:"njÃ« orÃ«",hh:"%d orÃ«",d:"njÃ« ditÃ«",dd:"%d ditÃ«",M:"njÃ« muaj",MM:"%d muaj",y:"njÃ« vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Br={words:{ss:["ÑÐµÐºÑÐ½Ð´Ð°","ÑÐµÐºÑÐ½Ð´Ðµ","ÑÐµÐºÑÐ½Ð´Ð¸"],m:["ÑÐµÐ´Ð°Ð½ Ð¼Ð¸Ð½ÑÑ","ÑÐµÐ´Ð½Ðµ Ð¼Ð¸Ð½ÑÑÐµ"],mm:["Ð¼Ð¸Ð½ÑÑ","Ð¼Ð¸Ð½ÑÑÐµ","Ð¼Ð¸Ð½ÑÑÐ°"],h:["ÑÐµÐ´Ð°Ð½ ÑÐ°Ñ","ÑÐµÐ´Ð½Ð¾Ð³ ÑÐ°ÑÐ°"],hh:["ÑÐ°Ñ","ÑÐ°ÑÐ°","ÑÐ°ÑÐ¸"],dd:["Ð´Ð°Ð½","Ð´Ð°Ð½Ð°","Ð´Ð°Ð½Ð°"],MM:["Ð¼ÐµÑÐµÑ","Ð¼ÐµÑÐµÑÐ°","Ð¼ÐµÑÐµÑÐ¸"],yy:["Ð³Ð¾Ð´Ð¸Ð½Ð°","Ð³Ð¾Ð´Ð¸Ð½Ðµ","Ð³Ð¾Ð´Ð¸Ð½Ð°"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,t,n){var a=Br.words[n];return 1===n.length?t?a[0]:a[1]:e+" "+Br.correctGrammaticalCase(e,a)}};n.defineLocale("sr-cyrl",{months:"ÑÐ°Ð½ÑÐ°Ñ_ÑÐµÐ±ÑÑÐ°Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ_Ð¾ÐºÑÐ¾Ð±Ð°Ñ_Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ_Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ".split("_"),monthsShort:"ÑÐ°Ð½._ÑÐµÐ±._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³._ÑÐµÐ¿._Ð¾ÐºÑ._Ð½Ð¾Ð²._Ð´ÐµÑ.".split("_"),monthsParseExact:!0,weekdays:"Ð½ÐµÐ´ÐµÑÐ°_Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº_ÑÑÐ¾ÑÐ°Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ°Ðº_Ð¿ÐµÑÐ°Ðº_ÑÑÐ±Ð¾ÑÐ°".split("_"),weekdaysShort:"Ð½ÐµÐ´._Ð¿Ð¾Ð½._ÑÑÐ¾._ÑÑÐµ._ÑÐµÑ._Ð¿ÐµÑ._ÑÑÐ±.".split("_"),weekdaysMin:"Ð½Ðµ_Ð¿Ð¾_ÑÑ_ÑÑ_ÑÐµ_Ð¿Ðµ_ÑÑ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Ð´Ð°Ð½Ð°Ñ Ñ] LT",nextDay:"[ÑÑÑÑÐ° Ñ] LT",nextWeek:function(){switch(this.day()){case 0:return"[Ñ] [Ð½ÐµÐ´ÐµÑÑ] [Ñ] LT";case 3:return"[Ñ] [ÑÑÐµÐ´Ñ] [Ñ] LT";case 6:return"[Ñ] [ÑÑÐ±Ð¾ÑÑ] [Ñ] LT";case 1:case 2:case 4:case 5:return"[Ñ] dddd [Ñ] LT"}},lastDay:"[ÑÑÑÐµ Ñ] LT",lastWeek:function(){return["[Ð¿ÑÐ¾ÑÐ»Ðµ] [Ð½ÐµÐ´ÐµÑÐµ] [Ñ] LT","[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐºÐ°] [Ñ] LT","[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [ÑÑÐ¾ÑÐºÐ°] [Ñ] LT","[Ð¿ÑÐ¾ÑÐ»Ðµ] [ÑÑÐµÐ´Ðµ] [Ñ] LT","[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [ÑÐµÑÐ²ÑÑÐºÐ°] [Ñ] LT","[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [Ð¿ÐµÑÐºÐ°] [Ñ] LT","[Ð¿ÑÐ¾ÑÐ»Ðµ] [ÑÑÐ±Ð¾ÑÐµ] [Ñ] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"Ð·Ð° %s",past:"Ð¿ÑÐµ %s",s:"Ð½ÐµÐºÐ¾Ð»Ð¸ÐºÐ¾ ÑÐµÐºÑÐ½Ð´Ð¸",ss:Br.translate,m:Br.translate,mm:Br.translate,h:Br.translate,hh:Br.translate,d:"Ð´Ð°Ð½",dd:Br.translate,M:"Ð¼ÐµÑÐµÑ",MM:Br.translate,y:"Ð³Ð¾Ð´Ð¸Ð½Ñ",yy:Br.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});var qr={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,t,n){var a=qr.words[n];return 1===n.length?t?a[0]:a[1]:e+" "+qr.correctGrammaticalCase(e,a)}};n.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_Äetvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._Äet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_Äe_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juÄe u] LT",lastWeek:function(){return["[proÅ¡le] [nedelje] [u] LT","[proÅ¡log] [ponedeljka] [u] LT","[proÅ¡log] [utorka] [u] LT","[proÅ¡le] [srede] [u] LT","[proÅ¡log] [Äetvrtka] [u] LT","[proÅ¡log] [petka] [u] LT","[proÅ¡le] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:qr.translate,m:qr.translate,mm:qr.translate,h:qr.translate,hh:qr.translate,d:"dan",dd:qr.translate,M:"mesec",MM:qr.translate,y:"godinu",yy:qr.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),n.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}}),n.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag".split("_"),weekdaysShort:"sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r".split("_"),weekdaysMin:"sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[IgÃ¥r] LT",nextWeek:"[PÃ¥] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"fÃ¶r %s sedan",s:"nÃ¥gra sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en mÃ¥nad",MM:"%d mÃ¥nader",y:"ett Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}}),n.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}});var Ur={1:"à¯§",2:"à¯¨",3:"à¯©",4:"à¯ª",5:"à¯«",6:"à¯¬",7:"à¯­",8:"à¯®",9:"à¯¯",0:"à¯¦"},Vr={"à¯§":"1","à¯¨":"2","à¯©":"3","à¯ª":"4","à¯«":"5","à¯¬":"6","à¯­":"7","à¯®":"8","à¯¯":"9","à¯¦":"0"};n.defineLocale("ta",{months:"à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯".split("_"),monthsShort:"à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯".split("_"),weekdays:"à®à®¾à®¯à®¿à®±à¯à®±à¯à®à¯à®à®¿à®´à®®à¯_à®¤à®¿à®à¯à®à®à¯à®à®¿à®´à®®à¯_à®à¯à®µà¯à®µà®¾à®¯à¯à®à®¿à®´à®®à¯_à®ªà¯à®¤à®©à¯à®à®¿à®´à®®à¯_à®µà®¿à®¯à®¾à®´à®à¯à®à®¿à®´à®®à¯_à®µà¯à®³à¯à®³à®¿à®à¯à®à®¿à®´à®®à¯_à®à®©à®¿à®à¯à®à®¿à®´à®®à¯".split("_"),weekdaysShort:"à®à®¾à®¯à®¿à®±à¯_à®¤à®¿à®à¯à®à®³à¯_à®à¯à®µà¯à®µà®¾à®¯à¯_à®ªà¯à®¤à®©à¯_à®µà®¿à®¯à®¾à®´à®©à¯_à®µà¯à®³à¯à®³à®¿_à®à®©à®¿".split("_"),weekdaysMin:"à®à®¾_à®¤à®¿_à®à¯_à®ªà¯_à®µà®¿_à®µà¯_à®".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[à®à®©à¯à®±à¯] LT",nextDay:"[à®¨à®¾à®³à¯] LT",nextWeek:"dddd, LT",lastDay:"[à®¨à¯à®±à¯à®±à¯] LT",lastWeek:"[à®à®à®¨à¯à®¤ à®µà®¾à®°à®®à¯] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à®à®²à¯",past:"%s à®®à¯à®©à¯",s:"à®à®°à¯ à®à®¿à®² à®µà®¿à®¨à®¾à®à®¿à®à®³à¯",ss:"%d à®µà®¿à®¨à®¾à®à®¿à®à®³à¯",m:"à®à®°à¯ à®¨à®¿à®®à®¿à®à®®à¯",mm:"%d à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯",h:"à®à®°à¯ à®®à®£à®¿ à®¨à¯à®°à®®à¯",hh:"%d à®®à®£à®¿ à®¨à¯à®°à®®à¯",d:"à®à®°à¯ à®¨à®¾à®³à¯",dd:"%d à®¨à®¾à®à¯à®à®³à¯",M:"à®à®°à¯ à®®à®¾à®¤à®®à¯",MM:"%d à®®à®¾à®¤à®à¯à®à®³à¯",y:"à®à®°à¯ à®µà®°à¯à®à®®à¯",yy:"%d à®à®£à¯à®à¯à®à®³à¯"},dayOfMonthOrdinalParse:/\d{1,2}à®µà®¤à¯/,ordinal:function(e){return e+"à®µà®¤à¯"},preparse:function(e){return e.replace(/[à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à¯¦]/g,function(e){return Vr[e]})},postformat:function(e){return e.replace(/\d/g,function(e){return Ur[e]})},meridiemParse:/à®¯à®¾à®®à®®à¯|à®µà¯à®à®±à¯|à®à®¾à®²à¯|à®¨à®£à¯à®ªà®à®²à¯|à®à®±à¯à®ªà®¾à®à¯|à®®à®¾à®²à¯/,meridiem:function(e,t,n){return e<2?" à®¯à®¾à®®à®®à¯":e<6?" à®µà¯à®à®±à¯":e<10?" à®à®¾à®²à¯":e<14?" à®¨à®£à¯à®ªà®à®²à¯":e<18?" à®à®±à¯à®ªà®¾à®à¯":e<22?" à®®à®¾à®²à¯":" à®¯à®¾à®®à®®à¯"},meridiemHour:function(e,t){return 12===e&&(e=0),"à®¯à®¾à®®à®®à¯"===t?e<2?e:e+12:"à®µà¯à®à®±à¯"===t||"à®à®¾à®²à¯"===t?e:"à®¨à®£à¯à®ªà®à®²à¯"===t&&e>=10?e:e+12},week:{dow:0,doy:6}}),n.defineLocale("te",{months:"à°à°¨à°µà°°à°¿_à°«à°¿à°¬à±à°°à°µà°°à°¿_à°®à°¾à°°à±à°à°¿_à°à°ªà±à°°à°¿à°²à±_à°®à±_à°à±à°¨à±_à°à±à°²à±à±_à°à°à°¸à±à°à±_à°¸à±à°ªà±à°à±à°à°¬à°°à±_à°à°à±à°à±à°¬à°°à±_à°¨à°µà°à°¬à°°à±_à°¡à°¿à°¸à±à°à°¬à°°à±".split("_"),monthsShort:"à°à°¨._à°«à°¿à°¬à±à°°._à°®à°¾à°°à±à°à°¿_à°à°ªà±à°°à°¿._à°®à±_à°à±à°¨à±_à°à±à°²à±à±_à°à°._à°¸à±à°ªà±._à°à°à±à°à±._à°¨à°µ._à°¡à°¿à°¸à±.".split("_"),monthsParseExact:!0,weekdays:"à°à°¦à°¿à°µà°¾à°°à°_à°¸à±à°®à°µà°¾à°°à°_à°®à°à°à°³à°µà°¾à°°à°_à°¬à±à°§à°µà°¾à°°à°_à°à±à°°à±à°µà°¾à°°à°_à°¶à±à°à±à°°à°µà°¾à°°à°_à°¶à°¨à°¿à°µà°¾à°°à°".split("_"),weekdaysShort:"à°à°¦à°¿_à°¸à±à°®_à°®à°à°à°³_à°¬à±à°§_à°à±à°°à±_à°¶à±à°à±à°°_à°¶à°¨à°¿".split("_"),weekdaysMin:"à°_à°¸à±_à°®à°_à°¬à±_à°à±_à°¶à±_à°¶".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[à°¨à±à°¡à±] LT",nextDay:"[à°°à±à°ªà±] LT",nextWeek:"dddd, LT",lastDay:"[à°¨à°¿à°¨à±à°¨] LT",lastWeek:"[à°à°¤] dddd, LT",sameElse:"L"},relativeTime:{future:"%s à°²à±",past:"%s à°à±à°°à°¿à°¤à°",s:"à°à±à°¨à±à°¨à°¿ à°à±à°·à°£à°¾à°²à±",ss:"%d à°¸à±à°à°¨à±à°²à±",m:"à°à° à°¨à°¿à°®à°¿à°·à°",mm:"%d à°¨à°¿à°®à°¿à°·à°¾à°²à±",h:"à°à° à°à°à°",hh:"%d à°à°à°à°²à±",d:"à°à° à°°à±à°à±",dd:"%d à°°à±à°à±à°²à±",M:"à°à° à°¨à±à°²",MM:"%d à°¨à±à°²à°²à±",y:"à°à° à°¸à°à°µà°¤à±à°¸à°°à°",yy:"%d à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±"},dayOfMonthOrdinalParse:/\d{1,2}à°µ/,ordinal:"%dà°µ",meridiemParse:/à°°à°¾à°¤à±à°°à°¿|à°à°¦à°¯à°|à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°¸à°¾à°¯à°à°¤à±à°°à°/,meridiemHour:function(e,t){return 12===e&&(e=0),"à°°à°¾à°¤à±à°°à°¿"===t?e<4?e:e+12:"à°à°¦à°¯à°"===t?e:"à°®à°§à±à°¯à°¾à°¹à±à°¨à°"===t?e>=10?e:e+12:"à°¸à°¾à°¯à°à°¤à±à°°à°"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"à°°à°¾à°¤à±à°°à°¿":e<10?"à°à°¦à°¯à°":e<17?"à°®à°§à±à°¯à°¾à°¹à±à°¨à°":e<20?"à°¸à°¾à°¯à°à°¤à±à°°à°":"à°°à°¾à°¤à±à°°à°¿"},week:{dow:0,doy:6}}),n.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_JuÃ±u_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}});var Gr={0:"-ÑÐ¼",1:"-ÑÐ¼",2:"-ÑÐ¼",3:"-ÑÐ¼",4:"-ÑÐ¼",5:"-ÑÐ¼",6:"-ÑÐ¼",7:"-ÑÐ¼",8:"-ÑÐ¼",9:"-ÑÐ¼",10:"-ÑÐ¼",12:"-ÑÐ¼",13:"-ÑÐ¼",20:"-ÑÐ¼",30:"-ÑÐ¼",40:"-ÑÐ¼",50:"-ÑÐ¼",60:"-ÑÐ¼",70:"-ÑÐ¼",80:"-ÑÐ¼",90:"-ÑÐ¼",100:"-ÑÐ¼"};n.defineLocale("tg",{months:"ÑÐ½Ð²Ð°Ñ_ÑÐµÐ²ÑÐ°Ð»_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±Ñ_Ð¾ÐºÑÑÐ±Ñ_Ð½Ð¾ÑÐ±Ñ_Ð´ÐµÐºÐ°Ð±Ñ".split("_"),monthsShort:"ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº".split("_"),weekdays:"ÑÐºÑÐ°Ð½Ð±Ðµ_Ð´ÑÑÐ°Ð½Ð±Ðµ_ÑÐµÑÐ°Ð½Ð±Ðµ_ÑÐ¾ÑÑÐ°Ð½Ð±Ðµ_Ð¿Ð°Ð½Ò·ÑÐ°Ð½Ð±Ðµ_Ò·ÑÐ¼ÑÐ°_ÑÐ°Ð½Ð±Ðµ".split("_"),weekdaysShort:"ÑÑÐ±_Ð´ÑÐ±_ÑÑÐ±_ÑÑÐ±_Ð¿ÑÐ±_Ò·ÑÐ¼_ÑÐ½Ð±".split("_"),weekdaysMin:"ÑÑ_Ð´Ñ_ÑÑ_ÑÑ_Ð¿Ñ_Ò·Ð¼_ÑÐ±".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ÐÐ¼ÑÓ¯Ð· ÑÐ¾Ð°ÑÐ¸] LT",nextDay:"[ÐÐ°Ð³Ð¾Ò³ ÑÐ¾Ð°ÑÐ¸] LT",lastDay:"[ÐÐ¸ÑÓ¯Ð· ÑÐ¾Ð°ÑÐ¸] LT",nextWeek:"dddd[Ð¸] [Ò³Ð°ÑÑÐ°Ð¸ Ð¾ÑÐ½Ð´Ð° ÑÐ¾Ð°ÑÐ¸] LT",lastWeek:"dddd[Ð¸] [Ò³Ð°ÑÑÐ°Ð¸ Ð³ÑÐ·Ð°ÑÑÐ° ÑÐ¾Ð°ÑÐ¸] LT",sameElse:"L"},relativeTime:{future:"Ð±Ð°ÑÐ´Ð¸ %s",past:"%s Ð¿ÐµÑ",s:"ÑÐºÑÐ°Ð½Ð´ ÑÐ¾Ð½Ð¸Ñ",m:"ÑÐº Ð´Ð°ÒÐ¸ÒÐ°",mm:"%d Ð´Ð°ÒÐ¸ÒÐ°",h:"ÑÐº ÑÐ¾Ð°Ñ",hh:"%d ÑÐ¾Ð°Ñ",d:"ÑÐº ÑÓ¯Ð·",dd:"%d ÑÓ¯Ð·",M:"ÑÐº Ð¼Ð¾Ò³",MM:"%d Ð¼Ð¾Ò³",y:"ÑÐº ÑÐ¾Ð»",yy:"%d ÑÐ¾Ð»"},meridiemParse:/ÑÐ°Ð±|ÑÑÐ±Ò³|ÑÓ¯Ð·|Ð±ÐµÐ³Ð¾Ò³/,meridiemHour:function(e,t){return 12===e&&(e=0),"ÑÐ°Ð±"===t?e<4?e:e+12:"ÑÑÐ±Ò³"===t?e:"ÑÓ¯Ð·"===t?e>=11?e:e+12:"Ð±ÐµÐ³Ð¾Ò³"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ÑÐ°Ð±":e<11?"ÑÑÐ±Ò³":e<16?"ÑÓ¯Ð·":e<19?"Ð±ÐµÐ³Ð¾Ò³":"ÑÐ°Ð±"},dayOfMonthOrdinalParse:/\d{1,2}-(ÑÐ¼|ÑÐ¼)/,ordinal:function(e){return e+(Gr[e]||Gr[e%10]||Gr[e>=100?100:null])},week:{dow:1,doy:7}}),n.defineLocale("th",{months:"à¸¡à¸à¸£à¸²à¸à¸¡_à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹_à¸¡à¸µà¸à¸²à¸à¸¡_à¹à¸¡à¸©à¸²à¸¢à¸_à¸à¸¤à¸©à¸ à¸²à¸à¸¡_à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸_à¸à¸£à¸à¸à¸²à¸à¸¡_à¸ªà¸´à¸à¸«à¸²à¸à¸¡_à¸à¸±à¸à¸¢à¸²à¸¢à¸_à¸à¸¸à¸¥à¸²à¸à¸¡_à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸_à¸à¸±à¸à¸§à¸²à¸à¸¡".split("_"),monthsShort:"à¸¡.à¸._à¸.à¸._à¸¡à¸µ.à¸._à¹à¸¡.à¸¢._à¸.à¸._à¸¡à¸´.à¸¢._à¸.à¸._à¸ª.à¸._à¸.à¸¢._à¸.à¸._à¸.à¸¢._à¸.à¸.".split("_"),monthsParseExact:!0,weekdays:"à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹".split("_"),weekdaysShort:"à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ª_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹".split("_"),weekdaysMin:"à¸­à¸²._à¸._à¸­._à¸._à¸à¸¤._à¸¨._à¸ª.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY à¹à¸§à¸¥à¸² H:mm",LLLL:"à¸§à¸±à¸ddddà¸à¸µà¹ D MMMM YYYY à¹à¸§à¸¥à¸² H:mm"},meridiemParse:/à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸|à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸/,isPM:function(e){return"à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸"===e},meridiem:function(e,t,n){return e<12?"à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸":"à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸"},calendar:{sameDay:"[à¸§à¸±à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT",nextDay:"[à¸à¸£à¸¸à¹à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT",nextWeek:"dddd[à¸«à¸à¹à¸² à¹à¸§à¸¥à¸²] LT",lastDay:"[à¹à¸¡à¸·à¹à¸­à¸§à¸²à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT",lastWeek:"[à¸§à¸±à¸]dddd[à¸à¸µà¹à¹à¸¥à¹à¸§ à¹à¸§à¸¥à¸²] LT",sameElse:"L"},relativeTime:{future:"à¸­à¸µà¸ %s",past:"%sà¸à¸µà¹à¹à¸¥à¹à¸§",s:"à¹à¸¡à¹à¸à¸µà¹à¸§à¸´à¸à¸²à¸à¸µ",ss:"%d à¸§à¸´à¸à¸²à¸à¸µ",m:"1 à¸à¸²à¸à¸µ",mm:"%d à¸à¸²à¸à¸µ",h:"1 à¸à¸±à¹à¸§à¹à¸¡à¸",hh:"%d à¸à¸±à¹à¸§à¹à¸¡à¸",d:"1 à¸§à¸±à¸",dd:"%d à¸§à¸±à¸",M:"1 à¹à¸à¸·à¸­à¸",MM:"%d à¹à¸à¸·à¸­à¸",y:"1 à¸à¸µ",yy:"%d à¸à¸µ"}}),n.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}});var Kr="pagh_waâ_chaâ_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function Zr(e,t,n,a){var r=function(e){var t=Math.floor(e%1e3/100),n=Math.floor(e%100/10),a=e%10,r="";t>0&&(r+=Kr[t]+"vatlh");n>0&&(r+=(""!==r?" ":"")+Kr[n]+"maH");a>0&&(r+=(""!==r?" ":"")+Kr[a]);return""===r?"pagh":r}(e);switch(n){case"ss":return r+" lup";case"mm":return r+" tup";case"hh":return r+" rep";case"dd":return r+" jaj";case"MM":return r+" jar";case"yy":return r+" DIS"}}n.defineLocale("tlh",{months:"teraâ jar waâ_teraâ jar chaâ_teraâ jar wej_teraâ jar loS_teraâ jar vagh_teraâ jar jav_teraâ jar Soch_teraâ jar chorgh_teraâ jar Hut_teraâ jar waâmaH_teraâ jar waâmaH waâ_teraâ jar waâmaH chaâ".split("_"),monthsShort:"jar waâ_jar chaâ_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar waâmaH_jar waâmaH waâ_jar waâmaH chaâ".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[waâleS] LT",nextWeek:"LLL",lastDay:"[waâHuâ] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Huâ":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:Zr,m:"waâ tup",mm:Zr,h:"waâ rep",hh:Zr,d:"waâ jaj",dd:Zr,M:"waâ jar",MM:Zr,y:"waâ DIS",yy:Zr},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});var Xr={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'Ã¼ncÃ¼",4:"'Ã¼ncÃ¼",100:"'Ã¼ncÃ¼",6:"'ncÄ±",9:"'uncu",10:"'uncu",30:"'uncu",60:"'Ä±ncÄ±",90:"'Ä±ncÄ±"};function Qr(e,t,n,a){var r={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n mÃ­ut","'iens mÃ­ut"],mm:[e+" mÃ­uts",e+" mÃ­uts"],h:["'n Ã¾ora","'iensa Ã¾ora"],hh:[e+" Ã¾oras",e+" Ã¾oras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return a?r[n][0]:t?r[n][0]:r[n][1]}function es(e,t,n){var a,r;return"m"===n?t?"ÑÐ²Ð¸Ð»Ð¸Ð½Ð°":"ÑÐ²Ð¸Ð»Ð¸Ð½Ñ":"h"===n?t?"Ð³Ð¾Ð´Ð¸Ð½Ð°":"Ð³Ð¾Ð´Ð¸Ð½Ñ":e+" "+(a=+e,r={ss:t?"ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ð¸_ÑÐµÐºÑÐ½Ð´":"ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ð¸_ÑÐµÐºÑÐ½Ð´",mm:t?"ÑÐ²Ð¸Ð»Ð¸Ð½Ð°_ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸_ÑÐ²Ð¸Ð»Ð¸Ð½":"ÑÐ²Ð¸Ð»Ð¸Ð½Ñ_ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸_ÑÐ²Ð¸Ð»Ð¸Ð½",hh:t?"Ð³Ð¾Ð´Ð¸Ð½Ð°_Ð³Ð¾Ð´Ð¸Ð½Ð¸_Ð³Ð¾Ð´Ð¸Ð½":"Ð³Ð¾Ð´Ð¸Ð½Ñ_Ð³Ð¾Ð´Ð¸Ð½Ð¸_Ð³Ð¾Ð´Ð¸Ð½",dd:"Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÑÐ²",MM:"Ð¼ÑÑÑÑÑ_Ð¼ÑÑÑÑÑ_Ð¼ÑÑÑÑÑÐ²",yy:"ÑÑÐº_ÑÐ¾ÐºÐ¸_ÑÐ¾ÐºÑÐ²"}[n].split("_"),a%10==1&&a%100!=11?r[0]:a%10>=2&&a%10<=4&&(a%100<10||a%100>=20)?r[1]:r[2])}function ts(e){return function(){return e+"Ð¾"+(11===this.hours()?"Ð±":"")+"] LT"}}n.defineLocale("tr",{months:"Ocak_Åubat_Mart_Nisan_MayÄ±s_Haziran_Temmuz_AÄustos_EylÃ¼l_Ekim_KasÄ±m_AralÄ±k".split("_"),monthsShort:"Oca_Åub_Mar_Nis_May_Haz_Tem_AÄu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_SalÄ±_ÃarÅamba_PerÅembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Ãar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ãa_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugÃ¼n saat] LT",nextDay:"[yarÄ±n saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dÃ¼n] LT",lastWeek:"[geÃ§en] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s Ã¶nce",s:"birkaÃ§ saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gÃ¼n",dd:"%d gÃ¼n",M:"bir ay",MM:"%d ay",y:"bir yÄ±l",yy:"%d yÄ±l"},ordinal:function(e,t){switch(t){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'Ä±ncÄ±";var n=e%10;return e+(Xr[n]||Xr[e%100-n]||Xr[e>=100?100:null])}},week:{dow:1,doy:7}}),n.defineLocale("tzl",{months:"Januar_Fevraglh_MarÃ§_AvrÃ¯u_Mai_GÃ¼n_Julia_Guscht_Setemvar_ListopÃ¤ts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_GÃ¼n_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"SÃºladi_LÃºneÃ§i_Maitzi_MÃ¡rcuri_XhÃºadi_ViÃ©nerÃ§i_SÃ¡turi".split("_"),weekdaysShort:"SÃºl_LÃºn_Mai_MÃ¡r_XhÃº_ViÃ©_SÃ¡t".split("_"),weekdaysMin:"SÃº_LÃº_Ma_MÃ¡_Xh_Vi_SÃ¡".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi Ã ] LT",nextDay:"[demÃ  Ã ] LT",nextWeek:"dddd [Ã ] LT",lastDay:"[ieiri Ã ] LT",lastWeek:"[sÃ¼r el] dddd [lasteu Ã ] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:Qr,ss:Qr,m:Qr,mm:Qr,h:Qr,hh:Qr,d:Qr,dd:Qr,M:Qr,MM:Qr,y:Qr,yy:Qr},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),n.defineLocale("tzm-latn",{months:"innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuá¸",mm:"%d minuá¸",h:"saÉa",hh:"%d tassaÉin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}}),n.defineLocale("tzm",{months:"âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ".split("_"),monthsShort:"âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ".split("_"),weekdays:"â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ".split("_"),weekdaysShort:"â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ".split("_"),weekdaysMin:"â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[â´°âµâ´·âµ â´´] LT",nextDay:"[â´°âµâ´½â´° â´´] LT",nextWeek:"dddd [â´´] LT",lastDay:"[â´°âµâ´°âµâµ â´´] LT",lastWeek:"dddd [â´´] LT",sameElse:"L"},relativeTime:{future:"â´·â´°â´·âµ âµ âµ¢â´°âµ %s",past:"âµ¢â´°âµ %s",s:"âµâµâµâ´½",ss:"%d âµâµâµâ´½",m:"âµâµâµâµâ´º",mm:"%d âµâµâµâµâ´º",h:"âµâ´°âµâ´°",hh:"%d âµâ´°âµâµâ´°âµâµâµ",d:"â´°âµâµ",dd:"%d oâµâµâ´°âµ",M:"â´°âµ¢oâµâµ",MM:"%d âµâµ¢âµ¢âµâµâµ",y:"â´°âµâ´³â´°âµ",yy:"%d âµâµâ´³â´°âµâµ"},week:{dow:6,doy:12}}),n.defineLocale("ug-cn",{months:"ÙØ§ÙÛØ§Ø±_ÙÛÛØ±Ø§Ù_ÙØ§Ø±Øª_Ø¦Ø§Ù¾Ø±ÛÙ_ÙØ§Ù_Ø¦ÙÙÛÙ_Ø¦ÙÙÛÙ_Ø¦Ø§ÛØºÛØ³Øª_Ø³ÛÙØªÛØ¨ÙØ±_Ø¦ÛÙØªÛØ¨ÙØ±_ÙÙÙØ§Ø¨ÙØ±_Ø¯ÛÙØ§Ø¨ÙØ±".split("_"),monthsShort:"ÙØ§ÙÛØ§Ø±_ÙÛÛØ±Ø§Ù_ÙØ§Ø±Øª_Ø¦Ø§Ù¾Ø±ÛÙ_ÙØ§Ù_Ø¦ÙÙÛÙ_Ø¦ÙÙÛÙ_Ø¦Ø§ÛØºÛØ³Øª_Ø³ÛÙØªÛØ¨ÙØ±_Ø¦ÛÙØªÛØ¨ÙØ±_ÙÙÙØ§Ø¨ÙØ±_Ø¯ÛÙØ§Ø¨ÙØ±".split("_"),weekdays:"ÙÛÙØ´ÛÙØ¨Û_Ø¯ÛØ´ÛÙØ¨Û_Ø³ÛÙØ´ÛÙØ¨Û_ÚØ§Ø±Ø´ÛÙØ¨Û_Ù¾ÛÙØ´ÛÙØ¨Û_Ø¬ÛÙÛ_Ø´ÛÙØ¨Û".split("_"),weekdaysShort:"ÙÛ_Ø¯Û_Ø³Û_ÚØ§_Ù¾Û_Ø¬Û_Ø´Û".split("_"),weekdaysMin:"ÙÛ_Ø¯Û_Ø³Û_ÚØ§_Ù¾Û_Ø¬Û_Ø´Û".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-ÙÙÙÙM-Ø¦Ø§ÙÙÙÚ­D-ÙÛÙÙ",LLL:"YYYY-ÙÙÙÙM-Ø¦Ø§ÙÙÙÚ­D-ÙÛÙÙØ HH:mm",LLLL:"ddddØ YYYY-ÙÙÙÙM-Ø¦Ø§ÙÙÙÚ­D-ÙÛÙÙØ HH:mm"},meridiemParse:/ÙÛØ±ÙÙ ÙÛÚÛ|Ø³ÛÚ¾ÛØ±|ÚÛØ´ØªÙÙ Ø¨ÛØ±ÛÙ|ÚÛØ´|ÚÛØ´ØªÙÙ ÙÛÙÙÙ|ÙÛÚ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ÙÛØ±ÙÙ ÙÛÚÛ"===t||"Ø³ÛÚ¾ÛØ±"===t||"ÚÛØ´ØªÙÙ Ø¨ÛØ±ÛÙ"===t?e:"ÚÛØ´ØªÙÙ ÙÛÙÙÙ"===t||"ÙÛÚ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"ÙÛØ±ÙÙ ÙÛÚÛ":a<900?"Ø³ÛÚ¾ÛØ±":a<1130?"ÚÛØ´ØªÙÙ Ø¨ÛØ±ÛÙ":a<1230?"ÚÛØ´":a<1800?"ÚÛØ´ØªÙÙ ÙÛÙÙÙ":"ÙÛÚ"},calendar:{sameDay:"[Ø¨ÛÚ¯ÛÙ Ø³Ø§Ø¦ÛØª] LT",nextDay:"[Ø¦ÛØªÛ Ø³Ø§Ø¦ÛØª] LT",nextWeek:"[ÙÛÙÛØ±ÙÙ] dddd [Ø³Ø§Ø¦ÛØª] LT",lastDay:"[ØªÛÙÛÚ¯ÛÙ] LT",lastWeek:"[Ø¦Ø§ÙØ¯ÙÙÙÙ] dddd [Ø³Ø§Ø¦ÛØª] LT",sameElse:"L"},relativeTime:{future:"%s ÙÛÙÙÙ",past:"%s Ø¨ÛØ±ÛÙ",s:"ÙÛÚÚÛ Ø³ÛÙÙÙØª",ss:"%d Ø³ÛÙÙÙØª",m:"Ø¨ÙØ± ÙÙÙÛØª",mm:"%d ÙÙÙÛØª",h:"Ø¨ÙØ± Ø³Ø§Ø¦ÛØª",hh:"%d Ø³Ø§Ø¦ÛØª",d:"Ø¨ÙØ± ÙÛÙ",dd:"%d ÙÛÙ",M:"Ø¨ÙØ± Ø¦Ø§Ù",MM:"%d Ø¦Ø§Ù",y:"Ø¨ÙØ± ÙÙÙ",yy:"%d ÙÙÙ"},dayOfMonthOrdinalParse:/\d{1,2}(-ÙÛÙÙ|-Ø¦Ø§Ù|-Ú¾ÛÙ¾ØªÛ)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-ÙÛÙÙ";case"w":case"W":return e+"-Ú¾ÛÙ¾ØªÛ";default:return e}},preparse:function(e){return e.replace(/Ø/g,",")},postformat:function(e){return e.replace(/,/g,"Ø")},week:{dow:1,doy:7}}),n.defineLocale("uk",{months:{format:"ÑÑÑÐ½Ñ_Ð»ÑÑÐ¾Ð³Ð¾_Ð±ÐµÑÐµÐ·Ð½Ñ_ÐºÐ²ÑÑÐ½Ñ_ÑÑÐ°Ð²Ð½Ñ_ÑÐµÑÐ²Ð½Ñ_Ð»Ð¸Ð¿Ð½Ñ_ÑÐµÑÐ¿Ð½Ñ_Ð²ÐµÑÐµÑÐ½Ñ_Ð¶Ð¾Ð²ÑÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°_Ð³ÑÑÐ´Ð½Ñ".split("_"),standalone:"ÑÑÑÐµÐ½Ñ_Ð»ÑÑÐ¸Ð¹_Ð±ÐµÑÐµÐ·ÐµÐ½Ñ_ÐºÐ²ÑÑÐµÐ½Ñ_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÐµÑÐ²ÐµÐ½Ñ_Ð»Ð¸Ð¿ÐµÐ½Ñ_ÑÐµÑÐ¿ÐµÐ½Ñ_Ð²ÐµÑÐµÑÐµÐ½Ñ_Ð¶Ð¾Ð²ÑÐµÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´_Ð³ÑÑÐ´ÐµÐ½Ñ".split("_")},monthsShort:"ÑÑÑ_Ð»ÑÑ_Ð±ÐµÑ_ÐºÐ²ÑÑ_ÑÑÐ°Ð²_ÑÐµÑÐ²_Ð»Ð¸Ð¿_ÑÐµÑÐ¿_Ð²ÐµÑ_Ð¶Ð¾Ð²Ñ_Ð»Ð¸ÑÑ_Ð³ÑÑÐ´".split("_"),weekdays:function(e,t){var n={nominative:"Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ°".split("_"),accusative:"Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÑ".split("_"),genitive:"Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»ÐºÐ°_Ð²ÑÐ²ÑÐ¾ÑÐºÐ°_ÑÐµÑÐµÐ´Ð¸_ÑÐµÑÐ²ÐµÑÐ³Ð°_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ¸".split("_")};return e?n[/(\[[ÐÐ²Ð£Ñ]\]) ?dddd/.test(t)?"accusative":/\[?(?:Ð¼Ð¸Ð½ÑÐ»Ð¾Ñ|Ð½Ð°ÑÑÑÐ¿Ð½Ð¾Ñ)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),weekdaysMin:"Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY Ñ.",LLL:"D MMMM YYYY Ñ., HH:mm",LLLL:"dddd, D MMMM YYYY Ñ., HH:mm"},calendar:{sameDay:ts("[Ð¡ÑÐ¾Ð³Ð¾Ð´Ð½Ñ "),nextDay:ts("[ÐÐ°Ð²ÑÑÐ° "),lastDay:ts("[ÐÑÐ¾ÑÐ° "),nextWeek:ts("[Ð£] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return ts("[ÐÐ¸Ð½ÑÐ»Ð¾Ñ] dddd [").call(this);case 1:case 2:case 4:return ts("[ÐÐ¸Ð½ÑÐ»Ð¾Ð³Ð¾] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"Ð·Ð° %s",past:"%s ÑÐ¾Ð¼Ñ",s:"Ð´ÐµÐºÑÐ»ÑÐºÐ° ÑÐµÐºÑÐ½Ð´",ss:es,m:es,mm:es,h:"Ð³Ð¾Ð´Ð¸Ð½Ñ",hh:es,d:"Ð´ÐµÐ½Ñ",dd:es,M:"Ð¼ÑÑÑÑÑ",MM:es,y:"ÑÑÐº",yy:es},meridiemParse:/Ð½Ð¾ÑÑ|ÑÐ°Ð½ÐºÑ|Ð´Ð½Ñ|Ð²ÐµÑÐ¾ÑÐ°/,isPM:function(e){return/^(Ð´Ð½Ñ|Ð²ÐµÑÐ¾ÑÐ°)$/.test(e)},meridiem:function(e,t,n){return e<4?"Ð½Ð¾ÑÑ":e<12?"ÑÐ°Ð½ÐºÑ":e<17?"Ð´Ð½Ñ":"Ð²ÐµÑÐ¾ÑÐ°"},dayOfMonthOrdinalParse:/\d{1,2}-(Ð¹|Ð³Ð¾)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-Ð¹";case"D":return e+"-Ð³Ð¾";default:return e}},week:{dow:1,doy:7}});var ns=["Ø¬ÙÙØ±Û","ÙØ±ÙØ±Û","ÙØ§Ø±Ú","Ø§Ù¾Ø±ÛÙ","ÙØ¦Û","Ø¬ÙÙ","Ø¬ÙÙØ§Ø¦Û","Ø§Ú¯Ø³Øª","Ø³ØªÙØ¨Ø±","Ø§Ú©ØªÙØ¨Ø±","ÙÙÙØ¨Ø±","Ø¯Ø³ÙØ¨Ø±"],as=["Ø§ØªÙØ§Ø±","Ù¾ÛØ±","ÙÙÚ¯Ù","Ø¨Ø¯Ú¾","Ø¬ÙØ¹Ø±Ø§Øª","Ø¬ÙØ¹Û","ÛÙØªÛ"];return n.defineLocale("ur",{months:ns,monthsShort:ns,weekdays:as,weekdaysShort:as,weekdaysMin:as,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ddddØ D MMMM YYYY HH:mm"},meridiemParse:/ØµØ¨Ø­|Ø´Ø§Ù/,isPM:function(e){return"Ø´Ø§Ù"===e},meridiem:function(e,t,n){return e<12?"ØµØ¨Ø­":"Ø´Ø§Ù"},calendar:{sameDay:"[Ø¢Ø¬ Ø¨ÙÙØª] LT",nextDay:"[Ú©Ù Ø¨ÙÙØª] LT",nextWeek:"dddd [Ø¨ÙÙØª] LT",lastDay:"[Ú¯Ø°Ø´ØªÛ Ø±ÙØ² Ø¨ÙÙØª] LT",lastWeek:"[Ú¯Ø°Ø´ØªÛ] dddd [Ø¨ÙÙØª] LT",sameElse:"L"},relativeTime:{future:"%s Ø¨Ø¹Ø¯",past:"%s ÙØ¨Ù",s:"ÚÙØ¯ Ø³ÛÚ©ÙÚ",ss:"%d Ø³ÛÚ©ÙÚ",m:"Ø§ÛÚ© ÙÙÙ¹",mm:"%d ÙÙÙ¹",h:"Ø§ÛÚ© Ú¯Ú¾ÙÙ¹Û",hh:"%d Ú¯Ú¾ÙÙ¹Û",d:"Ø§ÛÚ© Ø¯Ù",dd:"%d Ø¯Ù",M:"Ø§ÛÚ© ÙØ§Û",MM:"%d ÙØ§Û",y:"Ø§ÛÚ© Ø³Ø§Ù",yy:"%d Ø³Ø§Ù"},preparse:function(e){return e.replace(/Ø/g,",")},postformat:function(e){return e.replace(/,/g,"Ø")},week:{dow:1,doy:4}}),n.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}}),n.defineLocale("uz",{months:"ÑÐ½Ð²Ð°Ñ_ÑÐµÐ²ÑÐ°Ð»_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±Ñ_Ð¾ÐºÑÑÐ±Ñ_Ð½Ð¾ÑÐ±Ñ_Ð´ÐµÐºÐ°Ð±Ñ".split("_"),monthsShort:"ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº".split("_"),weekdays:"Ð¯ÐºÑÐ°Ð½Ð±Ð°_ÐÑÑÐ°Ð½Ð±Ð°_Ð¡ÐµÑÐ°Ð½Ð±Ð°_Ð§Ð¾ÑÑÐ°Ð½Ð±Ð°_ÐÐ°Ð¹ÑÐ°Ð½Ð±Ð°_ÐÑÐ¼Ð°_Ð¨Ð°Ð½Ð±Ð°".split("_"),weekdaysShort:"Ð¯ÐºÑ_ÐÑÑ_Ð¡ÐµÑ_Ð§Ð¾Ñ_ÐÐ°Ð¹_ÐÑÐ¼_Ð¨Ð°Ð½".split("_"),weekdaysMin:"Ð¯Ðº_ÐÑ_Ð¡Ðµ_Ð§Ð¾_ÐÐ°_ÐÑ_Ð¨Ð°".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[ÐÑÐ³ÑÐ½ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]",nextDay:"[Ð­ÑÑÐ°Ð³Ð°] LT [Ð´Ð°]",nextWeek:"dddd [ÐºÑÐ½Ð¸ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]",lastDay:"[ÐÐµÑÐ° ÑÐ¾Ð°Ñ] LT [Ð´Ð°]",lastWeek:"[Ð£ÑÐ³Ð°Ð½] dddd [ÐºÑÐ½Ð¸ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]",sameElse:"L"},relativeTime:{future:"Ð¯ÐºÐ¸Ð½ %s Ð¸ÑÐ¸Ð´Ð°",past:"ÐÐ¸Ñ Ð½ÐµÑÐ° %s Ð¾Ð»Ð´Ð¸Ð½",s:"ÑÑÑÑÐ°Ñ",ss:"%d ÑÑÑÑÐ°Ñ",m:"Ð±Ð¸Ñ Ð´Ð°ÐºÐ¸ÐºÐ°",mm:"%d Ð´Ð°ÐºÐ¸ÐºÐ°",h:"Ð±Ð¸Ñ ÑÐ¾Ð°Ñ",hh:"%d ÑÐ¾Ð°Ñ",d:"Ð±Ð¸Ñ ÐºÑÐ½",dd:"%d ÐºÑÐ½",M:"Ð±Ð¸Ñ Ð¾Ð¹",MM:"%d Ð¾Ð¹",y:"Ð±Ð¸Ñ Ð¹Ð¸Ð»",yy:"%d Ð¹Ð¸Ð»"},week:{dow:1,doy:7}}),n.defineLocale("vi",{months:"thÃ¡ng 1_thÃ¡ng 2_thÃ¡ng 3_thÃ¡ng 4_thÃ¡ng 5_thÃ¡ng 6_thÃ¡ng 7_thÃ¡ng 8_thÃ¡ng 9_thÃ¡ng 10_thÃ¡ng 11_thÃ¡ng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chá»§ nháº­t_thá»© hai_thá»© ba_thá»© tÆ°_thá»© nÄm_thá»© sÃ¡u_thá»© báº£y".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [nÄm] YYYY",LLL:"D MMMM [nÄm] YYYY HH:mm",LLLL:"dddd, D MMMM [nÄm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[HÃ´m nay lÃºc] LT",nextDay:"[NgÃ y mai lÃºc] LT",nextWeek:"dddd [tuáº§n tá»i lÃºc] LT",lastDay:"[HÃ´m qua lÃºc] LT",lastWeek:"dddd [tuáº§n rá»i lÃºc] LT",sameElse:"L"},relativeTime:{future:"%s tá»i",past:"%s trÆ°á»c",s:"vÃ i giÃ¢y",ss:"%d giÃ¢y",m:"má»t phÃºt",mm:"%d phÃºt",h:"má»t giá»",hh:"%d giá»",d:"má»t ngÃ y",dd:"%d ngÃ y",M:"má»t thÃ¡ng",MM:"%d thÃ¡ng",y:"má»t nÄm",yy:"%d nÄm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}}),n.defineLocale("x-pseudo",{months:"J~Ã¡Ã±ÃºÃ¡~rÃ½_F~Ã©brÃº~Ã¡rÃ½_~MÃ¡rc~h_Ãp~rÃ­l_~MÃ¡Ã½_~JÃºÃ±Ã©~_JÃºl~Ã½_ÃÃº~gÃºst~_SÃ©p~tÃ©mb~Ã©r_Ã~ctÃ³b~Ã©r_Ã~Ã³vÃ©m~bÃ©r_~DÃ©cÃ©~mbÃ©r".split("_"),monthsShort:"J~Ã¡Ã±_~FÃ©b_~MÃ¡r_~Ãpr_~MÃ¡Ã½_~JÃºÃ±_~JÃºl_~ÃÃºg_~SÃ©p_~Ãct_~ÃÃ³v_~DÃ©c".split("_"),monthsParseExact:!0,weekdays:"S~ÃºÃ±dÃ¡~Ã½_MÃ³~Ã±dÃ¡Ã½~_TÃºÃ©~sdÃ¡Ã½~_WÃ©d~Ã±Ã©sd~Ã¡Ã½_T~hÃºrs~dÃ¡Ã½_~FrÃ­d~Ã¡Ã½_S~Ã¡tÃºr~dÃ¡Ã½".split("_"),weekdaysShort:"S~ÃºÃ±_~MÃ³Ã±_~TÃºÃ©_~WÃ©d_~ThÃº_~FrÃ­_~SÃ¡t".split("_"),weekdaysMin:"S~Ãº_MÃ³~_TÃº_~WÃ©_T~h_Fr~_SÃ¡".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~Ã³dÃ¡~Ã½ Ã¡t] LT",nextDay:"[T~Ã³mÃ³~rrÃ³~w Ã¡t] LT",nextWeek:"dddd [Ã¡t] LT",lastDay:"[Ã~Ã©st~Ã©rdÃ¡~Ã½ Ã¡t] LT",lastWeek:"[L~Ã¡st] dddd [Ã¡t] LT",sameElse:"L"},relativeTime:{future:"Ã­~Ã± %s",past:"%s Ã¡~gÃ³",s:"Ã¡ ~fÃ©w ~sÃ©cÃ³~Ã±ds",ss:"%d s~Ã©cÃ³Ã±~ds",m:"Ã¡ ~mÃ­Ã±~ÃºtÃ©",mm:"%d m~Ã­Ã±Ãº~tÃ©s",h:"Ã¡~Ã± hÃ³~Ãºr",hh:"%d h~Ã³Ãºrs",d:"Ã¡ ~dÃ¡Ã½",dd:"%d d~Ã¡Ã½s",M:"Ã¡ ~mÃ³Ã±~th",MM:"%d m~Ã³Ã±t~hs",y:"Ã¡ ~Ã½Ã©Ã¡r",yy:"%d Ã½~Ã©Ã¡rs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}}),n.defineLocale("yo",{months:"Sáº¹Ìráº¹Ì_EÌreÌleÌ_áº¸ráº¹ÌnaÌ_IÌgbeÌ_EÌbibi_OÌkuÌdu_Agáº¹mo_OÌguÌn_Owewe_á»ÌwaÌraÌ_BeÌluÌ_á»Ìpáº¹ÌÌ".split("_"),monthsShort:"Sáº¹Ìr_EÌrl_áº¸rn_IÌgb_EÌbi_OÌkuÌ_Agáº¹_OÌguÌ_Owe_á»ÌwaÌ_BeÌl_á»Ìpáº¹ÌÌ".split("_"),weekdays:"AÌiÌkuÌ_AjeÌ_IÌsáº¹Ìgun_á»já»ÌruÌ_á»já»Ìbá»_áº¸tiÌ_AÌbaÌmáº¹Ìta".split("_"),weekdaysShort:"AÌiÌk_AjeÌ_IÌsáº¹Ì_á»jr_á»jb_áº¸tiÌ_AÌbaÌ".split("_"),weekdaysMin:"AÌiÌ_Aj_IÌs_á»r_á»b_áº¸t_AÌb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[OÌniÌ ni] LT",nextDay:"[á»Ìla ni] LT",nextWeek:"dddd [á»sáº¹Ì toÌn'bá»] [ni] LT",lastDay:"[AÌna ni] LT",lastWeek:"dddd [á»sáº¹Ì toÌlá»Ì] [ni] LT",sameElse:"L"},relativeTime:{future:"niÌ %s",past:"%s ká»jaÌ",s:"iÌsáº¹juÌ aayaÌ die",ss:"aayaÌ %d",m:"iÌsáº¹juÌ kan",mm:"iÌsáº¹juÌ %d",h:"waÌkati kan",hh:"waÌkati %d",d:"á»já»Ì kan",dd:"á»já»Ì %d",M:"osuÌ kan",MM:"osuÌ %d",y:"á»duÌn kan",yy:"á»duÌn %d"},dayOfMonthOrdinalParse:/á»já»Ì\s\d{1,2}/,ordinal:"á»já»Ì %d",week:{dow:1,doy:4}}),n.defineLocale("zh-cn",{months:"ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ".split("_"),monthsShort:"1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),weekdays:"æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­".split("_"),weekdaysShort:"å¨æ¥_å¨ä¸_å¨äº_å¨ä¸_å¨å_å¨äº_å¨å­".split("_"),weekdaysMin:"æ¥_ä¸_äº_ä¸_å_äº_å­".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYYå¹´MæDæ¥",LLL:"YYYYå¹´MæDæ¥Ahç¹mmå",LLLL:"YYYYå¹´MæDæ¥ddddAhç¹mmå",l:"YYYY/M/D",ll:"YYYYå¹´MæDæ¥",lll:"YYYYå¹´MæDæ¥ HH:mm",llll:"YYYYå¹´MæDæ¥dddd HH:mm"},meridiemParse:/åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,meridiemHour:function(e,t){return 12===e&&(e=0),"åæ¨"===t||"æ©ä¸"===t||"ä¸å"===t?e:"ä¸å"===t||"æä¸"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var a=100*e+t;return a<600?"åæ¨":a<900?"æ©ä¸":a<1130?"ä¸å":a<1230?"ä¸­å":a<1800?"ä¸å":"æä¸"},calendar:{sameDay:"[ä»å¤©]LT",nextDay:"[æå¤©]LT",nextWeek:"[ä¸]ddddLT",lastDay:"[æ¨å¤©]LT",lastWeek:"[ä¸]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(æ¥|æ|å¨)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"æ¥";case"M":return e+"æ";case"w":case"W":return e+"å¨";default:return e}},relativeTime:{future:"%så",past:"%så",s:"å ç§",ss:"%d ç§",m:"1 åé",mm:"%d åé",h:"1 å°æ¶",hh:"%d å°æ¶",d:"1 å¤©",dd:"%d å¤©",M:"1 ä¸ªæ",MM:"%d ä¸ªæ",y:"1 å¹´",yy:"%d å¹´"},week:{dow:1,doy:4}}),n.defineLocale("zh-hk",{months:"ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ".split("_"),monthsShort:"1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),weekdays:"æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­".split("_"),weekdaysShort:"é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­".split("_"),weekdaysMin:"æ¥_ä¸_äº_ä¸_å_äº_å­".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYYå¹´MæDæ¥",LLL:"YYYYå¹´MæDæ¥ HH:mm",LLLL:"YYYYå¹´MæDæ¥dddd HH:mm",l:"YYYY/M/D",ll:"YYYYå¹´MæDæ¥",lll:"YYYYå¹´MæDæ¥ HH:mm",llll:"YYYYå¹´MæDæ¥dddd HH:mm"},meridiemParse:/åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,meridiemHour:function(e,t){return 12===e&&(e=0),"åæ¨"===t||"æ©ä¸"===t||"ä¸å"===t?e:"ä¸­å"===t?e>=11?e:e+12:"ä¸å"===t||"æä¸"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"åæ¨":a<900?"æ©ä¸":a<1130?"ä¸å":a<1230?"ä¸­å":a<1800?"ä¸å":"æä¸"},calendar:{sameDay:"[ä»å¤©]LT",nextDay:"[æå¤©]LT",nextWeek:"[ä¸]ddddLT",lastDay:"[æ¨å¤©]LT",lastWeek:"[ä¸]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(æ¥|æ|é±)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"æ¥";case"M":return e+"æ";case"w":case"W":return e+"é±";default:return e}},relativeTime:{future:"%så§",past:"%så",s:"å¹¾ç§",ss:"%d ç§",m:"1 åé",mm:"%d åé",h:"1 å°æ",hh:"%d å°æ",d:"1 å¤©",dd:"%d å¤©",M:"1 åæ",MM:"%d åæ",y:"1 å¹´",yy:"%d å¹´"}}),n.defineLocale("zh-tw",{months:"ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ".split("_"),monthsShort:"1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),weekdays:"æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­".split("_"),weekdaysShort:"é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­".split("_"),weekdaysMin:"æ¥_ä¸_äº_ä¸_å_äº_å­".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYYå¹´MæDæ¥",LLL:"YYYYå¹´MæDæ¥ HH:mm",LLLL:"YYYYå¹´MæDæ¥dddd HH:mm",l:"YYYY/M/D",ll:"YYYYå¹´MæDæ¥",lll:"YYYYå¹´MæDæ¥ HH:mm",llll:"YYYYå¹´MæDæ¥dddd HH:mm"},meridiemParse:/åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,meridiemHour:function(e,t){return 12===e&&(e=0),"åæ¨"===t||"æ©ä¸"===t||"ä¸å"===t?e:"ä¸­å"===t?e>=11?e:e+12:"ä¸å"===t||"æä¸"===t?e+12:void 0},meridiem:function(e,t,n){var a=100*e+t;return a<600?"åæ¨":a<900?"æ©ä¸":a<1130?"ä¸å":a<1230?"ä¸­å":a<1800?"ä¸å":"æä¸"},calendar:{sameDay:"[ä»å¤©] LT",nextDay:"[æå¤©] LT",nextWeek:"[ä¸]dddd LT",lastDay:"[æ¨å¤©] LT",lastWeek:"[ä¸]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(æ¥|æ|é±)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"æ¥";case"M":return e+"æ";case"w":case"W":return e+"é±";default:return e}},relativeTime:{future:"%så§",past:"%så",s:"å¹¾ç§",ss:"%d ç§",m:"1 åé",mm:"%d åé",h:"1 å°æ",hh:"%d å°æ",d:"1 å¤©",dd:"%d å¤©",M:"1 åæ",MM:"%d åæ",y:"1 å¹´",yy:"%d å¹´"}}),n.locale("en"),n}),function(){"use strict";jQuery(function(e){function t(t){if(t.length>0){t.forEach(function(e){switch(e.date_formatted=moment(e.date).format("DD.MM.YYYY"),e.time_formatted=moment(e.date).format("HH:mm"),e.date_due_formatted=moment(e.date_due).fromNow(),e.importance){case"1":e.importance_in_words="gering";break;case"2":e.importance_in_words="normal";break;case"3":e.importance_in_words="hoch"}});const n=e("#noteTemplate").html(),a=Handlebars.compile(n);e(".notes__list").html(a(t))}else{const t=e("#emptyTemplate").html();e(".notes__list").html(t)}}function n(){e(".edit-note").addClass("open"),e(".dimmer").addClass("active")}function a(){e(".edit-note").removeClass("open"),e(".dimmer").removeClass("active")}!async function(){"light"==localStorage.getItem("style")&&(e("body").addClass("style--light"),e(".switch-style").html("zum dunkeln Modus wechseln")),t(await getNotes())}(),e(".open-new").on("click",function(t){e(".edit-note__title").html("Neue Notiz hinzufÃ¼gen"),e(".edit-note__form").removeData("update"),e(".edit-note__form")[0].reset(),n()}),e(".cancel-note").on("click",function(e){a()}),e(".sort-notes").on("click",async function(n){e(".sort-notes").removeClass("sort-notes--active"),e(this).addClass("sort-notes--active"),t(await getNotes(e(this).data("sort"),void 0))}),e(".switch-status").on("click",async function(n){e(".switch-status").removeClass("switch-status--active"),e(this).addClass("switch-status--active"),t(await getNotes(void 0,e(this).data("status")))}),e(document).on("click",".archive-note",async function(n){archiveNote(e(this).data("note")),t(await getNotes())}),e(document).on("click",".unarchive-note",async function(n){unarchiveNote(e(this).data("note")),t(await getNotes(void 0,"archived"))}),e(document).on("click",".delete-note",async function(n){deleteNote(e(this).data("note")),t(await getNotes(void 0,"archived"))}),e(document).on("click",".load-edit",async function(t){const a=await getNote(e(this).data("note"));e(".edit-note__form").data("update",a._id),e("[name=title]").val(a.title),e("[name=content]").val(a.content),e("[name=importance][value="+a.importance+"]").attr("checked","checked"),e("[name=date_due]").val(a.date_due),e(".edit-note__title").html("Notiz bearbeiten"),n()}),e(".edit-note__form").submit(async function(n){n.preventDefault(),e(this).data("update")?await updateNote(e(this).data("update"),e(this).serializeArray()):await addNote(e(this).serializeArray()),t(await getNotes()),a(),this.reset()}),e(".switch-style").on("click",function(t){e(this).html(function(){return e("body").hasClass("style--light")?"zum hellen Modus wechseln":"zum dunkeln Modus wechseln"}),e("body").toggleClass("style--light"),"light"==localStorage.getItem("style")?localStorage.setItem("style","dark"):localStorage.setItem("style","light")}),moment.locale("de"),Handlebars.registerHelper("ifEquals",function(e,t,n){return e==t?n.fn(this):n.inverse(this)}),Handlebars.registerHelper("breaklines",function(e){return e=(e=Handlebars.Utils.escapeExpression(e)).replace(/(\r\n|\n|\r)/gm,"<br>"),new Handlebars.SafeString(e)})})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
